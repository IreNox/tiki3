
function(finalize_exe_resolve_dependencies MODULE_NAME)
  getprop(MODULE_DEP ${MODULE_NAME}_DEPENDENCIES)
    
  foreach(VAR ${MODULE_DEP})
    appendprop(EXE_DEP ${VAR})
    finalize_exe_resolve_dependencies(${VAR})
  endforeach(VAR)
endfunction(finalize_exe_resolve_dependencies)

function(finalize_exe_begin_unity PROJ_NAME MODULE_NAME UNITY_EXT)
  set(UNITY_CPP_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/unity/${PROJ_NAME}_unity/${MODULE_NAME}_unity.${UNITY_EXT}")
  set(UNITY_CPP "${UNITY_CPP_OUTPUT}.tmp")

  file(WRITE "${UNITY_CPP}" "// Unity Build generated by CMake\n\n")
  file(APPEND "${UNITY_CPP}" "#define TIKI_CURRENT_MODULE \"${MODULE_NAME}\"\n")
  file(APPEND "${UNITY_CPP}" "#include \"define_${PROJ_NAME}.hpp\"\n")  
  
  set(UNITY_CPP_OUTPUT "${UNITY_CPP_OUTPUT}" PARENT_SCOPE)
  set(UNITY_CPP "${UNITY_CPP}" PARENT_SCOPE)
endfunction(finalize_exe_begin_unity)

function(finalize_exe_end_unity UNITY_CPP UNITY_CPP_OUTPUT)
  file(READ ${UNITY_CPP} UNITY_CONTENT)

  if(EXISTS ${UNITY_CPP_OUTPUT})
	file(READ ${UNITY_CPP_OUTPUT} UNITY_CONTENT_OLDFILE)
	
	if(NOT ${UNITY_CONTENT} STREQUAL ${UNITY_CONTENT_OLDFILE})
      message("Generate Unity: ${UNITY_CPP_OUTPUT}")
	  file(WRITE ${UNITY_CPP_OUTPUT} ${UNITY_CONTENT})
	endif()
  else()
    message("Generate Unity: ${UNITY_CPP_OUTPUT}")
	file(WRITE ${UNITY_CPP_OUTPUT} ${UNITY_CONTENT})
  endif()
  
  file(REMOVE ${UNITY_CPP})
endfunction(finalize_exe_end_unity)

function(finalize_exe_add_to_unity UNITY_CPP FILE)
  get_filename_component(EXT ${FILE} EXT)
  
  if ("${EXT}" STREQUAL ".cpp" OR "${EXT}" STREQUAL ".c")
    set_source_files_properties(${FILE} PROPERTIES HEADER_FILE_ONLY true)
    file(APPEND ${UNITY_CPP} "#include \"${FILE}\"\n")
  endif()
endfunction(finalize_exe_add_to_unity)

function(finalize_exe NAME SUBSYSTEM)
  string(TOUPPER ${NAME} NAME)
  string(TOLOWER ${NAME} PROJ_NAME)
  
  finalize_exe_resolve_dependencies(${NAME})
  
  getprop(DEP EXE_DEP)
  setprop(EXE_DEP "")
  list(REMOVE_DUPLICATES DEP)

  getprop(EXE_SOURCE ${NAME}_SOURCE)
  getprop(EXE_INCLUDE ${NAME}_INCLUDE)
  getprop(EXE_LIBRARY ${NAME}_LIBRARY)
  getprop(EXE_BINARY ${NAME}_BINARY)

  getprop(EXE_LINKLIB ${NAME}_LINKLIB)
  getprop(EXE_BINLIB ${NAME}_BINLIB)
  
  # Unity build
  finalize_exe_begin_unity(${PROJ_NAME} ${PROJ_NAME} cpp)
  
  foreach(VAR ${EXE_SOURCE})
    file(GLOB UNITY_FILES ${VAR})      
    set_source_files_properties(${VAR} PROPERTIES HEADER_FILE_ONLY true)
    
    foreach(FILE ${UNITY_FILES})
      finalize_exe_add_to_unity(${UNITY_CPP} ${FILE})
    endforeach(FILE)
    
    set(EXE_SOURCE ${EXE_SOURCE} ${UNITY_CPP_OUTPUT})
  endforeach(VAR)

  set_source_files_properties(${UNITY_CPP} PROPERTIES GENERATED true)    

  #exe_output_debugdata(${PROJ_NAME})

  set(EXE_INCLUDE ${EXE_INCLUDE} ${CMAKE_CURRENT_BINARY_DIR}/define)
  finalize_define(${PROJ_NAME} "${DEP}")
  finalize_exe_end_unity(${UNITY_CPP} ${UNITY_CPP_OUTPUT})

  foreach(NAME ${DEP})
    string(TOUPPER ${NAME} NAME)
    string(TOLOWER ${NAME} LNAME)

    #module_output_debugdata(${NAME})
 
    getprop(MODULE_SOURCE ${NAME}_SOURCE)
    getprop(MODULE_INCLUDE ${NAME}_INCLUDE)
    getprop(MODULE_LIBRARY ${NAME}_LIBRARY)
    getprop(MODULE_BINARY ${NAME}_BINARY)
    getprop(MODULE_C ${NAME}_C)
    
    getprop(MODULE_LINKLIB ${NAME}_LINKLIB)
    getprop(MODULE_BINLIB ${NAME}_BINLIB)

    # Unity build
    if ("${MODULE_C}" STREQUAL "TRUE")
      set(UNITY_EXT c)
    else()
      set(UNITY_EXT cpp)
    endif()

    finalize_exe_begin_unity(${PROJ_NAME} ${LNAME} ${UNITY_EXT})
    
    foreach(VAR ${MODULE_SOURCE})
      file(GLOB UNITY_FILES ${VAR})      
      
      foreach(FILE ${UNITY_FILES})
        finalize_exe_add_to_unity(${UNITY_CPP} ${FILE})
      endforeach(FILE)
      
      set(EXE_SOURCE ${EXE_SOURCE} ${VAR} ${UNITY_CPP_OUTPUT})
    endforeach(VAR)

    set_source_files_properties(${UNITY_CPP} PROPERTIES GENERATED true)
    finalize_exe_end_unity(${UNITY_CPP} ${UNITY_CPP_OUTPUT})
  
    foreach(VAR ${MODULE_INCLUDE})
      set(EXE_INCLUDE ${EXE_INCLUDE} ${VAR})
    endforeach(VAR)

    foreach(VAR ${MODULE_LIBRARY})
      set(EXE_LIBRARY ${EXE_LIBRARY} ${VAR})
    endforeach(VAR)

    foreach(VAR ${MODULE_BINARY})
      set(EXE_BINARY ${EXE_BINARY} ${VAR})
    endforeach(VAR)
	
    foreach(VAR ${MODULE_LINKLIB})
      set(EXE_LINKLIB ${EXE_LINKLIB} ${VAR})
    endforeach(VAR)

    foreach(VAR ${MODULE_BINLIB})
      set(EXE_BINLIB ${EXE_BINLIB} ${VAR})
    endforeach(VAR)
    
    getprop(MODULE_PATH ${NAME}_PATH)
    string(REPLACE "${CMAKE_CURRENT_SOURCE_DIR}/" "" MODULE_PATH "${MODULE_PATH}")
    string(LENGTH "${MODULE_PATH}" MODULE_PATH_LENGTH)
    math(EXPR MODULE_PATH_LENGTH ${MODULE_PATH_LENGTH}-1)
    string(SUBSTRING "${MODULE_PATH}" 0 ${MODULE_PATH_LENGTH} MODULE_PATH)
    string(REPLACE "/" "\\" MODULE_PATH "${MODULE_PATH}")
    
    source_group("${MODULE_PATH}\\include\\" "/${LNAME}/[-_a-zA-Z0-9./]*.(h|hpp)$")
    source_group("${MODULE_PATH}\\source\\" "/${LNAME}/[-_a-zA-Z0-9./]*.(c|cpp|inl)$")
    source_group("${MODULE_PATH}\\" "/${LNAME}/cmakelists.txt$")
  endforeach(NAME)

  source_group("${PROJ_NAME}\\include" "${PROJ_NAME}/[-_a-zA-Z0-9./]*.(h|hpp)$")
  source_group("${PROJ_NAME}\\source" "${PROJ_NAME}/[-_a-zA-Z0-9./]*.(c|cpp|inl)$")
  source_group("${PROJ_NAME}" "${PROJ_NAME}/cmakelists.txt$")
  source_group("unity" "/unity/${PROJ_NAME}_unity/[-_a-zA-Z0-9./]*.(c|cpp)$")

  foreach(VAR ${EXE_SOURCE})
    file(GLOB ALL_FILES ${VAR})
    
    foreach(FILE ${ALL_FILES})    
	  set(ALL_SOURCE ${ALL_SOURCE} ${FILE})
    endforeach(FILE)
  endforeach(VAR)

  #########
  # WICHTIG
  link_directories(${EXE_LIBRARY})
  add_executable(${PROJ_NAME} ${SUBSYSTEM} ${ALL_SOURCE})
  include_directories(${EXE_INCLUDE})
  target_link_libraries(${PROJ_NAME} ${EXE_LINKLIB})
  
  foreach(VAR ${EXE_BINLIB})
    string(TOLOWER ${VAR} BINLIB)
    
    foreach(PATH ${EXE_BINARY})
      file(GLOB ALL_FILES "${PATH}/*")
      
      foreach(FILE ${ALL_FILES})
        get_filename_component(BASENAME ${FILE} NAME)
        string(TOLOWER ${BASENAME} BASENAMELOW)
      
        if ("${BASENAMELOW}" STREQUAL "${BINLIB}")
          add_custom_command(
            TARGET ${PROJ_NAME} POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy_if_different
            "${FILE}"
            $<CONFIGURATION>
          )
        endif()
      endforeach(FILE)
    endforeach(PATH)
  endforeach(VAR)
  
  #set(EXECUTABLE_OUTPUT_PATH bin/ CACHE PATH "Build directory" FORCE)
endfunction(finalize_exe)
