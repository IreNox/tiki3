/*-------------------------------------------------------------------------------------
 *
 * Copyright (c) Microsoft Corporation
 *
 *-------------------------------------------------------------------------------------*/
import "oaidl.idl";
import "ocidl.idl";

import "d3d11_3.idl";

// Forward declarations
interface ID3D12CommandQueue;

cpp_quote( "#define D3D12_BINDING 1" )

typedef enum D3D12_COMMAND_LIST_TYPE
{
    D3D12_COMMAND_LIST_TYPE_DIRECT  = 0,
    D3D12_COMMAND_LIST_TYPE_BUNDLE  = 1,
    D3D12_COMMAND_LIST_TYPE_COMPUTE = 2,
    D3D12_COMMAND_LIST_TYPE_COPY    = 3,    
} D3D12_COMMAND_LIST_TYPE;

typedef enum D3D12_PRIMITIVE_TOPOLOGY_TYPE
{
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT	= 1,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE	= 2,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE	= 3,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH	= 4
} 	D3D12_PRIMITIVE_TOPOLOGY_TYPE;

cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_DEFAULT {};" )
cpp_quote( "extern const DECLSPEC_SELECTANY CD3D12_DEFAULT D3D12_DEFAULT;" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef enum D3D12_INPUT_CLASSIFICATION
{
    D3D12_INPUT_PER_VERTEX_DATA = 0,
    D3D12_INPUT_PER_INSTANCE_DATA = 1
} D3D12_INPUT_CLASSIFICATION;

const UINT D3D12_APPEND_ALIGNED_ELEMENT = 0xffffffff;

typedef struct D3D12_INPUT_ELEMENT_DESC
{
    LPCSTR SemanticName;
    UINT SemanticIndex;
    DXGI_FORMAT Format;
    UINT InputSlot;
    UINT AlignedByteOffset;
    D3D12_INPUT_CLASSIFICATION InputSlotClass;
    UINT InstanceDataStepRate;
} D3D12_INPUT_ELEMENT_DESC;

// Keep FILL_MODE values in sync with earlier DX versions (HW consumes values directly).
typedef enum D3D12_FILL_MODE
{
    // 1 was POINT in D3D, unused in D3D12
    D3D12_FILL_WIREFRAME = 2,
    D3D12_FILL_SOLID = 3
} D3D12_FILL_MODE;

typedef D3D_PRIMITIVE_TOPOLOGY D3D12_PRIMITIVE_TOPOLOGY;

typedef D3D_PRIMITIVE D3D12_PRIMITIVE;

// Keep CULL_MODE values in sync with earlier DX versions (HW consumes values directly).
typedef enum D3D12_CULL_MODE
{
    D3D12_CULL_NONE = 1,
    D3D12_CULL_FRONT = 2,
    D3D12_CULL_BACK = 3
} D3D12_CULL_MODE;

typedef struct D3D12_SO_DECLARATION_ENTRY
{
    UINT Stream;
    LPCSTR SemanticName;
    UINT SemanticIndex;
    BYTE StartComponent;
    BYTE ComponentCount;
    BYTE OutputSlot;
} D3D12_SO_DECLARATION_ENTRY;

typedef struct D3D12_VIEWPORT
{
    FLOAT TopLeftX;
    FLOAT TopLeftY;
    FLOAT Width;
    FLOAT Height;
    FLOAT MinDepth;
    FLOAT MaxDepth;
} D3D12_VIEWPORT;

cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "inline bool operator==( const D3D12_VIEWPORT& l, const D3D12_VIEWPORT& r )" )
cpp_quote( "{" )
cpp_quote( "    return l.TopLeftX == r.TopLeftX && l.TopLeftY == r.TopLeftY && l.Width == r.Width &&" )
cpp_quote( "        l.Height == r.Height && l.MinDepth == r.MinDepth && l.MaxDepth == r.MaxDepth;" )
cpp_quote( "}" )
cpp_quote( "inline bool operator!=( const D3D12_VIEWPORT& l, const D3D12_VIEWPORT& r )" )
cpp_quote( "{ return !( l == r ); }" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef RECT D3D12_RECT;

cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_RECT : public D3D12_RECT" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_RECT()" )
cpp_quote( "    {}" )
cpp_quote( "    explicit CD3D12_RECT( const D3D12_RECT& o ) :" )
cpp_quote( "        D3D12_RECT( o )" )
cpp_quote( "    {}" )
cpp_quote( "    explicit CD3D12_RECT(" )
cpp_quote( "        LONG Left," )
cpp_quote( "        LONG Top," )
cpp_quote( "        LONG Right," )
cpp_quote( "        LONG Bottom )" )
cpp_quote( "    {" )
cpp_quote( "        left = Left;" )
cpp_quote( "        top = Top;" )
cpp_quote( "        right = Right;" )
cpp_quote( "        bottom = Bottom;" )
cpp_quote( "    }" )
cpp_quote( "    ~CD3D12_RECT() {}" )
cpp_quote( "    operator const D3D12_RECT&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "#if defined( D3D11_NO_HELPERS )" )
cpp_quote( "inline bool operator==( const D3D12_RECT& l, const D3D12_RECT& r )" )
cpp_quote( "{" )
cpp_quote( "    return l.left == r.left && l.top == r.top &&" )
cpp_quote( "        l.right == r.right && l.bottom == r.bottom;" )
cpp_quote( "}" )
cpp_quote( "inline bool operator!=( const D3D12_RECT& l, const D3D12_RECT& r )" )
cpp_quote( "{ return !( l == r ); }" )
cpp_quote( "#endif" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef struct D3D12_BOX
{
    UINT left;
    UINT top;
    UINT front;
    UINT right;
    UINT bottom;
    UINT back;
} D3D12_BOX;

cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_BOX : public D3D12_BOX" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_BOX()" )
cpp_quote( "    {}" )
cpp_quote( "    explicit CD3D12_BOX( const D3D12_BOX& o ) :" )
cpp_quote( "        D3D12_BOX( o )" )
cpp_quote( "    {}" )
cpp_quote( "    explicit CD3D12_BOX(" )
cpp_quote( "        LONG Left," )
cpp_quote( "        LONG Right )" )
cpp_quote( "    {" )
cpp_quote( "        left = Left;" )
cpp_quote( "        top = 0;" )
cpp_quote( "        front = 0;" )
cpp_quote( "        right = Right;" )
cpp_quote( "        bottom = 1;" )
cpp_quote( "        back = 1;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_BOX(" )
cpp_quote( "        LONG Left," )
cpp_quote( "        LONG Top," )
cpp_quote( "        LONG Right," )
cpp_quote( "        LONG Bottom )" )
cpp_quote( "    {" )
cpp_quote( "        left = Left;" )
cpp_quote( "        top = Top;" )
cpp_quote( "        front = 0;" )
cpp_quote( "        right = Right;" )
cpp_quote( "        bottom = Bottom;" )
cpp_quote( "        back = 1;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_BOX(" )
cpp_quote( "        LONG Left," )
cpp_quote( "        LONG Top," )
cpp_quote( "        LONG Front," )
cpp_quote( "        LONG Right," )
cpp_quote( "        LONG Bottom," )
cpp_quote( "        LONG Back )" )
cpp_quote( "    {" )
cpp_quote( "        left = Left;" )
cpp_quote( "        top = Top;" )
cpp_quote( "        front = Front;" )
cpp_quote( "        right = Right;" )
cpp_quote( "        bottom = Bottom;" )
cpp_quote( "        back = Back;" )
cpp_quote( "    }" )
cpp_quote( "    ~CD3D12_BOX() {}" )
cpp_quote( "    operator const D3D12_BOX&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "inline bool operator==( const D3D12_BOX& l, const D3D12_BOX& r )" )
cpp_quote( "{" )
cpp_quote( "    return l.left == r.left && l.top == r.top && l.front == r.front &&" )
cpp_quote( "        l.right == r.right && l.bottom == r.bottom && l.back == r.back;" )
cpp_quote( "}" )
cpp_quote( "inline bool operator!=( const D3D12_BOX& l, const D3D12_BOX& r )" )
cpp_quote( "{ return !( l == r ); }" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Depth-Stencil State
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Keep COMPARISON_FUNC values in sync with earlier DX versions (HW consumes values directly).
typedef enum D3D12_COMPARISON_FUNC
{
    D3D12_COMPARISON_NEVER = 1,
    D3D12_COMPARISON_LESS = 2,
    D3D12_COMPARISON_EQUAL = 3,
    D3D12_COMPARISON_LESS_EQUAL = 4,
    D3D12_COMPARISON_GREATER = 5,
    D3D12_COMPARISON_NOT_EQUAL = 6,
    D3D12_COMPARISON_GREATER_EQUAL = 7,
    D3D12_COMPARISON_ALWAYS = 8
} D3D12_COMPARISON_FUNC;

typedef enum D3D12_DEPTH_WRITE_MASK
{
    D3D12_DEPTH_WRITE_MASK_ZERO = 0,
    D3D12_DEPTH_WRITE_MASK_ALL = 1
} D3D12_DEPTH_WRITE_MASK;

// Keep STENCILOP values in sync with earlier DX versions (HW consumes values directly).
typedef enum D3D12_STENCIL_OP
{
    D3D12_STENCIL_OP_KEEP = 1,
    D3D12_STENCIL_OP_ZERO = 2,
    D3D12_STENCIL_OP_REPLACE = 3,
    D3D12_STENCIL_OP_INCR_SAT = 4,
    D3D12_STENCIL_OP_DECR_SAT = 5,
    D3D12_STENCIL_OP_INVERT = 6,
    D3D12_STENCIL_OP_INCR = 7,
    D3D12_STENCIL_OP_DECR = 8
} D3D12_STENCIL_OP;

typedef struct D3D12_DEPTH_STENCILOP_DESC
{
    D3D12_STENCIL_OP StencilFailOp;
    D3D12_STENCIL_OP StencilDepthFailOp;
    D3D12_STENCIL_OP StencilPassOp;
    D3D12_COMPARISON_FUNC StencilFunc;
} D3D12_DEPTH_STENCILOP_DESC;

typedef struct D3D12_DEPTH_STENCIL_DESC
{
    BOOL DepthEnable;
    D3D12_DEPTH_WRITE_MASK DepthWriteMask;
    D3D12_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    UINT8 StencilReadMask;
    UINT8 StencilWriteMask;
    D3D12_DEPTH_STENCILOP_DESC FrontFace;
    D3D12_DEPTH_STENCILOP_DESC BackFace;
} D3D12_DEPTH_STENCIL_DESC;

cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_DEPTH_STENCIL_DESC : public D3D12_DEPTH_STENCIL_DESC" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_DEPTH_STENCIL_DESC()" )
cpp_quote( "    {}" )
cpp_quote( "    explicit CD3D12_DEPTH_STENCIL_DESC( const D3D12_DEPTH_STENCIL_DESC& o ) :" )
cpp_quote( "        D3D12_DEPTH_STENCIL_DESC( o )" )
cpp_quote( "    {}" )
cpp_quote( "    explicit CD3D12_DEPTH_STENCIL_DESC( CD3D12_DEFAULT )" )
cpp_quote( "    {" )
cpp_quote( "        DepthEnable = TRUE;" )
cpp_quote( "        DepthWriteMask = D3D12_DEPTH_WRITE_MASK_ALL;" )
cpp_quote( "        DepthFunc = D3D12_COMPARISON_LESS;" )
cpp_quote( "        StencilEnable = FALSE;" )
cpp_quote( "        StencilReadMask = D3D11_DEFAULT_STENCIL_READ_MASK;" )
cpp_quote( "        StencilWriteMask = D3D11_DEFAULT_STENCIL_WRITE_MASK;" )
cpp_quote( "        const D3D12_DEPTH_STENCILOP_DESC defaultStencilOp =" )
cpp_quote( "        { D3D12_STENCIL_OP_KEEP, D3D12_STENCIL_OP_KEEP, D3D12_STENCIL_OP_KEEP, D3D12_COMPARISON_ALWAYS };" )
cpp_quote( "        FrontFace = defaultStencilOp;" )
cpp_quote( "        BackFace = defaultStencilOp;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_DEPTH_STENCIL_DESC(" )
cpp_quote( "        BOOL depthEnable," )
cpp_quote( "        D3D12_DEPTH_WRITE_MASK depthWriteMask," )
cpp_quote( "        D3D12_COMPARISON_FUNC depthFunc," )
cpp_quote( "        BOOL stencilEnable," )
cpp_quote( "        UINT8 stencilReadMask," )
cpp_quote( "        UINT8 stencilWriteMask," )
cpp_quote( "        D3D12_STENCIL_OP frontStencilFailOp," )
cpp_quote( "        D3D12_STENCIL_OP frontStencilDepthFailOp," )
cpp_quote( "        D3D12_STENCIL_OP frontStencilPassOp," )
cpp_quote( "        D3D12_COMPARISON_FUNC frontStencilFunc," )
cpp_quote( "        D3D12_STENCIL_OP backStencilFailOp," )
cpp_quote( "        D3D12_STENCIL_OP backStencilDepthFailOp," )
cpp_quote( "        D3D12_STENCIL_OP backStencilPassOp," )
cpp_quote( "        D3D12_COMPARISON_FUNC backStencilFunc )" )
cpp_quote( "    {" )
cpp_quote( "        DepthEnable = depthEnable;" )
cpp_quote( "        DepthWriteMask = depthWriteMask;" )
cpp_quote( "        DepthFunc = depthFunc;" )
cpp_quote( "        StencilEnable = stencilEnable;" )
cpp_quote( "        StencilReadMask = stencilReadMask;" )
cpp_quote( "        StencilWriteMask = stencilWriteMask;" )
cpp_quote( "        FrontFace.StencilFailOp = frontStencilFailOp;" )
cpp_quote( "        FrontFace.StencilDepthFailOp = frontStencilDepthFailOp;" )
cpp_quote( "        FrontFace.StencilPassOp = frontStencilPassOp;" )
cpp_quote( "        FrontFace.StencilFunc = frontStencilFunc;" )
cpp_quote( "        BackFace.StencilFailOp = backStencilFailOp;" )
cpp_quote( "        BackFace.StencilDepthFailOp = backStencilDepthFailOp;" )
cpp_quote( "        BackFace.StencilPassOp = backStencilPassOp;" )
cpp_quote( "        BackFace.StencilFunc = backStencilFunc;" )
cpp_quote( "    }" )
cpp_quote( "    ~CD3D12_DEPTH_STENCIL_DESC() {}" )
cpp_quote( "    operator const D3D12_DEPTH_STENCIL_DESC&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Blend State
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Keep BLEND values in sync with earlier DX versions (HW consumes values directly).
typedef enum D3D12_BLEND
{
    D3D12_BLEND_ZERO = 1,
    D3D12_BLEND_ONE = 2,
    D3D12_BLEND_SRC_COLOR = 3, // PS output oN.rgb (N is current RT being blended)
    D3D12_BLEND_INV_SRC_COLOR = 4, // 1.0f - PS output oN.rgb
    D3D12_BLEND_SRC_ALPHA = 5, // PS output oN.a
    D3D12_BLEND_INV_SRC_ALPHA = 6, // 1.0f - PS output oN.a
    D3D12_BLEND_DEST_ALPHA = 7, // RT(N).a (N is current RT being blended)
    D3D12_BLEND_INV_DEST_ALPHA = 8, // 1.0f - RT(N).a
    D3D12_BLEND_DEST_COLOR = 9, // RT(N).rgb
    D3D12_BLEND_INV_DEST_COLOR = 10,// 1.0f - RT(N).rgb
    D3D12_BLEND_SRC_ALPHA_SAT = 11,// (f,f,f,1), f = min(1 - RT(N).a, oN.a)
    // 12 reserved (was BOTHSRCALPHA)
    // 13 reserved (was BOTHSRCALPHA)
    D3D12_BLEND_BLEND_FACTOR = 14,
    D3D12_BLEND_INV_BLEND_FACTOR = 15,
    D3D12_BLEND_SRC1_COLOR = 16, // PS output o1.rgb
    D3D12_BLEND_INV_SRC1_COLOR = 17, // 1.0f - PS output o1.rgb
    D3D12_BLEND_SRC1_ALPHA = 18, // PS output o1.a
    D3D12_BLEND_INV_SRC1_ALPHA = 19, // 1.0f - PS output o1.a
} D3D12_BLEND;

// Keep BLENDOP values in sync with earlier DX versions (HW consumes values directly).
typedef enum D3D12_BLEND_OP
{
    D3D12_BLEND_OP_ADD = 1,
    D3D12_BLEND_OP_SUBTRACT = 2,
    D3D12_BLEND_OP_REV_SUBTRACT = 3,
    D3D12_BLEND_OP_MIN = 4, // min semantics are like min shader instruction
    D3D12_BLEND_OP_MAX = 5, // max semantics are like max shader instruction
} D3D12_BLEND_OP;

typedef enum D3D12_COLOR_WRITE_ENABLE
{
    D3D12_COLOR_WRITE_ENABLE_RED = 1,
    D3D12_COLOR_WRITE_ENABLE_GREEN = 2,
    D3D12_COLOR_WRITE_ENABLE_BLUE = 4,
    D3D12_COLOR_WRITE_ENABLE_ALPHA = 8,
    D3D12_COLOR_WRITE_ENABLE_ALL = (D3D12_COLOR_WRITE_ENABLE_RED|D3D12_COLOR_WRITE_ENABLE_GREEN|
        D3D12_COLOR_WRITE_ENABLE_BLUE|D3D12_COLOR_WRITE_ENABLE_ALPHA),
} D3D12_COLOR_WRITE_ENABLE;

typedef enum D3D12_LOGIC_OP
{
                                   // Operation: 
                                   // (s == PS output, d = RTV contents)
    D3D12_LOGIC_OP_CLEAR = 0,      // 0
    D3D12_LOGIC_OP_SET,            // 1
    D3D12_LOGIC_OP_COPY,           // s
    D3D12_LOGIC_OP_COPY_INVERTED,  // ~s
    D3D12_LOGIC_OP_NOOP,           // d
    D3D12_LOGIC_OP_INVERT,         // ~d
    D3D12_LOGIC_OP_AND,            // s & d
    D3D12_LOGIC_OP_NAND,           // ~(s & d)
    D3D12_LOGIC_OP_OR,             // s | d
    D3D12_LOGIC_OP_NOR,            // ~(s | d)
    D3D12_LOGIC_OP_XOR,            // s ^ d
    D3D12_LOGIC_OP_EQUIV,          // ~(s ^ d)
    D3D12_LOGIC_OP_AND_REVERSE,    // s & ~d
    D3D12_LOGIC_OP_AND_INVERTED,   // ~s & d
    D3D12_LOGIC_OP_OR_REVERSE,     // s | ~d
    D3D12_LOGIC_OP_OR_INVERTED,    // ~s | d
} D3D12_LOGIC_OP;

typedef struct D3D12_RENDER_TARGET_BLEND_DESC
{
    BOOL BlendEnable;
    BOOL LogicOpEnable; // LogicOpEnable and BlendEnable can't both be true
    D3D12_BLEND SrcBlend;
    D3D12_BLEND DestBlend;
    D3D12_BLEND_OP BlendOp;
    D3D12_BLEND SrcBlendAlpha;
    D3D12_BLEND DestBlendAlpha;
    D3D12_BLEND_OP BlendOpAlpha;
    D3D12_LOGIC_OP LogicOp; // applies to RGBA
    UINT8 RenderTargetWriteMask; // D3D12_COLOR_WRITE_ENABLE
} D3D12_RENDER_TARGET_BLEND_DESC;

typedef struct D3D12_BLEND_DESC
{
    BOOL AlphaToCoverageEnable; // relevant to multisample antialiasing only
    BOOL IndependentBlendEnable; // if FALSE, then replicate the first entry in RenderTarget array to other entries
    D3D12_RENDER_TARGET_BLEND_DESC RenderTarget[D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT];
} D3D12_BLEND_DESC;

cpp_quote( "/* Note, the array size for RenderTarget[] above is D3D11_SIMULTANEOUS_RENDERTARGET_COUNT. ")
cpp_quote( "   IDL processing/generation of this header replaces the define; this comment is merely explaining what happened. */" ) 

cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_BLEND_DESC : public D3D12_BLEND_DESC" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_BLEND_DESC()" )
cpp_quote( "    {}" )
cpp_quote( "    explicit CD3D12_BLEND_DESC( const D3D12_BLEND_DESC& o ) :" )
cpp_quote( "        D3D12_BLEND_DESC( o )" )
cpp_quote( "    {}" )
cpp_quote( "    explicit CD3D12_BLEND_DESC( CD3D12_DEFAULT )" )
cpp_quote( "    {" )
cpp_quote( "        AlphaToCoverageEnable = FALSE;" )
cpp_quote( "        IndependentBlendEnable = FALSE;" )
cpp_quote( "        const D3D12_RENDER_TARGET_BLEND_DESC defaultRenderTargetBlendDesc =" )
cpp_quote( "        {" )
cpp_quote( "            FALSE,FALSE," )
cpp_quote( "            D3D12_BLEND_ONE, D3D12_BLEND_ZERO, D3D12_BLEND_OP_ADD," )
cpp_quote( "            D3D12_BLEND_ONE, D3D12_BLEND_ZERO, D3D12_BLEND_OP_ADD," )
cpp_quote( "            D3D12_LOGIC_OP_NOOP," )
cpp_quote( "            D3D12_COLOR_WRITE_ENABLE_ALL," )
cpp_quote( "        };" )
cpp_quote( "        for (UINT i = 0; i < D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT; ++i)" )
cpp_quote( "            RenderTarget[ i ] = defaultRenderTargetBlendDesc;" )
cpp_quote( "    }" )
cpp_quote( "    ~CD3D12_BLEND_DESC() {}" )
cpp_quote( "    operator const D3D12_BLEND_DESC&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Rasterizer State
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef enum D3D12_CONSERVATIVE_RASTERIZATION_MODE
{
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF       = 0, // Default
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON        = 1,
} D3D12_CONSERVATIVE_RASTERIZATION_MODE;

typedef struct D3D12_RASTERIZER_DESC
{
    D3D12_FILL_MODE FillMode;
    D3D12_CULL_MODE CullMode;
    BOOL FrontCounterClockwise;
    INT DepthBias;
    FLOAT DepthBiasClamp;
    FLOAT SlopeScaledDepthBias;
    BOOL DepthClipEnable;
    BOOL MultisampleEnable;
    BOOL AntialiasedLineEnable;
    UINT ForcedSampleCount;  
    D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
} D3D12_RASTERIZER_DESC;

cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_RASTERIZER_DESC : public D3D12_RASTERIZER_DESC" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_RASTERIZER_DESC()" )
cpp_quote( "    {}" )
cpp_quote( "    explicit CD3D12_RASTERIZER_DESC( const D3D12_RASTERIZER_DESC& o ) :" )
cpp_quote( "        D3D12_RASTERIZER_DESC( o )" )
cpp_quote( "    {}" )
cpp_quote( "    explicit CD3D12_RASTERIZER_DESC( CD3D12_DEFAULT )" )
cpp_quote( "    {" )
cpp_quote( "        FillMode = D3D12_FILL_SOLID;" )
cpp_quote( "        CullMode = D3D12_CULL_BACK;" )
cpp_quote( "        FrontCounterClockwise = FALSE;" )
cpp_quote( "        DepthBias = D3D11_DEFAULT_DEPTH_BIAS;" )
cpp_quote( "        DepthBiasClamp = D3D11_DEFAULT_DEPTH_BIAS_CLAMP;" )
cpp_quote( "        SlopeScaledDepthBias = D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS;" )
cpp_quote( "        DepthClipEnable = TRUE;" )
cpp_quote( "        MultisampleEnable = FALSE;" )
cpp_quote( "        AntialiasedLineEnable = FALSE;" )
cpp_quote( "        ForcedSampleCount = 0;" )
cpp_quote( "        ConservativeRaster = D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_RASTERIZER_DESC(" )
cpp_quote( "        D3D12_FILL_MODE fillMode," )
cpp_quote( "        D3D12_CULL_MODE cullMode," )
cpp_quote( "        BOOL frontCounterClockwise," )
cpp_quote( "        INT depthBias," )
cpp_quote( "        FLOAT depthBiasClamp," )
cpp_quote( "        FLOAT slopeScaledDepthBias," )
cpp_quote( "        BOOL depthClipEnable," )
cpp_quote( "        BOOL multisampleEnable," )
cpp_quote( "        BOOL antialiasedLineEnable, " )
cpp_quote( "        UINT forcedSampleCount, " )
cpp_quote( "        D3D12_CONSERVATIVE_RASTERIZATION_MODE conservativeRaster)" )
cpp_quote( "    {" )
cpp_quote( "        FillMode = fillMode;" )
cpp_quote( "        CullMode = cullMode;" )
cpp_quote( "        FrontCounterClockwise = frontCounterClockwise;" )
cpp_quote( "        DepthBias = depthBias;" )
cpp_quote( "        DepthBiasClamp = depthBiasClamp;" )
cpp_quote( "        SlopeScaledDepthBias = slopeScaledDepthBias;" )
cpp_quote( "        DepthClipEnable = depthClipEnable;" )
cpp_quote( "        MultisampleEnable = multisampleEnable;" )
cpp_quote( "        AntialiasedLineEnable = antialiasedLineEnable;" )
cpp_quote( "        ForcedSampleCount = forcedSampleCount;" )
cpp_quote( "        ConservativeRaster = conservativeRaster;" )
cpp_quote( "    }" )
cpp_quote( "    ~CD3D12_RASTERIZER_DESC() {}" )
cpp_quote( "    operator const D3D12_RASTERIZER_DESC&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

[ uuid( c54a6b66-72df-4ee8-8be5-a946a1429214 ), object, local, pointer_default( unique ) ]
interface ID3D12RootSignature
    : ID3D12DeviceChild
{
}

typedef struct D3D12_SHADER_BYTECODE
{
    [annotation("__ecount(BytecodeLength)")] const BYTE* pShaderBytecode;
    SIZE_T BytecodeLength;
} D3D12_SHADER_BYTECODE;

typedef struct D3D12_STREAM_OUTPUT_DESC
{
    [annotation("__ecount(NumEntries)")] const D3D12_SO_DECLARATION_ENTRY* pSODeclaration;
    UINT NumEntries;
    [annotation("__ecount(NumStrides)")] const UINT* pBufferStrides;
    UINT NumStrides;
    UINT RasterizedStream;
} D3D12_STREAM_OUTPUT_DESC;

typedef struct D3D12_INPUT_LAYOUT_DESC
{
    [annotation("__ecount(NumElements)")] const D3D12_INPUT_ELEMENT_DESC* pInputElementDescs;
    UINT NumElements;
} D3D12_INPUT_LAYOUT_DESC;

typedef struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
{
    ID3D12RootSignature           *pRootSignature;
    D3D12_SHADER_BYTECODE         VS;
    D3D12_SHADER_BYTECODE         PS;
    D3D12_SHADER_BYTECODE         DS;
    D3D12_SHADER_BYTECODE         HS;
    D3D12_SHADER_BYTECODE         GS;
    D3D12_STREAM_OUTPUT_DESC      StreamOutput;
    D3D12_BLEND_DESC              BlendState;
    UINT                          SampleMask;
    D3D12_RASTERIZER_DESC         RasterizerState;
    D3D12_DEPTH_STENCIL_DESC      DepthStencilState;
    D3D12_INPUT_LAYOUT_DESC       InputLayout;
    D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;
    UINT                          NumRenderTargets;
    DXGI_FORMAT                   RTVFormats[ D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT ];
    DXGI_FORMAT                   DSVFormat;
    DXGI_SAMPLE_DESC              SampleDesc;
} D3D12_GRAPHICS_PIPELINE_STATE_DESC;

typedef struct D3D12_COMPUTE_PIPELINE_STATE_DESC
{
    ID3D12RootSignature    *pRootSignature;
    D3D12_SHADER_BYTECODE  CS;
} D3D12_COMPUTE_PIPELINE_STATE_DESC;

// D3D12 Caps
typedef enum D3D12_FEATURE
{
    D3D12_FEATURE_D3D12_OPTIONS,
    D3D12_FEATURE_ARCHITECTURE,
    D3D12_FEATURE_FEATURE_LEVELS,
    D3D12_FEATURE_FORMAT_SUPPORT,
    D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS,
} D3D12_FEATURE;

typedef enum D3D12_SHADER_MIN_PRECISION_SUPPORT
{
    D3D12_SHADER_MIN_PRECISION_NONE   = 0x0,
    D3D12_SHADER_MIN_PRECISION_10_BIT = 0x1,
    D3D12_SHADER_MIN_PRECISION_16_BIT = 0x2
} D3D12_SHADER_MIN_PRECISION_SUPPORT;
cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_SHADER_MIN_PRECISION_SUPPORT );" )

typedef enum D3D12_TILED_RESOURCES_TIER
{
    D3D12_TILED_RESOURCES_NOT_SUPPORTED = 0,
    D3D12_TILED_RESOURCES_TIER_1        = 1,
    D3D12_TILED_RESOURCES_TIER_2        = 2,
} D3D12_TILED_RESOURCES_TIER;

typedef enum D3D12_RESOURCE_BINDING_TIER
{
    D3D12_RESOURCE_BINDING_TIER_1 = 1,
    D3D12_RESOURCE_BINDING_TIER_2 = 2,
    D3D12_RESOURCE_BINDING_TIER_3 = 3,
} D3D12_RESOURCE_BINDING_TIER;

typedef enum D3D12_CONSERVATIVE_RASTERIZATION_TIER { 
  D3D12_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED  = 0,
  D3D12_CONSERVATIVE_RASTERIZATION_TIER_1         = 1,
  D3D12_CONSERVATIVE_RASTERIZATION_TIER_2         = 2,
  D3D12_CONSERVATIVE_RASTERIZATION_TIER_3         = 3,
} D3D12_CONSERVATIVE_RASTERIZATION_TIER;

typedef enum D3D12_FORMAT_SUPPORT1
{
    D3D12_FORMAT_SUPPORT1_NONE                       = 0,
    D3D12_FORMAT_SUPPORT1_BUFFER                      = 0x00000001,
    D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER            = 0x00000002,
    D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER             = 0x00000004,
    D3D12_FORMAT_SUPPORT1_SO_BUFFER                   = 0x00000008,
    D3D12_FORMAT_SUPPORT1_TEXTURE1D                   = 0x00000010,
    D3D12_FORMAT_SUPPORT1_TEXTURE2D                   = 0x00000020,
    D3D12_FORMAT_SUPPORT1_TEXTURE3D                   = 0x00000040,
    D3D12_FORMAT_SUPPORT1_TEXTURECUBE                 = 0x00000080,
    D3D12_FORMAT_SUPPORT1_SHADER_LOAD                 = 0x00000100,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE               = 0x00000200,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON    = 0x00000400,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT     = 0x00000800,
    D3D12_FORMAT_SUPPORT1_MIP                         = 0x00001000,
    D3D12_FORMAT_SUPPORT1_RENDER_TARGET               = 0x00004000,
    D3D12_FORMAT_SUPPORT1_BLENDABLE                   = 0x00008000,
    D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL               = 0x00010000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE         = 0x00040000,
    D3D12_FORMAT_SUPPORT1_DISPLAY                     = 0x00080000,
    D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT      = 0x00100000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET    = 0x00200000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD            = 0x00400000,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER               = 0x00800000,
    D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST            = 0x01000000,
    D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 0x02000000,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON    = 0x04000000,
    D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT              = 0x08000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT      = 0x10000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT       = 0x20000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER               = 0x40000000,
} D3D12_FORMAT_SUPPORT1;
cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_FORMAT_SUPPORT1 );" )

typedef enum D3D12_FORMAT_SUPPORT2
{
    D3D12_FORMAT_SUPPORT2_NONE                                              = 0,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD                                    = 0x00000001,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS                            = 0x00000002,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE      = 0x00000004,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE                               = 0x00000008,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX                      = 0x00000010,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX                    = 0x00000020,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD                                    = 0x00000040,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE                                   = 0x00000080,
    D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP                            = 0x00000100,
    D3D12_FORMAT_SUPPORT2_TILED                                             = 0x00000200,
    D3D12_FORMAT_SUPPORT2_SHAREABLE                                         = 0x00000400,
} D3D12_FORMAT_SUPPORT2;
cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_FORMAT_SUPPORT2 );" )

typedef enum D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG
{
    D3D12_MULTISAMPLE_QUALITY_LEVELS_NONE           = 0,
    D3D12_MULTISAMPLE_QUALITY_LEVELS_TILED_RESOURCE = 0x00000001,
} D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG;
cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG );" )

// D3D12_FEATURE_D3D12_OPTIONS
typedef struct D3D12_FEATURE_DATA_D3D12_OPTIONS
{
    [annotation("_Out_")] BOOL DoublePrecisionFloatShaderOps;
    [annotation("_Out_")] BOOL OutputMergerLogicOp;
    [annotation("_Out_")] D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;
    [annotation("_Out_")] D3D12_TILED_RESOURCES_TIER TiledResourcesTier;
    [annotation("_Out_")] D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;
    [annotation("_Out_")] BOOL PSSpecifiedStencilRefSupported;
    [annotation("_Out_")] BOOL TypedUAVLoadAdditionalFormats;
    [annotation("_Out_")] BOOL ROVsSupported;
    [annotation("_Out_")] D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
    [annotation("_Out_")] UINT MaxGPUVirtualAddressBitsPerResource;
    // Add other D3D12 capability values as needed
} D3D12_FEATURE_DATA_D3D12_OPTIONS;

// D3D12_FEATURE_ARCHITECTURE
typedef struct D3D12_FEATURE_DATA_ARCHITECTURE
{
    [annotation("_Out_")] BOOL TileBasedRenderer;
    [annotation("_Out_")] BOOL UMA; // Needed for applications to understand WRITE_COMBINE
    [annotation("_Out_")] BOOL CacheCoherentUMA; // Only TRUE when UMA is also TRUE
} D3D12_FEATURE_DATA_ARCHITECTURE;

// D3D12_FEATURE_FEATURE_LEVELS
typedef struct D3D12_FEATURE_DATA_FEATURE_LEVELS
{
    [annotation("_In_")] UINT NumFeatureLevels;
    [annotation("_In_reads_(NumFeatureLevels)")] const D3D_FEATURE_LEVEL* pFeatureLevelsRequested;
    [annotation("_Out_")] D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
} D3D12_FEATURE_DATA_FEATURE_LEVELS;

// D3D12_FEATURE_FORMAT_SUPPORT
typedef struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
{
    [annotation("_In_")] DXGI_FORMAT Format;
    [annotation("_Out_")] D3D12_FORMAT_SUPPORT1 Support1;
    [annotation("_Out_")] D3D12_FORMAT_SUPPORT2 Support2;
} D3D12_FEATURE_DATA_FORMAT_SUPPORT;

// D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS
typedef struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
{
    [annotation("_In_")] DXGI_FORMAT Format;
    [annotation("_In_")] UINT SampleCount;
    [annotation("_In_")] D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG Flags;
    [annotation("_Out_")] UINT NumQualityLevels;
} D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS;

typedef struct D3D12_RESOURCE_ALLOCATION_INFO
{
    UINT64 Size;
    UINT64 Alignment;
} D3D12_RESOURCE_ALLOCATION_INFO;
cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_RESOURCE_ALLOCATION_INFO : public D3D12_RESOURCE_ALLOCATION_INFO" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_RESOURCE_ALLOCATION_INFO()" )
cpp_quote( "    {}" )
cpp_quote( "    CD3D12_RESOURCE_ALLOCATION_INFO( " )
cpp_quote( "        UINT64 size, " )
cpp_quote( "        UINT64 alignment )" )
cpp_quote( "    {" )
cpp_quote( "        Size = size;" )
cpp_quote( "        Alignment = alignment;" )
cpp_quote( "    }" )
cpp_quote( "    operator const D3D12_RESOURCE_ALLOCATION_INFO&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef enum D3D12_HEAP_TYPE
{
    D3D12_HEAP_TYPE_DEFAULT   = 1, 
    D3D12_HEAP_TYPE_UPLOAD    = 2,
    D3D12_HEAP_TYPE_READBACK  = 3,
    D3D12_HEAP_TYPE_CUSTOM    = 4,
} D3D12_HEAP_TYPE;

typedef enum D3D12_CPU_PAGE_PROPERTIES
{
    D3D12_CPU_PAGE_UNKNOWN = 0,
    D3D12_CPU_PAGE_NOT_AVAILABLE = 1,
    D3D12_CPU_PAGE_WRITE_COMBINE = 2,
    D3D12_CPU_PAGE_WRITE_BACK = 3,
} D3D12_CPU_PAGE_PROPERTIES;

typedef enum D3D12_MEMORY_POOL
{
    D3D12_MEMORY_POOL_UNKNOWN = 0,
    D3D12_MEMORY_POOL_L0 = 1, // Maximum bandwidth for CPU
    D3D12_MEMORY_POOL_L1 = 2, // More bandwidth for GPU, less for CPU
} D3D12_MEMORY_POOL;

typedef struct D3D12_HEAP_PROPERTIES
{
    D3D12_HEAP_TYPE Type;
    D3D12_CPU_PAGE_PROPERTIES CPUPageProperties;
    D3D12_MEMORY_POOL MemoryPoolPreference;
} D3D12_HEAP_PROPERTIES;
cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_HEAP_PROPERTIES : public D3D12_HEAP_PROPERTIES" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_HEAP_PROPERTIES()" )
cpp_quote( "    {}" )
cpp_quote( "    CD3D12_HEAP_PROPERTIES( " )
cpp_quote( "        D3D12_CPU_PAGE_PROPERTIES cpuPageProperties, " )
cpp_quote( "        D3D12_MEMORY_POOL memoryPoolPreference )" )
cpp_quote( "    {" )
cpp_quote( "        Type = D3D12_HEAP_TYPE_CUSTOM;" )
cpp_quote( "        CPUPageProperties = cpuPageProperties;" )
cpp_quote( "        MemoryPoolPreference = memoryPoolPreference;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_PROPERTIES( D3D12_HEAP_TYPE type )" )
cpp_quote( "    {" )
cpp_quote( "        Type = type;" )
cpp_quote( "        CPUPageProperties = D3D12_CPU_PAGE_UNKNOWN;" )
cpp_quote( "        MemoryPoolPreference = D3D12_MEMORY_POOL_UNKNOWN;" )
cpp_quote( "    }" )
cpp_quote( "#if defined(__d3d11_h__) || defined(__d3d11p_h__)" )
cpp_quote( "    static D3D12_HEAP_TYPE ConvertD3D11Usage( D3D11_USAGE Usage, UINT CPUAccessFlags )" )
cpp_quote( "    {" )
cpp_quote( "        switch (Usage)" )
cpp_quote( "        {" )
cpp_quote( "        case D3D11_USAGE_DEFAULT:" )
cpp_quote( "            return (CPUAccessFlags ? D3D12_HEAP_TYPE_CUSTOM : D3D12_HEAP_TYPE_DEFAULT);" )
cpp_quote( "        case D3D11_USAGE_IMMUTABLE:" )
cpp_quote( "            return (CPUAccessFlags ? D3D12_HEAP_TYPE( 0 ) : D3D12_HEAP_TYPE_DEFAULT);" )
cpp_quote( "        case D3D11_USAGE_DYNAMIC:" )
cpp_quote( "            return (CPUAccessFlags == D3D11_CPU_ACCESS_WRITE ? D3D12_HEAP_TYPE_UPLOAD : D3D12_HEAP_TYPE( 0 ));" )
cpp_quote( "        case D3D11_USAGE_STAGING:" )
cpp_quote( "            return (CPUAccessFlags == D3D11_CPU_ACCESS_WRITE ? D3D12_HEAP_TYPE_UPLOAD :" )
cpp_quote( "                (CPUAccessFlags ? D3D12_HEAP_TYPE_READBACK : D3D12_HEAP_TYPE( 0 )));" )
cpp_quote( "        default: return D3D12_HEAP_TYPE( 0 );" )
cpp_quote( "        }" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_PROPERTIES( const D3D11_BUFFER_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *this = CD3D12_HEAP_PROPERTIES( ConvertD3D11Usage( o.Usage, o.CPUAccessFlags ) );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_PROPERTIES( const D3D11_TEXTURE1D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *this = CD3D12_HEAP_PROPERTIES( ConvertD3D11Usage( o.Usage, o.CPUAccessFlags ) );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_PROPERTIES( const D3D11_TEXTURE2D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *this = CD3D12_HEAP_PROPERTIES( ConvertD3D11Usage( o.Usage, o.CPUAccessFlags ) );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_PROPERTIES( const D3D11_TEXTURE3D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *this = CD3D12_HEAP_PROPERTIES( ConvertD3D11Usage( o.Usage, o.CPUAccessFlags ) );" )
cpp_quote( "    }" )
cpp_quote( "#endif" )
cpp_quote( "    operator const D3D12_HEAP_PROPERTIES&() const { return *this; }" )
cpp_quote( "    bool IsCPUAccessible() const" )
cpp_quote( "    {" )
cpp_quote( "        return Type == D3D12_HEAP_TYPE_UPLOAD || Type == D3D12_HEAP_TYPE_READBACK || (Type == D3D12_HEAP_TYPE_CUSTOM &&" )
cpp_quote( "            (CPUPageProperties == D3D12_CPU_PAGE_WRITE_COMBINE || CPUPageProperties == D3D12_CPU_PAGE_WRITE_BACK));" )
cpp_quote( "    }" )
cpp_quote( "};" )
cpp_quote( "inline bool operator==( const D3D12_HEAP_PROPERTIES& l, const D3D12_HEAP_PROPERTIES& r )" )
cpp_quote( "{" )
cpp_quote( "    return l.Type == r.Type && l.CPUPageProperties == r.CPUPageProperties && " )
cpp_quote( "        l.MemoryPoolPreference == r.MemoryPoolPreference;" )
cpp_quote( "}" )
cpp_quote( "inline bool operator!=( const D3D12_HEAP_PROPERTIES& l, const D3D12_HEAP_PROPERTIES& r )" )
cpp_quote( "{ return !( l == r ); }" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef enum D3D12_HEAP_MISC_FLAG
{
    D3D12_HEAP_MISC_NONE = 0x0,
    D3D12_HEAP_MISC_SHARED = 0x1,
    D3D12_HEAP_MISC_NO_TEXTURES = 0x2,
    D3D12_HEAP_MISC_NO_BUFFERS = 0x4,
} D3D12_HEAP_MISC_FLAG;
cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_HEAP_MISC_FLAG );" )

typedef struct D3D12_HEAP_DESC 
{
    UINT64 Size;
    D3D12_HEAP_PROPERTIES Properties;
    UINT64 Alignment;
    D3D12_HEAP_MISC_FLAG MiscFlags;
} D3D12_HEAP_DESC;
cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_HEAP_DESC : public D3D12_HEAP_DESC" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_HEAP_DESC()" )
cpp_quote( "    {}" )
cpp_quote( "    CD3D12_HEAP_DESC( " )
cpp_quote( "        UINT64 size, " )
cpp_quote( "        D3D12_HEAP_PROPERTIES properties, " )
cpp_quote( "        UINT64 alignment = 0, " )
cpp_quote( "        D3D12_HEAP_MISC_FLAG miscFlags = D3D12_HEAP_MISC_NONE )" )
cpp_quote( "    {" )
cpp_quote( "        Size = size;" )
cpp_quote( "        Properties = properties;" )
cpp_quote( "        Alignment = alignment;" )
cpp_quote( "        MiscFlags = miscFlags;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D12_HEAP_DESC( " )
cpp_quote( "        UINT64 size, " )
cpp_quote( "        D3D12_HEAP_TYPE type, " )
cpp_quote( "        UINT64 alignment = 0, " )
cpp_quote( "        D3D12_HEAP_MISC_FLAG miscFlags = D3D12_HEAP_MISC_NONE )" )
cpp_quote( "    {" )
cpp_quote( "        Size = size;" )
cpp_quote( "        Properties = CD3D12_HEAP_PROPERTIES( type );" )
cpp_quote( "        Alignment = alignment;" )
cpp_quote( "        MiscFlags = miscFlags;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D12_HEAP_DESC( " )
cpp_quote( "        UINT64 size, " )
cpp_quote( "        D3D12_CPU_PAGE_PROPERTIES cpuPageProperties, " )
cpp_quote( "        D3D12_MEMORY_POOL memoryPoolPreference, " )
cpp_quote( "        UINT64 alignment = 0, " )
cpp_quote( "        D3D12_HEAP_MISC_FLAG miscFlags = D3D12_HEAP_MISC_NONE )" )
cpp_quote( "    {" )
cpp_quote( "        Size = size;" )
cpp_quote( "        Properties = CD3D12_HEAP_PROPERTIES( cpuPageProperties, memoryPoolPreference );" )
cpp_quote( "        Alignment = alignment;" )
cpp_quote( "        MiscFlags = miscFlags;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D12_HEAP_DESC( " )
cpp_quote( "        const D3D12_RESOURCE_ALLOCATION_INFO& resAllocInfo," )
cpp_quote( "        D3D12_HEAP_PROPERTIES properties, " )
cpp_quote( "        D3D12_HEAP_MISC_FLAG miscFlags = D3D12_HEAP_MISC_NONE )" )
cpp_quote( "    {" )
cpp_quote( "        Size = resAllocInfo.Size;" )
cpp_quote( "        Properties = properties;" )
cpp_quote( "        Alignment = resAllocInfo.Alignment;" )
cpp_quote( "        MiscFlags = miscFlags;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D12_HEAP_DESC( " )
cpp_quote( "        const D3D12_RESOURCE_ALLOCATION_INFO& resAllocInfo," )
cpp_quote( "        D3D12_HEAP_TYPE type, " )
cpp_quote( "        D3D12_HEAP_MISC_FLAG miscFlags = D3D12_HEAP_MISC_NONE )" )
cpp_quote( "    {" )
cpp_quote( "        Size = resAllocInfo.Size;" )
cpp_quote( "        Properties = CD3D12_HEAP_PROPERTIES( type );" )
cpp_quote( "        Alignment = resAllocInfo.Alignment;" )
cpp_quote( "        MiscFlags = miscFlags;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D12_HEAP_DESC( " )
cpp_quote( "        const D3D12_RESOURCE_ALLOCATION_INFO& resAllocInfo," )
cpp_quote( "        D3D12_CPU_PAGE_PROPERTIES cpuPageProperties, " )
cpp_quote( "        D3D12_MEMORY_POOL memoryPoolPreference, " )
cpp_quote( "        D3D12_HEAP_MISC_FLAG miscFlags = D3D12_HEAP_MISC_NONE )" )
cpp_quote( "    {" )
cpp_quote( "        Size = resAllocInfo.Size;" )
cpp_quote( "        Properties = CD3D12_HEAP_PROPERTIES( cpuPageProperties, memoryPoolPreference );" )
cpp_quote( "        Alignment = resAllocInfo.Alignment;" )
cpp_quote( "        MiscFlags = miscFlags;" )
cpp_quote( "    }" )
cpp_quote( "#if defined(__d3d11_h__) || defined(__d3d11p_h__)" )
cpp_quote( "    static D3D12_HEAP_MISC_FLAG ConvertD3D11MiscFlags( UINT miscFlags )" )
cpp_quote( "    {" )
cpp_quote( "        D3D12_HEAP_MISC_FLAG MiscFlags = D3D12_HEAP_MISC_NONE;" )
cpp_quote( "        if ((miscFlags & (D3D11_RESOURCE_MISC_SHARED_NTHANDLE | D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX)) == " )
cpp_quote( "            D3D11_RESOURCE_MISC_SHARED_NTHANDLE)" )
cpp_quote( "        {" )
cpp_quote( "            MiscFlags |= D3D12_HEAP_MISC_SHARED;" )
cpp_quote( "        }" )
cpp_quote( "        return MiscFlags;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_DESC( const D3D11_BUFFER_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *this = CD3D12_HEAP_DESC( 0, CD3D12_HEAP_PROPERTIES( o ), 0, ConvertD3D11MiscFlags( o.MiscFlags ) );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_DESC( const D3D11_TEXTURE1D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *this = CD3D12_HEAP_DESC( 0, CD3D12_HEAP_PROPERTIES( o ), 0, ConvertD3D11MiscFlags( o.MiscFlags ) );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_DESC( const D3D11_TEXTURE2D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *this = CD3D12_HEAP_DESC( 0, CD3D12_HEAP_PROPERTIES( o ), 0, ConvertD3D11MiscFlags( o.MiscFlags ) );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_DESC( const D3D11_TEXTURE3D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *this = CD3D12_HEAP_DESC( 0, CD3D12_HEAP_PROPERTIES( o ), 0, ConvertD3D11MiscFlags( o.MiscFlags ) );" )
cpp_quote( "    }" )
cpp_quote( "#endif" )
cpp_quote( "    operator const D3D12_HEAP_DESC&() const { return *this; }" )
cpp_quote( "    bool IsCPUAccessible() const" )
cpp_quote( "    { return static_cast< const CD3D12_HEAP_PROPERTIES* >( &Properties )->IsCPUAccessible(); }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef enum D3D12_RESOURCE_DIMENSION
{
    D3D12_RESOURCE_DIMENSION_UNKNOWN = 0,
    D3D12_RESOURCE_DIMENSION_BUFFER = 1,
    D3D12_RESOURCE_DIMENSION_TEXTURE_1D = 2,
    D3D12_RESOURCE_DIMENSION_TEXTURE_2D = 3,
    D3D12_RESOURCE_DIMENSION_TEXTURE_3D = 4,
} D3D12_RESOURCE_DIMENSION;

typedef enum D3D12_TEXTURE_LAYOUT
{
    D3D12_TEXTURE_LAYOUT_UNKNOWN = 0,
    D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1, // Must be used with buffers.
    D3D12_TEXTURE_LAYOUT_64KB_TILE_UNDEFINED_SWIZZLE = 2,
} D3D12_TEXTURE_LAYOUT; 

typedef enum D3D12_RESOURCE_MISC_FLAG
{
    D3D12_RESOURCE_MISC_NONE = 0x0,
    D3D12_RESOURCE_MISC_RENDER_TARGET = 0x1,
    D3D12_RESOURCE_MISC_DEPTH_STENCIL = 0x2,
    D3D12_RESOURCE_MISC_NO_SHADER_RESOURCE = 0x4,
    D3D12_RESOURCE_MISC_NO_UNORDERED_ACCESS = 0x8,
    D3D12_RESOURCE_MISC_NO_STREAM_OUTPUT = 0x10,
    D3D12_RESOURCE_MISC_NO_TILE_MAPPING = 0x20,
} D3D12_RESOURCE_MISC_FLAG;
cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_RESOURCE_MISC_FLAG );" )

typedef struct D3D12_RESOURCE_DESC
{
    D3D12_RESOURCE_DIMENSION Dimension;
    UINT64 Alignment;
    UINT64 Width;
    UINT Height;
    UINT16 DepthOrArraySize;
    UINT16 MipLevels;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D12_TEXTURE_LAYOUT Layout;
    D3D12_RESOURCE_MISC_FLAG MiscFlags;
} D3D12_RESOURCE_DESC;
cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "inline bool D3D12IsLayoutOpaque( D3D12_TEXTURE_LAYOUT Layout )" )
cpp_quote( "{ return Layout == D3D12_TEXTURE_LAYOUT_UNKNOWN || Layout == D3D12_TEXTURE_LAYOUT_64KB_TILE_UNDEFINED_SWIZZLE; }" )
cpp_quote( "struct CD3D12_RESOURCE_DESC : public D3D12_RESOURCE_DESC" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_RESOURCE_DESC()" )
cpp_quote( "    {}" )
cpp_quote( "    explicit CD3D12_RESOURCE_DESC( const D3D12_RESOURCE_DESC& o ) :" )
cpp_quote( "        D3D12_RESOURCE_DESC( o )" )
cpp_quote( "    {}" )
cpp_quote( "    CD3D12_RESOURCE_DESC( " )
cpp_quote( "        D3D12_RESOURCE_DIMENSION dimension," )
cpp_quote( "        UINT64 alignment," )
cpp_quote( "        UINT64 width," )
cpp_quote( "        UINT height," )
cpp_quote( "        UINT16 depthOrArraySize," )
cpp_quote( "        UINT16 mipLevels," )
cpp_quote( "        DXGI_FORMAT format," )
cpp_quote( "        UINT sampleCount," )
cpp_quote( "        UINT sampleQuality," )
cpp_quote( "        D3D12_TEXTURE_LAYOUT layout," )
cpp_quote( "        D3D12_RESOURCE_MISC_FLAG miscFlags )" )
cpp_quote( "    {" )
cpp_quote( "        Dimension = dimension;" )
cpp_quote( "        Alignment = alignment;" )
cpp_quote( "        Width = width;" )
cpp_quote( "        Height = height;" )
cpp_quote( "        DepthOrArraySize = depthOrArraySize;" )
cpp_quote( "        MipLevels = mipLevels;" )
cpp_quote( "        Format = format;" )
cpp_quote( "        SampleDesc.Count = sampleCount;" )
cpp_quote( "        SampleDesc.Quality = sampleQuality;" )
cpp_quote( "        Layout = layout;" )
cpp_quote( "        MiscFlags = miscFlags;" )
cpp_quote( "    }" )
cpp_quote( "    static CD3D12_RESOURCE_DESC Buffer( " )
cpp_quote( "        const D3D12_RESOURCE_ALLOCATION_INFO& resAllocInfo," )
cpp_quote( "        D3D12_RESOURCE_MISC_FLAG miscFlags = D3D12_RESOURCE_MISC_NONE )" )
cpp_quote( "    {" )
cpp_quote( "        return CD3D12_RESOURCE_DESC( D3D12_RESOURCE_DIMENSION_BUFFER, resAllocInfo.Alignment, resAllocInfo.Size, " )
cpp_quote( "            1, 1, 1, DXGI_FORMAT_UNKNOWN, 1, 0, D3D12_TEXTURE_LAYOUT_ROW_MAJOR, miscFlags );" )
cpp_quote( "    }" )
cpp_quote( "    static CD3D12_RESOURCE_DESC Buffer( " )
cpp_quote( "        UINT64 width," )
cpp_quote( "        D3D12_RESOURCE_MISC_FLAG miscFlags = D3D12_RESOURCE_MISC_NONE," )
cpp_quote( "        UINT64 alignment = 0 )" )
cpp_quote( "    {" )
cpp_quote( "        return CD3D12_RESOURCE_DESC( D3D12_RESOURCE_DIMENSION_BUFFER, alignment, width, 1, 1, 1, " )
cpp_quote( "            DXGI_FORMAT_UNKNOWN, 1, 0, D3D12_TEXTURE_LAYOUT_ROW_MAJOR, miscFlags );" )
cpp_quote( "    }" )
cpp_quote( "    static CD3D12_RESOURCE_DESC Tex1D( " )
cpp_quote( "        DXGI_FORMAT format," )
cpp_quote( "        UINT64 width," )
cpp_quote( "        UINT16 arraySize = 1," )
cpp_quote( "        UINT16 mipLevels = 0," )
cpp_quote( "        D3D12_RESOURCE_MISC_FLAG miscFlags = D3D12_RESOURCE_MISC_NO_STREAM_OUTPUT," )
cpp_quote( "        D3D12_TEXTURE_LAYOUT layout = D3D12_TEXTURE_LAYOUT_UNKNOWN," )
cpp_quote( "        UINT64 alignment = 0 )" )
cpp_quote( "    {" )
cpp_quote( "        return CD3D12_RESOURCE_DESC( D3D12_RESOURCE_DIMENSION_TEXTURE_1D, alignment, width, 1, arraySize, " )
cpp_quote( "            mipLevels, format, 1, 0, layout, miscFlags );" )
cpp_quote( "    }" )
cpp_quote( "    static CD3D12_RESOURCE_DESC Tex2D( " )
cpp_quote( "        DXGI_FORMAT format," )
cpp_quote( "        UINT64 width," )
cpp_quote( "        UINT height," )
cpp_quote( "        UINT16 arraySize = 1," )
cpp_quote( "        UINT16 mipLevels = 0," )
cpp_quote( "        UINT sampleCount = 1," )
cpp_quote( "        UINT sampleQuality = 0," )
cpp_quote( "        D3D12_RESOURCE_MISC_FLAG miscFlags = D3D12_RESOURCE_MISC_NO_STREAM_OUTPUT," )
cpp_quote( "        D3D12_TEXTURE_LAYOUT layout = D3D12_TEXTURE_LAYOUT_UNKNOWN," )
cpp_quote( "        UINT64 alignment = 0 )" )
cpp_quote( "    {" )
cpp_quote( "        return CD3D12_RESOURCE_DESC( D3D12_RESOURCE_DIMENSION_TEXTURE_2D, alignment, width, height, arraySize, " )
cpp_quote( "            mipLevels, format, sampleCount, sampleQuality, layout, miscFlags );" )
cpp_quote( "    }" )
cpp_quote( "    static CD3D12_RESOURCE_DESC Tex3D( " )
cpp_quote( "        DXGI_FORMAT format," )
cpp_quote( "        UINT64 width," )
cpp_quote( "        UINT height," )
cpp_quote( "        UINT16 depth," )
cpp_quote( "        UINT16 mipLevels = 0," )
cpp_quote( "        D3D12_RESOURCE_MISC_FLAG miscFlags = D3D12_RESOURCE_MISC_NO_STREAM_OUTPUT," )
cpp_quote( "        D3D12_TEXTURE_LAYOUT layout = D3D12_TEXTURE_LAYOUT_UNKNOWN," )
cpp_quote( "        UINT64 alignment = 0 )" )
cpp_quote( "    {" )
cpp_quote( "        return CD3D12_RESOURCE_DESC( D3D12_RESOURCE_DIMENSION_TEXTURE_3D, alignment, width, height, depth, " )
cpp_quote( "            mipLevels, format, 1, 0, layout, miscFlags );" )
cpp_quote( "    }" )
cpp_quote( "    UINT16 Depth() const" )
cpp_quote( "    { return (Dimension == D3D12_RESOURCE_DIMENSION_TEXTURE_3D ? DepthOrArraySize : 1); }" )
cpp_quote( "    UINT16 ArraySize() const" )
cpp_quote( "    { return (Dimension != D3D12_RESOURCE_DIMENSION_TEXTURE_3D ? DepthOrArraySize : 1); }" )
cpp_quote( "    UINT Subresources() const" )
cpp_quote( "    { return MipLevels * ArraySize(); }" )
cpp_quote( "#if defined(__d3d11_h__) || defined(__d3d11p_h__)" )
cpp_quote( "    void ConvertD3D11Flags( UINT bindFlags )" )
cpp_quote( "    {" )
cpp_quote( "        if (!(bindFlags & D3D11_BIND_SHADER_RESOURCE)) MiscFlags |= D3D12_RESOURCE_MISC_NO_SHADER_RESOURCE;" )
cpp_quote( "        if (!(bindFlags & D3D11_BIND_STREAM_OUTPUT)) MiscFlags |= D3D12_RESOURCE_MISC_NO_STREAM_OUTPUT;" )
cpp_quote( "        if (bindFlags & D3D11_BIND_RENDER_TARGET) MiscFlags |= D3D12_RESOURCE_MISC_RENDER_TARGET;" )
cpp_quote( "        if (bindFlags & D3D11_BIND_DEPTH_STENCIL) MiscFlags |= D3D12_RESOURCE_MISC_DEPTH_STENCIL;" )
cpp_quote( "        if (!(bindFlags & D3D11_BIND_UNORDERED_ACCESS)) MiscFlags |= D3D12_RESOURCE_MISC_NO_UNORDERED_ACCESS;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_RESOURCE_DESC( const D3D11_BUFFER_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *this = Buffer( o.ByteWidth, D3D12_RESOURCE_MISC_NONE );" )
cpp_quote( "        ConvertD3D11Flags( o.BindFlags );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_RESOURCE_DESC( const D3D11_TEXTURE1D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *this = Tex1D( o.Format, o.Width, UINT16( o.ArraySize ), UINT16( o.MipLevels ) );" )
cpp_quote( "        ConvertD3D11Flags( o.BindFlags );" )
cpp_quote( "        if (o.MiscFlags & D3D11_RESOURCE_MISC_TILED) Layout = D3D12_TEXTURE_LAYOUT_64KB_TILE_UNDEFINED_SWIZZLE;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_RESOURCE_DESC( const D3D11_TEXTURE2D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *this = Tex2D( o.Format, o.Width, o.Height, UINT16( o.ArraySize ), UINT16( o.MipLevels ), " )
cpp_quote( "            o.SampleDesc.Count, o.SampleDesc.Quality );" )
cpp_quote( "        ConvertD3D11Flags( o.BindFlags );" )
cpp_quote( "        if (o.MiscFlags & D3D11_RESOURCE_MISC_TILED) Layout = D3D12_TEXTURE_LAYOUT_64KB_TILE_UNDEFINED_SWIZZLE;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_RESOURCE_DESC( const D3D11_TEXTURE3D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *this = Tex3D( o.Format, o.Width, o.Height, UINT16( o.Depth ), UINT16( o.MipLevels ) );" )
cpp_quote( "        ConvertD3D11Flags( o.BindFlags );" )
cpp_quote( "        if (o.MiscFlags & D3D11_RESOURCE_MISC_TILED) Layout = D3D12_TEXTURE_LAYOUT_64KB_TILE_UNDEFINED_SWIZZLE;" )
cpp_quote( "    }" )
cpp_quote( "#endif" )
cpp_quote( "    operator const D3D12_RESOURCE_DESC&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

// D3D11_RESOURCE_DESC is an interim solution before Default & Static Heaps come along:
typedef struct D3D11_RESOURCE_DESC
{
    D3D11_RESOURCE_DIMENSION Dimension;
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;    
    UINT MiscFlags;
    UINT StructureByteStride; // Stride of Structured Buffer; ignored if STRUCTURED MiscFlag not set
} D3D11_RESOURCE_DESC;

cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D11_RESOURCE_DESC : public D3D11_RESOURCE_DESC" )
cpp_quote( "{" )
cpp_quote( "    CD3D11_RESOURCE_DESC()" )
cpp_quote( "    {}" )
cpp_quote( "    explicit CD3D11_RESOURCE_DESC( const D3D11_RESOURCE_DESC& o ) :" )
cpp_quote( "        D3D11_RESOURCE_DESC( o )" )
cpp_quote( "    {}" )
cpp_quote( "    void ConvertD3D12Info( D3D12_TEXTURE_LAYOUT layout, D3D12_RESOURCE_MISC_FLAG miscFlags )" )
cpp_quote( "    {" )
cpp_quote( "        if (miscFlags & D3D12_RESOURCE_MISC_RENDER_TARGET) BindFlags |= D3D11_BIND_RENDER_TARGET;" )
cpp_quote( "        if (miscFlags & D3D12_RESOURCE_MISC_DEPTH_STENCIL) BindFlags |= D3D11_BIND_DEPTH_STENCIL;" )
cpp_quote( "        if (!(miscFlags & D3D12_RESOURCE_MISC_NO_SHADER_RESOURCE)) BindFlags |= D3D11_BIND_SHADER_RESOURCE;" )
cpp_quote( "        if (!(miscFlags & D3D12_RESOURCE_MISC_NO_UNORDERED_ACCESS)) BindFlags |= D3D11_BIND_UNORDERED_ACCESS;" )
cpp_quote( "        if (!(miscFlags & D3D12_RESOURCE_MISC_NO_STREAM_OUTPUT)) BindFlags |= D3D11_BIND_STREAM_OUTPUT;" )
cpp_quote( "        if (layout == D3D12_TEXTURE_LAYOUT_64KB_TILE_UNDEFINED_SWIZZLE) MiscFlags |= D3D11_RESOURCE_MISC_TILED;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D11_RESOURCE_DESC( const D3D12_RESOURCE_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        switch (o.Dimension)" )
cpp_quote( "        {" )
cpp_quote( "        case D3D12_RESOURCE_DIMENSION_BUFFER: Dimension = D3D11_RESOURCE_DIMENSION_BUFFER; break;" )
cpp_quote( "        case D3D12_RESOURCE_DIMENSION_TEXTURE_1D: Dimension = D3D11_RESOURCE_DIMENSION_TEXTURE1D; break;" )
cpp_quote( "        case D3D12_RESOURCE_DIMENSION_TEXTURE_2D: Dimension = D3D11_RESOURCE_DIMENSION_TEXTURE2D; break;" )
cpp_quote( "        case D3D12_RESOURCE_DIMENSION_TEXTURE_3D: Dimension = D3D11_RESOURCE_DIMENSION_TEXTURE3D; break;" )
cpp_quote( "        default: Dimension = D3D11_RESOURCE_DIMENSION_UNKNOWN; break;" )
cpp_quote( "        }" )
cpp_quote( "        Width = UINT( o.Width );" )
cpp_quote( "        Height = o.Height;" )
cpp_quote( "        Depth = (Dimension == D3D11_RESOURCE_DIMENSION_TEXTURE3D ? o.DepthOrArraySize : 1);" )
cpp_quote( "        MipLevels = o.MipLevels;" )
cpp_quote( "        ArraySize = (Dimension == D3D11_RESOURCE_DIMENSION_TEXTURE3D ? 1 : o.DepthOrArraySize);" )
cpp_quote( "        Format = o.Format;" )
cpp_quote( "        SampleDesc = o.SampleDesc;" )
cpp_quote( "        Usage = D3D11_USAGE_DEFAULT;" )
cpp_quote( "        BindFlags = 0;" )
cpp_quote( "        CPUAccessFlags = 0;" )
cpp_quote( "        MiscFlags = 0;" )
cpp_quote( "        StructureByteStride = 0;" )
cpp_quote( "        ConvertD3D12Info( o.Layout, o.MiscFlags );" )
cpp_quote( "    }" )
cpp_quote( "    CD3D11_RESOURCE_DESC( const D3D11_BUFFER_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        Dimension = D3D11_RESOURCE_DIMENSION_BUFFER;" )
cpp_quote( "        Width = o.ByteWidth;" )
cpp_quote( "        Height = 1;" )
cpp_quote( "        Depth = 1;" )
cpp_quote( "        MipLevels = 1;" )
cpp_quote( "        ArraySize = 1;" )
cpp_quote( "        Format = DXGI_FORMAT_UNKNOWN;" )
cpp_quote( "        SampleDesc.Count = 1;" )
cpp_quote( "        SampleDesc.Quality = 0;" )
cpp_quote( "        Usage = o.Usage;" )
cpp_quote( "        BindFlags = o.BindFlags;" )
cpp_quote( "        CPUAccessFlags = o.CPUAccessFlags;" )
cpp_quote( "        MiscFlags = o.MiscFlags;" )
cpp_quote( "        StructureByteStride = o.StructureByteStride;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D11_RESOURCE_DESC( const CD3D11_BUFFER_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        Dimension = D3D11_RESOURCE_DIMENSION_BUFFER;" )
cpp_quote( "        Width = o.ByteWidth;" )
cpp_quote( "        Height = 1;" )
cpp_quote( "        Depth = 1;" )
cpp_quote( "        MipLevels = 1;" )
cpp_quote( "        ArraySize = 1;" )
cpp_quote( "        Format = DXGI_FORMAT_UNKNOWN;" )
cpp_quote( "        SampleDesc.Count = 1;" )
cpp_quote( "        SampleDesc.Quality = 0;" )
cpp_quote( "        Usage = o.Usage;" )
cpp_quote( "        BindFlags = o.BindFlags;" )
cpp_quote( "        CPUAccessFlags = o.CPUAccessFlags;" )
cpp_quote( "        MiscFlags = o.MiscFlags;" )
cpp_quote( "        StructureByteStride = o.StructureByteStride;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D11_RESOURCE_DESC( const D3D11_TEXTURE1D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        Dimension = D3D11_RESOURCE_DIMENSION_TEXTURE1D;" )
cpp_quote( "        Width = o.Width;" )
cpp_quote( "        Height = 1;" )
cpp_quote( "        Depth = 1;" )
cpp_quote( "        MipLevels = o.MipLevels;" )
cpp_quote( "        ArraySize = o.ArraySize;" )
cpp_quote( "        Format = o.Format;" )
cpp_quote( "        SampleDesc.Count = 1;" )
cpp_quote( "        SampleDesc.Quality = 0;" )
cpp_quote( "        Usage = o.Usage;" )
cpp_quote( "        BindFlags = o.BindFlags;" )
cpp_quote( "        CPUAccessFlags = o.CPUAccessFlags;" )
cpp_quote( "        MiscFlags = o.MiscFlags;" )
cpp_quote( "        StructureByteStride = 0;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D11_RESOURCE_DESC( const CD3D11_TEXTURE1D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        Dimension = D3D11_RESOURCE_DIMENSION_TEXTURE1D;" )
cpp_quote( "        Width = o.Width;" )
cpp_quote( "        Height = 1;" )
cpp_quote( "        Depth = 1;" )
cpp_quote( "        MipLevels = o.MipLevels;" )
cpp_quote( "        ArraySize = o.ArraySize;" )
cpp_quote( "        Format = o.Format;" )
cpp_quote( "        SampleDesc.Count = 1;" )
cpp_quote( "        SampleDesc.Quality = 0;" )
cpp_quote( "        Usage = o.Usage;" )
cpp_quote( "        BindFlags = o.BindFlags;" )
cpp_quote( "        CPUAccessFlags = o.CPUAccessFlags;" )
cpp_quote( "        MiscFlags = o.MiscFlags;" )
cpp_quote( "        StructureByteStride = 0;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D11_RESOURCE_DESC( const D3D11_TEXTURE2D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        Dimension = D3D11_RESOURCE_DIMENSION_TEXTURE2D;" )
cpp_quote( "        Width = o.Width;" )
cpp_quote( "        Height = o.Height;" )
cpp_quote( "        Depth = 1;" )
cpp_quote( "        MipLevels = o.MipLevels;" )
cpp_quote( "        ArraySize = o.ArraySize;" )
cpp_quote( "        Format = o.Format;" )
cpp_quote( "        SampleDesc = o.SampleDesc;" )
cpp_quote( "        Usage = o.Usage;" )
cpp_quote( "        BindFlags = o.BindFlags;" )
cpp_quote( "        CPUAccessFlags = o.CPUAccessFlags;" )
cpp_quote( "        MiscFlags = o.MiscFlags;" )
cpp_quote( "        StructureByteStride = 0;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D11_RESOURCE_DESC( const CD3D11_TEXTURE2D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        Dimension = D3D11_RESOURCE_DIMENSION_TEXTURE2D;" )
cpp_quote( "        Width = o.Width;" )
cpp_quote( "        Height = o.Height;" )
cpp_quote( "        Depth = 1;" )
cpp_quote( "        MipLevels = o.MipLevels;" )
cpp_quote( "        ArraySize = o.ArraySize;" )
cpp_quote( "        Format = o.Format;" )
cpp_quote( "        SampleDesc = o.SampleDesc;" )
cpp_quote( "        Usage = o.Usage;" )
cpp_quote( "        BindFlags = o.BindFlags;" )
cpp_quote( "        CPUAccessFlags = o.CPUAccessFlags;" )
cpp_quote( "        MiscFlags = o.MiscFlags;" )
cpp_quote( "        StructureByteStride = 0;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D11_RESOURCE_DESC( const D3D11_TEXTURE3D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        Dimension = D3D11_RESOURCE_DIMENSION_TEXTURE3D;" )
cpp_quote( "        Width = o.Width;" )
cpp_quote( "        Height = o.Height;" )
cpp_quote( "        Depth = o.Depth;" )
cpp_quote( "        MipLevels = o.MipLevels;" )
cpp_quote( "        ArraySize = 1;" )
cpp_quote( "        Format = o.Format;" )
cpp_quote( "        SampleDesc.Count = 1;" )
cpp_quote( "        SampleDesc.Quality = 0;" )
cpp_quote( "        Usage = o.Usage;" )
cpp_quote( "        BindFlags = o.BindFlags;" )
cpp_quote( "        CPUAccessFlags = o.CPUAccessFlags;" )
cpp_quote( "        MiscFlags = o.MiscFlags;" )
cpp_quote( "        StructureByteStride = 0;" )
cpp_quote( "    }" )
cpp_quote( "    CD3D11_RESOURCE_DESC( const CD3D11_TEXTURE3D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        Dimension = D3D11_RESOURCE_DIMENSION_TEXTURE3D;" )
cpp_quote( "        Width = o.Width;" )
cpp_quote( "        Height = o.Height;" )
cpp_quote( "        Depth = o.Depth;" )
cpp_quote( "        MipLevels = o.MipLevels;" )
cpp_quote( "        ArraySize = 1;" )
cpp_quote( "        Format = o.Format;" )
cpp_quote( "        SampleDesc.Count = 1;" )
cpp_quote( "        SampleDesc.Quality = 0;" )
cpp_quote( "        Usage = o.Usage;" )
cpp_quote( "        BindFlags = o.BindFlags;" )
cpp_quote( "        CPUAccessFlags = o.CPUAccessFlags;" )
cpp_quote( "        MiscFlags = o.MiscFlags;" )
cpp_quote( "        StructureByteStride = 0;" )
cpp_quote( "    }" )
cpp_quote( "    ~CD3D11_RESOURCE_DESC() {}" )
cpp_quote( "    operator const D3D11_RESOURCE_DESC&() const { return *this; }" )
cpp_quote( "    operator CD3D12_RESOURCE_DESC() const" )
cpp_quote( "    {" )
cpp_quote( "        CD3D12_RESOURCE_DESC RetDesc" )
cpp_quote( "            ( D3D12_RESOURCE_DIMENSION_BUFFER" )
cpp_quote( "            , 0" )
cpp_quote( "            , Width" )  
cpp_quote( "            , Height" )
cpp_quote( "            , UINT16( Dimension == D3D11_RESOURCE_DIMENSION_TEXTURE3D ? Depth : ArraySize )" )
cpp_quote( "            , UINT16( MipLevels )" )
cpp_quote( "            , Format" )
cpp_quote( "            , SampleDesc.Count" )
cpp_quote( "            , SampleDesc.Quality" )
cpp_quote( "            , D3D12_TEXTURE_LAYOUT_UNKNOWN" )
cpp_quote( "            , D3D12_RESOURCE_MISC_NONE" )
cpp_quote( "            );" )
cpp_quote( "        switch (Dimension)" )
cpp_quote( "        {" )
cpp_quote( "        case D3D11_RESOURCE_DIMENSION_TEXTURE1D: RetDesc.Dimension = D3D12_RESOURCE_DIMENSION_TEXTURE_1D; break;" )
cpp_quote( "        case D3D11_RESOURCE_DIMENSION_TEXTURE2D: RetDesc.Dimension = D3D12_RESOURCE_DIMENSION_TEXTURE_2D; break;" )
cpp_quote( "        case D3D11_RESOURCE_DIMENSION_TEXTURE3D: RetDesc.Dimension = D3D12_RESOURCE_DIMENSION_TEXTURE_3D; break;" )
cpp_quote( "        default: break;" )
cpp_quote( "        }" )
cpp_quote( "        RetDesc.ConvertD3D11Flags( BindFlags );" )
cpp_quote( "        return RetDesc;" )
cpp_quote( "    }" )
cpp_quote( "    operator D3D12_RESOURCE_DESC() const { return D3D12_RESOURCE_DESC( this->operator CD3D12_RESOURCE_DESC() ); }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef enum D3D12_MAP
{
    D3D12_MAP_READ       = 1,
    D3D12_MAP_WRITE      = 2,
    D3D12_MAP_READ_WRITE = 3,
} D3D12_MAP;

typedef struct D3D12_RANGE
{
    SIZE_T Begin;
    SIZE_T End; // One past end, so (End - Begin) = Size
} D3D12_RANGE;
cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_RANGE : public D3D12_RANGE" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_RANGE()" )
cpp_quote( "    {}" )
cpp_quote( "    CD3D12_RANGE( " )
cpp_quote( "        SIZE_T begin, " )
cpp_quote( "        SIZE_T end )" )
cpp_quote( "    {" )
cpp_quote( "        Begin = begin;" )
cpp_quote( "        End = end;" )
cpp_quote( "    }" )
cpp_quote( "    operator const D3D12_RANGE&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef struct D3D12_SUBRESOURCE_INFO
{
    UINT64 Offset;
    UINT RowPitch;
    UINT DepthPitch;
} D3D12_SUBRESOURCE_INFO;

typedef struct D3D12_TILED_RESOURCE_COORDINATE
{
    UINT X;
    UINT Y;
    UINT Z;
    UINT Subresource; 
} D3D12_TILED_RESOURCE_COORDINATE;
cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_TILED_RESOURCE_COORDINATE : public D3D12_TILED_RESOURCE_COORDINATE" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_TILED_RESOURCE_COORDINATE()" )
cpp_quote( "    {}" )
cpp_quote( "    CD3D12_TILED_RESOURCE_COORDINATE( " )
cpp_quote( "        UINT x, " )
cpp_quote( "        UINT y, " )
cpp_quote( "        UINT z, " )
cpp_quote( "        UINT subresource ) " )
cpp_quote( "    {" )
cpp_quote( "        X = x;" )
cpp_quote( "        Y = y;" )
cpp_quote( "        Z = z;" )
cpp_quote( "        Subresource = subresource;" )
cpp_quote( "    }" )
cpp_quote( "    operator const D3D12_TILED_RESOURCE_COORDINATE&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef struct D3D12_TILE_REGION_SIZE
{
    UINT NumTiles; 
    BOOL UseBox; 
    UINT Width; 
    UINT16 Height;
    UINT16 Depth;
} D3D12_TILE_REGION_SIZE;
cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_TILE_REGION_SIZE : public D3D12_TILE_REGION_SIZE" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_TILE_REGION_SIZE()" )
cpp_quote( "    {}" )
cpp_quote( "    CD3D12_TILE_REGION_SIZE( " )
cpp_quote( "        UINT numTiles, " )
cpp_quote( "        BOOL useBox, " )
cpp_quote( "        UINT width, " )
cpp_quote( "        UINT16 height, " )
cpp_quote( "        UINT16 depth ) " )
cpp_quote( "    {" )
cpp_quote( "        NumTiles = numTiles;" )
cpp_quote( "        UseBox = useBox;" )
cpp_quote( "        Width = width;" )
cpp_quote( "        Height = height;" )
cpp_quote( "        Depth = depth;" )
cpp_quote( "    }" )
cpp_quote( "    operator const D3D12_TILE_REGION_SIZE&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef enum D3D12_TILE_RANGE_FLAG
{
    D3D12_TILE_RANGE_NONE = 0x0,
    D3D12_TILE_RANGE_NULL = 0x1,
    D3D12_TILE_RANGE_SKIP = 0x2,
    D3D12_TILE_RANGE_REUSE_SINGLE_TILE = 0x4,
} D3D12_TILE_RANGE_FLAG;
cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_TILE_RANGE_FLAG );" )

typedef struct D3D12_SUBRESOURCE_TILING
{
    UINT WidthInTiles;
    UINT16 HeightInTiles;
    UINT16 DepthInTiles;
    UINT StartTileIndexInOverallResource;
} D3D12_SUBRESOURCE_TILING;
cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_SUBRESOURCE_TILING : public D3D12_SUBRESOURCE_TILING" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_SUBRESOURCE_TILING()" )
cpp_quote( "    {}" )
cpp_quote( "    CD3D12_SUBRESOURCE_TILING( " )
cpp_quote( "        UINT widthInTiles, " )
cpp_quote( "        UINT16 heightInTiles, " )
cpp_quote( "        UINT16 depthInTiles, " )
cpp_quote( "        UINT startTileIndexInOverallResource ) " )
cpp_quote( "    {" )
cpp_quote( "        WidthInTiles = widthInTiles;" )
cpp_quote( "        HeightInTiles = heightInTiles;" )
cpp_quote( "        DepthInTiles = depthInTiles;" )
cpp_quote( "        StartTileIndexInOverallResource = startTileIndexInOverallResource;" )
cpp_quote( "    }" )
cpp_quote( "    operator const D3D12_SUBRESOURCE_TILING&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

const UINT D3D12_PACKED_TILE = 0xffffffff;

typedef struct D3D12_TILE_SHAPE
{
    UINT WidthInTexels; 
    UINT HeightInTexels;
    UINT DepthInTexels;
} D3D12_TILE_SHAPE;
cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_TILE_SHAPE : public D3D12_TILE_SHAPE" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_TILE_SHAPE()" )
cpp_quote( "    {}" )
cpp_quote( "    CD3D12_TILE_SHAPE( " )
cpp_quote( "        UINT widthInTexels, " )
cpp_quote( "        UINT heightInTexels, " )
cpp_quote( "        UINT depthInTexels ) " )
cpp_quote( "    {" )
cpp_quote( "        WidthInTexels = widthInTexels;" )
cpp_quote( "        HeightInTexels = heightInTexels;" )
cpp_quote( "        DepthInTexels = depthInTexels;" )
cpp_quote( "    }" )
cpp_quote( "    operator const D3D12_TILE_SHAPE&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef struct D3D12_PACKED_MIP_DESC
{
    UINT8 NumStandardMips;
    UINT8 NumPackedMips;
    UINT NumTilesForPackedMips;
    UINT StartTileIndexInOverallResource;
} D3D12_PACKED_MIP_DESC;
cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_PACKED_MIP_DESC : public D3D12_PACKED_MIP_DESC" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_PACKED_MIP_DESC()" )
cpp_quote( "    {}" )
cpp_quote( "    CD3D12_PACKED_MIP_DESC( " )
cpp_quote( "        UINT8 numStandardMips, " )
cpp_quote( "        UINT8 numPackedMips, " )
cpp_quote( "        UINT numTilesForPackedMips, " )
cpp_quote( "        UINT startTileIndexInOverallResource ) " )
cpp_quote( "    {" )
cpp_quote( "        NumStandardMips = numStandardMips;" )
cpp_quote( "        NumPackedMips = numPackedMips;" )
cpp_quote( "        NumTilesForPackedMips = numTilesForPackedMips;" )
cpp_quote( "        StartTileIndexInOverallResource = startTileIndexInOverallResource;" )
cpp_quote( "    }" )
cpp_quote( "    operator const D3D12_PACKED_MIP_DESC&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef enum D3D12_TILE_MAPPING_FLAG 
{
    D3D12_TILE_MAPPING_NONE = 0x0,
    D3D12_TILE_MAPPING_NO_HAZARD = 0x1,
} D3D12_TILE_MAPPING_FLAG;
cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_TILE_MAPPING_FLAG );" )

typedef enum D3D12_TILE_COPY_FLAG 
{
    D3D12_TILE_COPY_NONE = 0x0,
    D3D12_TILE_COPY_NO_HAZARD = 0x1,
    D3D12_TILE_COPY_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 0x2,
    D3D12_TILE_COPY_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 0x4,
} D3D12_TILE_COPY_FLAG;
cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_TILE_COPY_FLAG );" )

// Resource Barrier
typedef enum D3D12_RESOURCE_USAGE
{
    D3D12_RESOURCE_USAGE_NO_ACCESS                 = 0x00000001,
    D3D12_RESOURCE_USAGE_DEFAULT_READ              = 0x00000002,
    D3D12_RESOURCE_USAGE_RENDER_TARGET             = 0x00000004,
    D3D12_RESOURCE_USAGE_UNORDERED_ACCESS          = 0x00000008,
    D3D12_RESOURCE_USAGE_DEPTH                     = 0x00000010,
    D3D12_RESOURCE_USAGE_NON_PIXEL_SHADER_RESOURCE = 0x00000020,
    D3D12_RESOURCE_USAGE_PIXEL_SHADER_RESOURCE     = 0x00000040,
    D3D12_RESOURCE_USAGE_STREAM_OUT                = 0x00000080,
    D3D12_RESOURCE_USAGE_INDIRECT_ARGUMENT         = 0x00000100,
    D3D12_RESOURCE_USAGE_COPY_DEST                 = 0x00000400,
    D3D12_RESOURCE_USAGE_COPY_SOURCE               = 0x00000800,
    D3D12_RESOURCE_USAGE_RESOLVE_DEST              = 0x00001000,
    D3D12_RESOURCE_USAGE_RESOLVE_SOURCE            = 0x00002000,

    D3D12_RESOURCE_USAGE_GENERIC_READ          =
        (D3D12_RESOURCE_USAGE_DEFAULT_READ |
         D3D12_RESOURCE_USAGE_COPY_SOURCE |
         D3D12_RESOURCE_USAGE_NON_PIXEL_SHADER_RESOURCE |
         D3D12_RESOURCE_USAGE_PIXEL_SHADER_RESOURCE |
         D3D12_RESOURCE_USAGE_INDIRECT_ARGUMENT),

    D3D12_RESOURCE_USAGE_PRESENT                   = D3D12_RESOURCE_USAGE_COPY_SOURCE,

    // Most resources start out in this state
    // The exceptions are dynamic heaps and swap chain back buffers
    D3D12_RESOURCE_USAGE_INITIAL                   = 0x00000000,

} D3D12_RESOURCE_USAGE;

typedef enum D3D12_RESOURCE_BARRIER_TYPE
{
    D3D12_RESOURCE_BARRIER_TYPE_TRANSITION,
    D3D12_RESOURCE_BARRIER_TYPE_ALIASING,
    D3D12_RESOURCE_BARRIER_TYPE_UAV,
} D3D12_RESOURCE_BARRIER_TYPE;

const UINT D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = 0xFFFFFFFF;
interface ID3D12Resource;

typedef struct D3D12_RESOURCE_TRANSITION_BARRIER_DESC
{
    ID3D12Resource* pResource;
    UINT Subresource;
    UINT StateBefore;
    UINT StateAfter;
} D3D12_RESOURCE_TRANSITION_BARRIER_DESC;

typedef struct D3D12_RESOURCE_ALIASING_BARRIER_DESC
{
    ID3D12Resource* pResourceBefore;
    ID3D12Resource* pResourceAfter;
} D3D12_RESOURCE_ALIASING_BARRIER_DESC;

typedef struct D3D12_RESOURCE_UAV_BARRIER_DESC
{
    ID3D12Resource* pResource;
} D3D12_RESOURCE_UAV_BARRIER_DESC;

typedef struct D3D12_RESOURCE_BARRIER_DESC
{
    D3D12_RESOURCE_BARRIER_TYPE    Type;

    union
    {
        D3D12_RESOURCE_TRANSITION_BARRIER_DESC Transition;
        D3D12_RESOURCE_ALIASING_BARRIER_DESC   Aliasing;
        D3D12_RESOURCE_UAV_BARRIER_DESC        UAV;
    };
} D3D12_RESOURCE_BARRIER_DESC;

const UINT D3D12_CONSTANT_BUFFER_OFFSET_ALIGNMENT = 256;
const UINT D3D12_TEXTURE_OFFSET_ALIGNMENT = 512;
const UINT D3D12_TEXTURE_PITCH_ALIGNMENT = 128;
const UINT D3D12_RESOURCE_MAPPING_ALIGNMENT = 65536; // 64KiB
const UINT D3D12_MSAA_RESOURCE_MAPPING_ALIGNMENT = 4194304; // 4MiB

typedef struct D3D12_PITCHED_SUBRESOURCE_DESC
{
    DXGI_FORMAT Format;
    UINT        Width;
    UINT        Height;
    UINT        Depth;
    UINT        RowPitch; // Must be a multiple of D3D12_TEXTURE_PITCH_ALIGNMENT
} D3D12_PITCHED_SUBRESOURCE_DESC;
cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_PITCHED_SUBRESOURCE_DESC : public D3D12_PITCHED_SUBRESOURCE_DESC" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_PITCHED_SUBRESOURCE_DESC()" )
cpp_quote( "    {}" )
cpp_quote( "    CD3D12_PITCHED_SUBRESOURCE_DESC( " )
cpp_quote( "        DXGI_FORMAT format, " )
cpp_quote( "        UINT width, " )
cpp_quote( "        UINT height, " )
cpp_quote( "        UINT depth, " )
cpp_quote( "        UINT rowPitch ) " )
cpp_quote( "    {" )
cpp_quote( "        Format = format;" )
cpp_quote( "        Width = width;" )
cpp_quote( "        Height = height;" )
cpp_quote( "        Depth = depth;" )
cpp_quote( "        RowPitch = rowPitch;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_PITCHED_SUBRESOURCE_DESC( ")
cpp_quote( "        const D3D12_RESOURCE_DESC& resDesc, " )
cpp_quote( "        UINT rowPitch ) " )
cpp_quote( "    {" )
cpp_quote( "        Format = resDesc.Format;" )
cpp_quote( "        Width = UINT( resDesc.Width );" )
cpp_quote( "        Height = resDesc.Height;" )
cpp_quote( "        Depth = (resDesc.Dimension == D3D12_RESOURCE_DIMENSION_TEXTURE_3D ? resDesc.DepthOrArraySize : 1);" )
cpp_quote( "        RowPitch = rowPitch;" )
cpp_quote( "    }" )
cpp_quote( "    operator const D3D12_PITCHED_SUBRESOURCE_DESC&() const { return *this; }" )
cpp_quote( "};" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

typedef struct D3D12_PLACED_PITCHED_SUBRESOURCE_DESC
{
    UINT64                         Offset; // Must be a multiple of D3D12_TEXTURE_OFFSET_ALIGNMENT
    D3D12_PITCHED_SUBRESOURCE_DESC Placement;
} D3D12_PLACED_PITCHED_SUBRESOURCE_DESC;

typedef enum D3D12_SUBRESOURCE_VIEW_TYPE
{
    D3D12_SUBRESOURCE_VIEW_SELECT_SUBRESOURCE         = 0, // D3D12_SELECT_SUBRESOURCE
    D3D12_SUBRESOURCE_VIEW_PLACED_PITCHED_SUBRESOURCE = 1, // D3D12_PLACED_PITCHED_SUBRESOURCE_DESC
} D3D12_SUBRESOURCE_VIEW_TYPE;

typedef struct D3D12_SELECT_SUBRESOURCE
{
    UINT Subresource;
} D3D12_SELECT_SUBRESOURCE;

typedef enum D3D12_COPY_FLAGS
{
    D3D12_COPY_NONE         = 0x0,
    D3D12_COPY_NO_OVERWRITE = 0x1,
    D3D12_COPY_DISCARD      = 0x2,
} D3D12_COPY_FLAGS;
cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_COPY_FLAGS );" )

// D3D12 view descriptions
typedef struct D3D12_INDEX_BUFFER_VIEW_DESC
{
    DXGI_FORMAT   Format;
    UINT64        OffsetInBytes;
    UINT64        SizeInBytes;
} D3D12_INDEX_BUFFER_VIEW_DESC;

typedef struct D3D12_STREAM_OUTPUT_VIEW_DESC
{
    UINT64 OffsetInBytes;
    UINT64 SizeInBytes;
    ID3D11Query* pSOCurrentOffset;
} D3D12_STREAM_OUTPUT_VIEW_DESC;

typedef struct D3D12_VERTEX_BUFFER_VIEW_DESC
{
    UINT StrideInBytes;
    UINT64 OffsetInBytes;
    UINT64 SizeInBytes;
} D3D12_VERTEX_BUFFER_VIEW_DESC;

typedef enum D3D12_BUFFER_SRV_FLAG
{
    D3D12_BUFFER_SRV_FLAG_RAW = 0x00000001,      // allow device multi-component reads with DWORD addressing
} D3D12_BUFFER_SRV_FLAG;

typedef struct D3D12_BUFFER_SRV
{
    UINT64 FirstElement;
    UINT NumElements;
    UINT StructureByteStride; // if nonzero, format must be DXGI_FORMAT_UNKNOWN
    UINT Flags;
} D3D12_BUFFER_SRV;

typedef struct D3D12_TEX1D_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    FLOAT ResourceMinLODClamp;
} D3D12_TEX1D_SRV;

typedef struct D3D12_TEX1D_ARRAY_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
    FLOAT ResourceMinLODClamp;
} D3D12_TEX1D_ARRAY_SRV;

typedef struct D3D12_TEX2D_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    FLOAT ResourceMinLODClamp;
} D3D12_TEX2D_SRV;

typedef struct D3D12_TEX2D_ARRAY_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
    FLOAT ResourceMinLODClamp;
} D3D12_TEX2D_ARRAY_SRV;

typedef struct D3D12_TEX3D_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    FLOAT ResourceMinLODClamp;
} D3D12_TEX3D_SRV;

typedef struct D3D12_TEXCUBE_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    FLOAT ResourceMinLODClamp;
} D3D12_TEXCUBE_SRV;

typedef struct D3D12_TEXCUBE_ARRAY_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT First2DArrayFace;
    UINT NumCubes;
    FLOAT ResourceMinLODClamp;
} D3D12_TEXCUBE_ARRAY_SRV;

typedef struct D3D12_TEX2DMS_SRV
{
    // don't need to define anything specific for this view dimension
    UINT UnusedField_NothingToDefine;
} D3D12_TEX2DMS_SRV;

typedef struct D3D12_TEX2DMS_ARRAY_SRV
{
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D12_TEX2DMS_ARRAY_SRV;

typedef enum D3D12_SRV_DIMENSION {
    D3D12_SRV_DIMENSION_UNKNOWN = 0,
    D3D12_SRV_DIMENSION_BUFFER = 1,
    D3D12_SRV_DIMENSION_TEXTURE1D = 2,
    D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_SRV_DIMENSION_TEXTURE2D = 4,
    D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_SRV_DIMENSION_TEXTURE2DMS = 6,
    D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D12_SRV_DIMENSION_TEXTURE3D = 8,
    D3D12_SRV_DIMENSION_TEXTURECUBE = 9,
    D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
} D3D12_SRV_DIMENSION;

typedef struct D3D12_SHADER_RESOURCE_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_SRV_DIMENSION ViewDimension;

    union
    {
        D3D12_BUFFER_SRV Buffer;
        D3D12_TEX1D_SRV Texture1D;
        D3D12_TEX1D_ARRAY_SRV Texture1DArray;
        D3D12_TEX2D_SRV Texture2D;
        D3D12_TEX2D_ARRAY_SRV Texture2DArray;
        D3D12_TEX2DMS_SRV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D12_TEX3D_SRV Texture3D;
        D3D12_TEXCUBE_SRV TextureCube;
        D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;
    };
} D3D12_SHADER_RESOURCE_VIEW_DESC;

typedef struct D3D12_CONSTANT_BUFFER_VIEW_DESC
{
    UINT64 OffsetInBytes;
    UINT SizeInBytes;
} D3D12_CONSTANT_BUFFER_VIEW_DESC;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Sampler
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef enum D3D12_FILTER
{
    // Bits used in defining enumeration of valid filters:
    // bits [1:0] - mip: 0 == point, 1 == linear, 2,3 unused
    // bits [3:2] - mag: 0 == point, 1 == linear, 2,3 unused
    // bits [5:4] - min: 0 == point, 1 == linear, 2,3 unused
    // bit  [6]   - aniso
    // bits [8:7] - reduction type:
    //                0 == standard filtering
    //                1 == comparison
    //                2 == min
    //                3 == max
    // bit  [31]  - mono 1-bit (narrow-purpose filter) [no longer supported in D3D12]

    D3D12_FILTER_MIN_MAG_MIP_POINT                              = 0x00000000,
    D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR                       = 0x00000001,
    D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT                 = 0x00000004,
    D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR                       = 0x00000005,
    D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT                       = 0x00000010,
    D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR                = 0x00000011,
    D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT                       = 0x00000014,
    D3D12_FILTER_MIN_MAG_MIP_LINEAR                             = 0x00000015,
    D3D12_FILTER_ANISOTROPIC                                    = 0x00000055,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT                   = 0x00000080,
    D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR            = 0x00000081,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT      = 0x00000084,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR            = 0x00000085,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT            = 0x00000090,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR     = 0x00000091,
    D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT            = 0x00000094,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR                  = 0x00000095,
    D3D12_FILTER_COMPARISON_ANISOTROPIC                         = 0x000000d5,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT                      = 0x00000100,
    D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR               = 0x00000101,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT         = 0x00000104,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR               = 0x00000105,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT               = 0x00000110,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR        = 0x00000111,
    D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT               = 0x00000114,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR                     = 0x00000115,
    D3D12_FILTER_MINIMUM_ANISOTROPIC                            = 0x00000155,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT                      = 0x00000180,
    D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR               = 0x00000181,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT         = 0x00000184,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR               = 0x00000185,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT               = 0x00000190,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR        = 0x00000191,
    D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT               = 0x00000194,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR                     = 0x00000195,
    D3D12_FILTER_MAXIMUM_ANISOTROPIC                            = 0x000001d5
} D3D12_FILTER;

typedef enum D3D12_FILTER_TYPE
{
    D3D12_FILTER_TYPE_POINT = 0,
    D3D12_FILTER_TYPE_LINEAR = 1,
} D3D12_FILTER_TYPE;

typedef enum D3D12_FILTER_REDUCTION_TYPE
{
    D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0,
    D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1,
    D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2,
    D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3,
} D3D12_FILTER_REDUCTION_TYPE;

const UINT D3D12_FILTER_REDUCTION_TYPE_MASK = 0x00000003;
const UINT D3D12_FILTER_REDUCTION_TYPE_SHIFT = 7;

const UINT D3D12_FILTER_TYPE_MASK = 0x00000003;
const UINT D3D12_MIN_FILTER_SHIFT = 4;
const UINT D3D12_MAG_FILTER_SHIFT = 2;
const UINT D3D12_MIP_FILTER_SHIFT = 0;

// encode enum entry for most filters except anisotropic filtering
cpp_quote( "#define D3D12_ENCODE_BASIC_FILTER( min, mag, mip, reduction )                                                     \\" )
cpp_quote( "                                   ( ( D3D12_FILTER ) (                                                           \\" )
cpp_quote( "                                   ( ( ( min ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MIN_FILTER_SHIFT ) |           \\" )
cpp_quote( "                                   ( ( ( mag ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MAG_FILTER_SHIFT ) |           \\" )
cpp_quote( "                                   ( ( ( mip ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MIP_FILTER_SHIFT ) |           \\" )
cpp_quote( "                                   ( ( ( reduction ) & D3D12_FILTER_REDUCTION_TYPE_MASK ) << D3D12_FILTER_REDUCTION_TYPE_SHIFT ) ) ) " )

// encode enum entry for anisotropic filtering (with or without comparison filtering)
cpp_quote( "#define D3D12_ENCODE_ANISOTROPIC_FILTER( reduction )                                                  \\" )
cpp_quote( "                                         ( ( D3D12_FILTER ) (                                         \\" )
cpp_quote( "                                         D3D12_ANISOTROPIC_FILTERING_BIT |                            \\" )
cpp_quote( "                                         D3D12_ENCODE_BASIC_FILTER( D3D12_FILTER_TYPE_LINEAR,         \\" )
cpp_quote( "                                                                    D3D12_FILTER_TYPE_LINEAR,         \\" )
cpp_quote( "                                                                    D3D12_FILTER_TYPE_LINEAR,         \\" )
cpp_quote( "                                                                    reduction ) ) )                     " )

cpp_quote( "#define D3D12_DECODE_MIN_FILTER( D3D12Filter )                                                              \\" )
cpp_quote( "                                 ( ( D3D12_FILTER_TYPE )                                                    \\" )
cpp_quote( "                                 ( ( ( D3D12Filter ) >> D3D12_MIN_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) ) " )

cpp_quote( "#define D3D12_DECODE_MAG_FILTER( D3D12Filter )                                                              \\" )
cpp_quote( "                                 ( ( D3D12_FILTER_TYPE )                                                    \\" )
cpp_quote( "                                 ( ( ( D3D12Filter ) >> D3D12_MAG_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) ) " )

cpp_quote( "#define D3D12_DECODE_MIP_FILTER( D3D12Filter )                                                              \\" )
cpp_quote( "                                 ( ( D3D12_FILTER_TYPE )                                                    \\" )
cpp_quote( "                                 ( ( ( D3D12Filter ) >> D3D12_MIP_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) ) " )

cpp_quote( "#define D3D12_DECODE_FILTER_REDUCTION( D3D12Filter )                                                        \\" )
cpp_quote( "                                 ( ( D3D12_FILTER_REDUCTION_TYPE )                                                      \\" )
cpp_quote( "                                 ( ( ( D3D12Filter ) >> D3D12_FILTER_REDUCTION_TYPE_SHIFT ) & D3D12_FILTER_REDUCTION_TYPE_MASK ) ) " )

cpp_quote( "#define D3D12_DECODE_IS_COMPARISON_FILTER( D3D12Filter )                                                    \\" )
cpp_quote( "                                 ( D3D12_DECODE_FILTER_REDUCTION( D3D12Filter ) == D3D12_FILTER_REDUCTION_TYPE_COMPARISON ) " )

cpp_quote( "#define D3D12_DECODE_IS_ANISOTROPIC_FILTER( D3D12Filter )                                               \\" )
cpp_quote( "                            ( ( ( D3D12Filter ) & D3D12_ANISOTROPIC_FILTERING_BIT ) &&                  \\" )
cpp_quote( "                            ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIN_FILTER( D3D12Filter ) ) &&   \\" )
cpp_quote( "                            ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MAG_FILTER( D3D12Filter ) ) &&   \\" )
cpp_quote( "                            ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIP_FILTER( D3D12Filter ) ) )      " )

typedef enum D3D12_TEXTURE_ADDRESS_MODE
{
    D3D12_TEXTURE_ADDRESS_WRAP = 1,
    D3D12_TEXTURE_ADDRESS_MIRROR = 2,
    D3D12_TEXTURE_ADDRESS_CLAMP = 3,
    D3D12_TEXTURE_ADDRESS_BORDER = 4,
    D3D12_TEXTURE_ADDRESS_MIRROR_ONCE = 5
} D3D12_TEXTURE_ADDRESS_MODE;

typedef struct D3D12_SAMPLER_DESC
{
    D3D12_FILTER Filter;
    D3D12_TEXTURE_ADDRESS_MODE AddressU;
    D3D12_TEXTURE_ADDRESS_MODE AddressV;
    D3D12_TEXTURE_ADDRESS_MODE AddressW;
    FLOAT MipLODBias;
    UINT MaxAnisotropy;
    D3D12_COMPARISON_FUNC ComparisonFunc;
    FLOAT BorderColor[4]; // RGBA
    FLOAT MinLOD;
    FLOAT MaxLOD;
} D3D12_SAMPLER_DESC;

typedef enum D3D12_BUFFER_UAV_FLAG
{
    D3D12_BUFFER_UAV_FLAG_RAW =    0x00000001,
    D3D12_BUFFER_UAV_FLAG_APPEND = 0x00000002,
    D3D12_BUFFER_UAV_FLAG_COUNTER = 0x00000004,
} D3D12_BUFFER_UAV_FLAG;

typedef struct D3D12_BUFFER_UAV
{
    UINT64 FirstElement;
    UINT NumElements;
    UINT StructureByteStride; // if nonzero, format must be DXGI_FORMAT_UNKNOWN
    ID3D11Query* pUAVCounter;
    UINT Flags;
} D3D12_BUFFER_UAV;

typedef struct D3D12_TEX1D_UAV
{
    UINT MipSlice;
} D3D12_TEX1D_UAV;

typedef struct D3D12_TEX1D_ARRAY_UAV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D12_TEX1D_ARRAY_UAV;

typedef struct D3D12_TEX2D_UAV
{
    UINT MipSlice;
} D3D12_TEX2D_UAV;

typedef struct D3D12_TEX2D_ARRAY_UAV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D12_TEX2D_ARRAY_UAV;

typedef struct D3D12_TEX3D_UAV
{
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
} D3D12_TEX3D_UAV;

typedef enum D3D12_UAV_DIMENSION
{
    D3D12_UAV_DIMENSION_UNKNOWN = 0,
    D3D12_UAV_DIMENSION_BUFFER = 1,
    D3D12_UAV_DIMENSION_TEXTURE1D = 2,
    D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_UAV_DIMENSION_TEXTURE2D = 4,
    D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_UAV_DIMENSION_TEXTURE3D = 8,
} D3D12_UAV_DIMENSION;

typedef struct D3D12_UNORDERED_ACCESS_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_UAV_DIMENSION ViewDimension;

    union
    {
        D3D12_BUFFER_UAV Buffer;
        D3D12_TEX1D_UAV Texture1D;
        D3D12_TEX1D_ARRAY_UAV Texture1DArray;
        D3D12_TEX2D_UAV Texture2D;
        D3D12_TEX2D_ARRAY_UAV Texture2DArray;
        D3D12_TEX3D_UAV Texture3D;
    };
} D3D12_UNORDERED_ACCESS_VIEW_DESC;

typedef struct D3D12_BUFFER_RTV
{
    UINT64 FirstElement;
    UINT NumElements;
} D3D12_BUFFER_RTV;

typedef struct D3D12_TEX1D_RTV
{
    UINT MipSlice;
} D3D12_TEX1D_RTV;

typedef struct D3D12_TEX1D_ARRAY_RTV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D12_TEX1D_ARRAY_RTV;

typedef struct D3D12_TEX2D_RTV
{
    UINT MipSlice;
} D3D12_TEX2D_RTV;

typedef struct D3D12_TEX2DMS_RTV
{
    UINT UnusedField_NothingToDefine;
} D3D12_TEX2DMS_RTV;

typedef struct D3D12_TEX2D_ARRAY_RTV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D12_TEX2D_ARRAY_RTV;

typedef struct D3D12_TEX2DMS_ARRAY_RTV
{
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D12_TEX2DMS_ARRAY_RTV;

typedef struct D3D12_TEX3D_RTV
{
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
} D3D12_TEX3D_RTV;

typedef enum D3D12_RTV_DIMENSION
{
    D3D12_RTV_DIMENSION_UNKNOWN = 0,
    D3D12_RTV_DIMENSION_BUFFER = 1,
    D3D12_RTV_DIMENSION_TEXTURE1D = 2,
    D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_RTV_DIMENSION_TEXTURE2D = 4,
    D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_RTV_DIMENSION_TEXTURE2DMS = 6,
    D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D12_RTV_DIMENSION_TEXTURE3D = 8,
} D3D12_RTV_DIMENSION;

typedef struct D3D12_RENDER_TARGET_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_RTV_DIMENSION ViewDimension;

    union
    {
        D3D12_BUFFER_RTV Buffer;
        D3D12_TEX1D_RTV Texture1D;
        D3D12_TEX1D_ARRAY_RTV Texture1DArray;
        D3D12_TEX2D_RTV Texture2D;
        D3D12_TEX2D_ARRAY_RTV Texture2DArray;
        D3D12_TEX2DMS_RTV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        D3D12_TEX3D_RTV Texture3D;
    };
} D3D12_RENDER_TARGET_VIEW_DESC;

typedef struct D3D12_TEX1D_DSV
{
    UINT MipSlice;
} D3D12_TEX1D_DSV;

typedef struct D3D12_TEX1D_ARRAY_DSV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D12_TEX1D_ARRAY_DSV;

typedef struct D3D12_TEX2D_DSV
{
    UINT MipSlice;
} D3D12_TEX2D_DSV;

typedef struct D3D12_TEX2D_ARRAY_DSV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D12_TEX2D_ARRAY_DSV;

typedef struct D3D12_TEX2DMS_DSV
{
    UINT UnusedField_NothingToDefine;
} D3D12_TEX2DMS_DSV;

typedef struct D3D12_TEX2DMS_ARRAY_DSV
{
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D12_TEX2DMS_ARRAY_DSV;

typedef enum D3D12_DSV_FLAG
{
    D3D12_DSV_READ_ONLY_DEPTH = 0x1L,
    D3D12_DSV_READ_ONLY_STENCIL = 0x2L,
} D3D12_DSV_FLAG;

typedef enum D3D12_DSV_DIMENSION
{
    D3D12_DSV_DIMENSION_UNKNOWN = 0,
    D3D12_DSV_DIMENSION_TEXTURE1D = 1,
    D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2,
    D3D12_DSV_DIMENSION_TEXTURE2D = 3,
    D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4,
    D3D12_DSV_DIMENSION_TEXTURE2DMS = 5,
    D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6,
} D3D12_DSV_DIMENSION;

typedef struct D3D12_DEPTH_STENCIL_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_DSV_DIMENSION ViewDimension;
    UINT Flags; // D3D12_DSV_FLAG

    union
    {
        D3D12_TEX1D_DSV Texture1D;
        D3D12_TEX1D_ARRAY_DSV Texture1DArray;
        D3D12_TEX2D_DSV Texture2D;
        D3D12_TEX2D_ARRAY_DSV Texture2DArray;
        D3D12_TEX2DMS_DSV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    };
} D3D12_DEPTH_STENCIL_VIEW_DESC;

typedef enum D3D12_FENCE_MISC_FLAG
{
    D3D12_FENCE_MISC_NONE = 0x0,
    D3D12_FENCE_MISC_SHARED = 0x1,
} D3D12_FENCE_MISC_FLAG;
cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_FENCE_MISC_FLAG );" )


typedef struct D3D12_VIDEO_MEMORY_INFO
{
    UINT64  Budget;
    UINT64  CurrentUsage;
    UINT64  AvailableForReservation;
    UINT64  CurrentReservation;
} D3D12_VIDEO_MEMORY_INFO;

interface ID3D12Callback;

typedef void (*PFN_D3D12_BUDGET_CHANGED)(
    ID3D12Callback* pCallback,
    PVOID pContext,
    UINT64 Budget);

typedef enum D3D12_CREATE_DEVICE_FLAG
{
    D3D12_CREATE_DEVICE_NONE = 0x0,
    D3D12_CREATE_DEVICE_DEBUG = 0x1,
    D3D12_CREATE_DEVICE_SHADER_DEBUGGING = 0x2,
    D3D12_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x4,

} D3D12_CREATE_DEVICE_FLAG;
cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_CREATE_DEVICE_FLAG );" )

typedef enum D3D12_DESCRIPTOR_HEAP_TYPE
{
    D3D12_CBV_SRV_UAV_DESCRIPTOR_HEAP,
    D3D12_SAMPLER_DESCRIPTOR_HEAP,
    D3D12_IBV_DESCRIPTOR_HEAP,
    D3D12_VBV_DESCRIPTOR_HEAP,
    D3D12_SOV_DESCRIPTOR_HEAP,
    D3D12_RTV_DESCRIPTOR_HEAP,
    D3D12_DSV_DESCRIPTOR_HEAP,
    D3D12_NUM_DESCRIPTOR_HEAP_TYPES
} D3D12_DESCRIPTOR_HEAP_TYPE;

typedef enum D3D12_DESCRIPTOR_HEAP_FLAGS
{
    D3D12_DESCRIPTOR_HEAP_SHADER_VISIBLE = 0x1,
} D3D12_DESCRIPTOR_HEAP_FLAGS;

typedef struct D3D12_DESCRIPTOR_HEAP_DESC
{
    D3D12_DESCRIPTOR_HEAP_TYPE Type;
    UINT NumDescriptors;
    UINT Flags;
} D3D12_DESCRIPTOR_HEAP_DESC;

typedef enum D3D12_DESCRIPTOR_RANGE_TYPE
{
    D3D12_DESCRIPTOR_RANGE_SRV,
    D3D12_DESCRIPTOR_RANGE_UAV,
    D3D12_DESCRIPTOR_RANGE_CBV,
    D3D12_DESCRIPTOR_RANGE_SAMPLER
} D3D12_DESCRIPTOR_RANGE_TYPE;

const UINT D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = -1;

cpp_quote("#if defined( __cplusplus )")
cpp_quote("}") // extern C
cpp_quote("typedef struct D3D12_DESCRIPTOR_RANGE")
cpp_quote("{")
cpp_quote("    D3D12_DESCRIPTOR_RANGE_TYPE RangeType;")
cpp_quote("    UINT NumDescriptors;")
cpp_quote("    UINT BaseShaderRegister;")
cpp_quote("    UINT RegisterSpace; ")
cpp_quote("    UINT OffsetInDescriptorsFromTableStart;")
cpp_quote("")
cpp_quote("    void Init(")
cpp_quote("        D3D12_DESCRIPTOR_RANGE_TYPE rangeType,")
cpp_quote("        UINT numDescriptors,")
cpp_quote("        UINT baseShaderRegister,")
cpp_quote("        UINT registerSpace = 0,")
cpp_quote("        UINT offsetInDescriptorsFromTableStart =")
cpp_quote("        D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)")
cpp_quote("    {")
cpp_quote("        RangeType = rangeType;")
cpp_quote("        NumDescriptors = numDescriptors;")
cpp_quote("        BaseShaderRegister = baseShaderRegister;")
cpp_quote("        RegisterSpace = registerSpace;")
cpp_quote("        OffsetInDescriptorsFromTableStart = offsetInDescriptorsFromTableStart;")
cpp_quote("    }")
cpp_quote("} D3D12_DESCRIPTOR_RANGE;")
cpp_quote("extern \"C\"{")
cpp_quote("#else")
typedef struct D3D12_DESCRIPTOR_RANGE
{
    D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
    UINT NumDescriptors;
    UINT BaseShaderRegister;
    UINT RegisterSpace;
    UINT OffsetInDescriptorsFromTableStart;
} D3D12_DESCRIPTOR_RANGE;
cpp_quote("#endif")


cpp_quote("#if defined( __cplusplus )")
cpp_quote("}") // extern C
cpp_quote("typedef struct D3D12_ROOT_DESCRIPTOR_TABLE")
cpp_quote("{")
cpp_quote("    UINT NumDescriptorRanges;")
cpp_quote("    const D3D12_DESCRIPTOR_RANGE* pDescriptorRanges;")
cpp_quote("")
cpp_quote("    void Init(")
cpp_quote("        UINT numDescriptorRanges,")
cpp_quote("        const D3D12_DESCRIPTOR_RANGE* _pDescriptorRanges)")
cpp_quote("    {")
cpp_quote("        NumDescriptorRanges = numDescriptorRanges;")
cpp_quote("        pDescriptorRanges = _pDescriptorRanges;")
cpp_quote("    }")
cpp_quote("} D3D12_ROOT_DESCRIPTOR_TABLE;")
cpp_quote("extern \"C\"{")
cpp_quote("#else")
typedef struct D3D12_ROOT_DESCRIPTOR_TABLE
{
    UINT NumDescriptorRanges;
    const D3D12_DESCRIPTOR_RANGE* pDescriptorRanges;
} D3D12_ROOT_DESCRIPTOR_TABLE;
cpp_quote("#endif")


cpp_quote("#if defined( __cplusplus )")
cpp_quote("}") // extern C
cpp_quote("typedef struct D3D12_ROOT_CONSTANTS")
cpp_quote("{")
cpp_quote("    UINT ShaderRegister;")
cpp_quote("    UINT RegisterSpace;")
cpp_quote("    UINT Num32BitValues;")
cpp_quote("")
cpp_quote("    void Init(")
cpp_quote("        UINT num32BitValues,")
cpp_quote("        UINT shaderRegister,")
cpp_quote("        UINT registerSpace = 0)")
cpp_quote("    {")
cpp_quote("        Num32BitValues = num32BitValues;")
cpp_quote("        ShaderRegister = shaderRegister;")
cpp_quote("        RegisterSpace = registerSpace;")
cpp_quote("    }")
cpp_quote("} D3D12_ROOT_CONSTANTS;")
cpp_quote("extern \"C\"{")
cpp_quote("#else")
typedef struct D3D12_ROOT_CONSTANTS
{
    UINT ShaderRegister;
    UINT RegisterSpace;
    UINT Num32BitValues;
} D3D12_ROOT_CONSTANTS;
cpp_quote("#endif")

cpp_quote("#if defined( __cplusplus )")
cpp_quote("}") // extern C
cpp_quote("typedef struct D3D12_ROOT_DESCRIPTOR")
cpp_quote("{")
cpp_quote("    UINT ShaderRegister;")
cpp_quote("    UINT RegisterSpace;")
cpp_quote("")
cpp_quote("    void Init(")
cpp_quote("        UINT shaderRegister,")
cpp_quote("        UINT registerSpace = 0)")
cpp_quote("    {")
cpp_quote("        ShaderRegister = shaderRegister;")
cpp_quote("        RegisterSpace = registerSpace;")
cpp_quote("    }")
cpp_quote("} D3D12_ROOT_DESCRIPTOR;")
cpp_quote("extern \"C\"{")
cpp_quote("#else")
typedef struct D3D12_ROOT_DESCRIPTOR
{
    UINT ShaderRegister;
    UINT RegisterSpace;
} D3D12_ROOT_DESCRIPTOR;
cpp_quote("#endif")

typedef enum D3D12_SHADER_VISIBILITY
{
    D3D12_SHADER_VISIBILITY_ALL = 0,
    D3D12_SHADER_VISIBILITY_VERTEX = 1,
    D3D12_SHADER_VISIBILITY_HULL = 2,
    D3D12_SHADER_VISIBILITY_DOMAIN = 3,
    D3D12_SHADER_VISIBILITY_GEOMETRY = 4,
    D3D12_SHADER_VISIBILITY_PIXEL = 5
} D3D12_SHADER_VISIBILITY;

typedef enum D3D12_ROOT_PARAMETER_TYPE
{
    D3D12_ROOT_PARAMETER_DESCRIPTOR_TABLE,
    D3D12_ROOT_PARAMETER_32BIT_CONSTANTS,
    D3D12_ROOT_PARAMETER_CBV,
    D3D12_ROOT_PARAMETER_SRV,
    D3D12_ROOT_PARAMETER_UAV
} D3D12_ROOT_PARAMETER_TYPE;

cpp_quote("#if defined( __cplusplus )")
cpp_quote("}") // extern C
cpp_quote("typedef struct D3D12_ROOT_PARAMETER")
cpp_quote("{")
cpp_quote("    D3D12_ROOT_PARAMETER_TYPE ParameterType;")
cpp_quote("    union")
cpp_quote("    {")
cpp_quote("        D3D12_ROOT_DESCRIPTOR_TABLE    DescriptorTable;")
cpp_quote("        D3D12_ROOT_CONSTANTS           Constants;")
cpp_quote("        D3D12_ROOT_DESCRIPTOR          Descriptor;")
cpp_quote("    };")
cpp_quote("    D3D12_SHADER_VISIBILITY ShaderVisibility;")
cpp_quote("")
cpp_quote("    void InitAsDescriptorTable(")
cpp_quote("        UINT numDescriptorRanges,")
cpp_quote("        const D3D12_DESCRIPTOR_RANGE* pDescriptorRanges,")
cpp_quote("        D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)")
cpp_quote("    {")
cpp_quote("        ParameterType = D3D12_ROOT_PARAMETER_DESCRIPTOR_TABLE;")
cpp_quote("        ShaderVisibility = visibility;")
cpp_quote("        DescriptorTable.Init(numDescriptorRanges, pDescriptorRanges);")
cpp_quote("    }")
cpp_quote("")
cpp_quote("    void InitAsConstants(")
cpp_quote("        UINT num32BitValues,")
cpp_quote("        UINT shaderRegister,")
cpp_quote("        UINT registerSpace = 0,")
cpp_quote("        D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)")
cpp_quote("    {")
cpp_quote("        ParameterType = D3D12_ROOT_PARAMETER_32BIT_CONSTANTS;")
cpp_quote("        ShaderVisibility = visibility;")
cpp_quote("        Constants.Init(num32BitValues, shaderRegister, registerSpace);")
cpp_quote("    }")
cpp_quote("")
cpp_quote("    void InitAsConstantBufferView(")
cpp_quote("        UINT shaderRegister,")
cpp_quote("        UINT registerSpace = 0,")
cpp_quote("        D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)")
cpp_quote("    {")
cpp_quote("        ParameterType = D3D12_ROOT_PARAMETER_CBV;")
cpp_quote("        ShaderVisibility = visibility;")
cpp_quote("        Descriptor.Init(shaderRegister, registerSpace);")
cpp_quote("    }")
cpp_quote("")
cpp_quote("    void InitAsShaderResourceView(")
cpp_quote("        UINT shaderRegister,")
cpp_quote("        UINT registerSpace = 0,")
cpp_quote("        D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)")
cpp_quote("    {")
cpp_quote("        ParameterType = D3D12_ROOT_PARAMETER_SRV;")
cpp_quote("        ShaderVisibility = visibility;")
cpp_quote("        Descriptor.Init(shaderRegister, registerSpace);")
cpp_quote("    }")
cpp_quote("")
cpp_quote("    void InitAsUnorderedAccessView(")
cpp_quote("        UINT shaderRegister,")
cpp_quote("        UINT registerSpace = 0,")
cpp_quote("        D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)")
cpp_quote("    {")
cpp_quote("        ParameterType = D3D12_ROOT_PARAMETER_UAV;")
cpp_quote("        ShaderVisibility = visibility;")
cpp_quote("        Descriptor.Init(shaderRegister, registerSpace);")
cpp_quote("    }")
cpp_quote("} D3D12_ROOT_PARAMETER;")
cpp_quote("extern \"C\"{")
cpp_quote("#else")
typedef struct D3D12_ROOT_PARAMETER
{
    D3D12_ROOT_PARAMETER_TYPE ParameterType;
    union
    {
        D3D12_ROOT_DESCRIPTOR_TABLE    DescriptorTable;
        D3D12_ROOT_CONSTANTS           Constants;
        D3D12_ROOT_DESCRIPTOR          Descriptor;
    };
    D3D12_SHADER_VISIBILITY ShaderVisibility;
} D3D12_ROOT_PARAMETER;
cpp_quote("#endif")

typedef enum D3D12_ROOT_SIGNATURE_FLAGS
{
    D3D12_ROOT_SIGNATURE_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 0x1,
    D3D12_ROOT_SIGNATURE_DENY_VERTEX_SHADER_ROOT_ACCESS = 0x2,
    D3D12_ROOT_SIGNATURE_DENY_HULL_SHADER_ROOT_ACCESS = 0x4,
    D3D12_ROOT_SIGNATURE_DENY_DOMAIN_SHADER_ROOT_ACCESS = 0x8,
    D3D12_ROOT_SIGNATURE_DENY_GEOMETRY_SHADER_ROOT_ACCESS = 0x10,
    D3D12_ROOT_SIGNATURE_DENY_PIXEL_SHADER_ROOT_ACCESS = 0x20,
} D3D12_ROOT_SIGNATURE_FLAGS;

cpp_quote("#if defined( __cplusplus )")
cpp_quote("}") // extern C
cpp_quote("typedef struct D3D12_ROOT_SIGNATURE")
cpp_quote("{")
cpp_quote("    UINT NumParameters;")
cpp_quote("    const D3D12_ROOT_PARAMETER* pParameters;")
cpp_quote("    UINT Flags;")
cpp_quote("")
cpp_quote("    // Initialize struct")
cpp_quote("    void Init(")
cpp_quote("        UINT numParameters,")
cpp_quote("        const D3D12_ROOT_PARAMETER* _pParameters,")
cpp_quote("        UINT flags = 0)")
cpp_quote("    {")
cpp_quote("        NumParameters = numParameters;")
cpp_quote("        pParameters = _pParameters;")
cpp_quote("        Flags = flags;")
cpp_quote("    }")
cpp_quote("")
cpp_quote("    D3D12_ROOT_SIGNATURE() { Init(0,NULL,0);}")
cpp_quote("")
cpp_quote("    D3D12_ROOT_SIGNATURE(")
cpp_quote("        UINT numParameters,")
cpp_quote("        const D3D12_ROOT_PARAMETER* _pParameters,")
cpp_quote("        UINT flags = 0)")
cpp_quote("    {")
cpp_quote("        Init(numParameters, _pParameters, flags);")
cpp_quote("    }")
cpp_quote("} D3D12_ROOT_SIGNATURE;")
cpp_quote("extern \"C\"{")
cpp_quote("#else")
typedef struct D3D12_ROOT_SIGNATURE
{
    UINT NumParameters;
    const D3D12_ROOT_PARAMETER* pParameters;
    UINT Flags;
} D3D12_ROOT_SIGNATURE;
cpp_quote("#endif")


typedef enum D3D_ROOT_SIGNATURE_VERSION
{
    D3D_ROOT_SIGNATURE_V1 = 0x1,
} D3D_ROOT_SIGNATURE_VERSION;

[ uuid( 34AB647B-3CC8-46AC-841B-C0965645C046 ), object, local, pointer_default( unique ) ]
interface ID3D12RootSignatureDeserializer
    : IUnknown
{
    const D3D12_ROOT_SIGNATURE * GetRootSignature();
};

cpp_quote( "typedef HRESULT (WINAPI* PFN_D3D12_SERIALIZE_ROOT_SIGNATURE)(")
cpp_quote( "                            _In_ const D3D12_ROOT_SIGNATURE* pRootSignature," )
cpp_quote( "                            _In_ D3D_ROOT_SIGNATURE_VERSION Version," )
cpp_quote( "                            _Out_ ID3DBlob** ppBlob," )
cpp_quote( "                            _Always_(_Outptr_opt_result_maybenull_) ID3DBlob** ppErrorBlob);" )
cpp_quote( "" )
cpp_quote( "HRESULT WINAPI D3D12SerializeRootSignature(")
cpp_quote( "                            _In_ const D3D12_ROOT_SIGNATURE* pRootSignature," )
cpp_quote( "                            _In_ D3D_ROOT_SIGNATURE_VERSION Version," )
cpp_quote( "                            _Out_ ID3DBlob** ppBlob," )
cpp_quote( "                            _Always_(_Outptr_opt_result_maybenull_) ID3DBlob** ppErrorBlob);" )
cpp_quote( "" )
cpp_quote( "typedef HRESULT (WINAPI* PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER)(")
cpp_quote( "                                     _In_reads_bytes_(SrcDataSizeInBytes) LPCVOID pSrcData," )
cpp_quote( "                                     _In_ SIZE_T SrcDataSizeInBytes," )
cpp_quote( "                                     _In_ REFIID pRootSignatureDeserializerInterface," )
cpp_quote( "                                     _Out_ void** ppRootSignatureDeserializer);" )
cpp_quote( "" )
cpp_quote( "HRESULT WINAPI D3D12CreateRootSignatureDeserializer(")
cpp_quote( "                                     _In_reads_bytes_(SrcDataSizeInBytes) LPCVOID pSrcData," )
cpp_quote( "                                     _In_ SIZE_T SrcDataSizeInBytes," )
cpp_quote( "                                     _In_ REFIID pRootSignatureDeserializerInterface," )
cpp_quote( "                                     _Out_ void** ppRootSignatureDeserializer);" )




cpp_quote("#if defined( __cplusplus )")
cpp_quote("}") // extern C
cpp_quote("typedef struct D3D12_CPU_DESCRIPTOR_HANDLE")
cpp_quote("{")
cpp_quote("    SIZE_T ptr;")
cpp_quote("")
cpp_quote("    D3D12_CPU_DESCRIPTOR_HANDLE MakeOffsetted(INT offsetInDecriptors, UINT descriptorIncrementSize) const ")
cpp_quote("    { ")
cpp_quote("        D3D12_CPU_DESCRIPTOR_HANDLE offsetted;")
cpp_quote("        offsetted.ptr = ptr + offsetInDecriptors * descriptorIncrementSize;")
cpp_quote("        return offsetted;")
cpp_quote("    }")
cpp_quote("    D3D12_CPU_DESCRIPTOR_HANDLE MakeOffsetted(INT offsetScaledByIncrementSize) const ")
cpp_quote("    { ")
cpp_quote("        D3D12_CPU_DESCRIPTOR_HANDLE offsetted;")
cpp_quote("        offsetted.ptr = ptr + offsetScaledByIncrementSize;")
cpp_quote("        return offsetted;")
cpp_quote("    }")
cpp_quote("    D3D12_CPU_DESCRIPTOR_HANDLE& Offset(INT offsetInDecriptors, UINT descriptorIncrementSize)")
cpp_quote("    { ")
cpp_quote("        ptr += offsetInDecriptors * descriptorIncrementSize;")
cpp_quote("        return *this;")
cpp_quote("    }")
cpp_quote("    D3D12_CPU_DESCRIPTOR_HANDLE& Offset(INT offsetScaledByIncrementSize) ")
cpp_quote("    { ")
cpp_quote("        ptr += offsetScaledByIncrementSize;")
cpp_quote("        return *this;")
cpp_quote("    }")
cpp_quote("")
cpp_quote("} D3D12_CPU_DESCRIPTOR_HANDLE;")
cpp_quote("extern \"C\"{")
cpp_quote("#else")
typedef struct D3D12_CPU_DESCRIPTOR_HANDLE
{
    SIZE_T ptr;
} D3D12_CPU_DESCRIPTOR_HANDLE; 
cpp_quote("#endif")


cpp_quote("#if defined( __cplusplus )")
cpp_quote("}") // extern C
cpp_quote("typedef struct D3D12_GPU_DESCRIPTOR_HANDLE")
cpp_quote("{")
cpp_quote("    UINT64 ptr;")
cpp_quote("")
cpp_quote("    D3D12_GPU_DESCRIPTOR_HANDLE MakeOffsetted(INT offsetInDecriptors, UINT descriptorIncrementSize) const ")
cpp_quote("    { ")
cpp_quote("        D3D12_GPU_DESCRIPTOR_HANDLE offsetted;")
cpp_quote("        offsetted.ptr = ptr + offsetInDecriptors * descriptorIncrementSize;")
cpp_quote("        return offsetted;")
cpp_quote("    }")
cpp_quote("    D3D12_GPU_DESCRIPTOR_HANDLE MakeOffsetted(INT offsetScaledByIncrementSize) const ")
cpp_quote("    { ")
cpp_quote("        D3D12_GPU_DESCRIPTOR_HANDLE offsetted;")
cpp_quote("        offsetted.ptr = ptr + offsetScaledByIncrementSize;")
cpp_quote("        return offsetted;")
cpp_quote("    }")
cpp_quote("    D3D12_GPU_DESCRIPTOR_HANDLE& Offset(INT offsetInDecriptors, UINT descriptorIncrementSize)")
cpp_quote("    { ")
cpp_quote("        ptr += offsetInDecriptors * descriptorIncrementSize;")
cpp_quote("        return *this;")
cpp_quote("    }")
cpp_quote("    D3D12_GPU_DESCRIPTOR_HANDLE& Offset(INT offsetScaledByIncrementSize) ")
cpp_quote("    { ")
cpp_quote("        ptr += offsetScaledByIncrementSize;")
cpp_quote("        return *this;")
cpp_quote("    }")
cpp_quote("")
cpp_quote("} D3D12_GPU_DESCRIPTOR_HANDLE;")
cpp_quote("extern \"C\"{")
cpp_quote("#else")
typedef struct D3D12_GPU_DESCRIPTOR_HANDLE
{
    UINT64 ptr;
} D3D12_GPU_DESCRIPTOR_HANDLE;
cpp_quote("#endif")

cpp_quote( "// If rects are supplied in D3D12_DISCARD_RESOURCE_DESC, below, the resource " )
cpp_quote( "// must have 2D subresources with all specified subresources the same dimension." )
typedef struct D3D12_DISCARD_RESOURCE_DESC
{
    [annotation("_In_reads_(NumRects)")] const D3D12_RECT *pRects;
    UINT NumRects;
    UINT FirstSubresource;
    UINT NumSubresources;
} D3D12_DISCARD_RESOURCE_DESC;

cpp_quote( "" )
cpp_quote( "///////////////////////////////////////////////////////////////////////////" )
cpp_quote( "// D3D12CreateDevice" )
cpp_quote( "// ------------------" )
cpp_quote( "//" )
cpp_quote( "// pAdapter" )
cpp_quote( "//      If NULL, D3D12CreateDevice will choose the primary adapter and" )
cpp_quote( "//      create a new instance from a temporarily created IDXGIFactory." )
cpp_quote( "//      If non-NULL, D3D12CreateDevice will use the provided adapter." )
cpp_quote( "// DriverType" )
cpp_quote( "//      Specifies the driver type to be created: hardware or WARP" )
cpp_quote( "// Flags" )
cpp_quote( "//      Any of those documented for D3D12CreateDeviceAndSwapChain." )
cpp_quote( "// MinimumFeatureLevel" )
cpp_quote( "//      The minimum feature level required for successful device creation." )
cpp_quote( "// SDKVersion" )
cpp_quote( "//      SDK version. Use the D3D12_SDK_VERSION macro." )
cpp_quote( "// riid" )
cpp_quote( "//      The interface IID of the device to be returned. Expected: ID3D12Device." )
cpp_quote( "// ppDevice" )
cpp_quote( "//      Pointer to returned interface. May be NULL." )
cpp_quote( "// pFeatureLevel" )
cpp_quote( "//      Pointer to returned feature level. May be NULL." )
cpp_quote( "//" )
cpp_quote( "// Return Values" )
cpp_quote( "//  Any of those documented for " )
cpp_quote( "//          CreateDXGIFactory1" )
cpp_quote( "//          IDXGIFactory::EnumAdapters" )
cpp_quote( "//          D3D12CreateDevice" )
cpp_quote( "//" )
cpp_quote( "///////////////////////////////////////////////////////////////////////////" )
cpp_quote( "typedef HRESULT (WINAPI* PFN_D3D12_CREATE_DEVICE)( _In_opt_ IDXGIAdapter*, " )
cpp_quote( "    D3D_DRIVER_TYPE, D3D12_CREATE_DEVICE_FLAG, " )
cpp_quote( "    D3D_FEATURE_LEVEL, " )
cpp_quote( "    UINT, _In_ REFIID, _COM_Outptr_opt_ void** );" )
cpp_quote( "" )
cpp_quote( "HRESULT WINAPI D3D12CreateDevice(" )
cpp_quote( "    _In_opt_ IDXGIAdapter* pAdapter," )
cpp_quote( "    D3D_DRIVER_TYPE DriverType," )
cpp_quote( "    D3D12_CREATE_DEVICE_FLAG Flags,")
cpp_quote( "    D3D_FEATURE_LEVEL MinimumFeatureLevel," )
cpp_quote( "    UINT SDKVersion," )
cpp_quote( "    _In_ REFIID riid, // Expected: ID3D12Device" )
cpp_quote( "    _COM_Outptr_opt_ void** ppDevice );" )
cpp_quote( "" )

cpp_quote( "" )
cpp_quote( "///////////////////////////////////////////////////////////////////////////" )
cpp_quote( "// D3D11CreateDeviceForD3D12" )
cpp_quote( "// ------------------" )
cpp_quote( "//" )
cpp_quote( "// pDevice" )
cpp_quote( "//      Specifies a pre-existing D3D12 device to use for D3D11 interop." )
cpp_quote( "//      May not be NULL." )
cpp_quote( "// Flags" )
cpp_quote( "//      Any of those documented for D3D11CreateDeviceAndSwapChain." )
cpp_quote( "// pFeatureLevels" )
cpp_quote( "//      Array of any of the following:" )
cpp_quote( "//          D3D_FEATURE_LEVEL_11_1" )
cpp_quote( "//          D3D_FEATURE_LEVEL_11_0" )
cpp_quote( "//          D3D_FEATURE_LEVEL_10_1" )
cpp_quote( "//          D3D_FEATURE_LEVEL_10_0" )
cpp_quote( "//          D3D_FEATURE_LEVEL_9_3" )
cpp_quote( "//          D3D_FEATURE_LEVEL_9_2" )
cpp_quote( "//          D3D_FEATURE_LEVEL_9_1" )
cpp_quote( "//       The first feature level which is less than or equal to the" )
cpp_quote( "//       D3D12 device's feature level will be used to perform D3D11 validation." )
cpp_quote( "//       Creation will fail if no acceptable feature levels are provided." )
cpp_quote( "//       Providing NULL will default to the D3D12 device's feature level." )
cpp_quote( "// FeatureLevels" )
cpp_quote( "//      Size of feature levels array." )
cpp_quote( "// SDKVersion" )
cpp_quote( "//      SDK version. Use the D3D11_SDK_VERSION macro." )
cpp_quote( "// ppDevice" )
cpp_quote( "//      Pointer to returned interface. May be NULL." )
cpp_quote( "// ppImmediateContext" )
cpp_quote( "//      Pointer to returned interface. May be NULL." )
cpp_quote( "// pChosenFeatureLevel" )
cpp_quote( "//      Pointer to returned feature level. May be NULL." )
cpp_quote( "//" )
cpp_quote( "// Return Values" )
cpp_quote( "//  Any of those documented for " )
cpp_quote( "//          D3D11CreateDevice" )
cpp_quote( "//" )
cpp_quote( "///////////////////////////////////////////////////////////////////////////" )
cpp_quote( "typedef HRESULT (WINAPI* PFN_D3D11_CREATE_DEVICE_FOR_D3D12)( _In_ IUnknown*, UINT, " )
cpp_quote( "    _In_reads_opt_( FeatureLevels ) CONST D3D_FEATURE_LEVEL*, " )
cpp_quote( "    UINT FeatureLevels, UINT, _COM_Outptr_opt_ ID3D11Device**, _COM_Outptr_opt_ ID3D11DeviceContext**, " )
cpp_quote( "    _Out_opt_ D3D_FEATURE_LEVEL* );" )
cpp_quote( "" )
cpp_quote( "HRESULT WINAPI D3D11CreateDeviceForD3D12(" )
cpp_quote( "    _In_ IUnknown* pDevice," )
cpp_quote( "    UINT Flags," )
cpp_quote( "    _In_reads_opt_( FeatureLevels ) CONST D3D_FEATURE_LEVEL* pFeatureLevels," )
cpp_quote( "    UINT FeatureLevels," )
cpp_quote( "    UINT SDKVersion," )
cpp_quote( "    _COM_Outptr_opt_ ID3D11Device** ppDevice," )
cpp_quote( "    _COM_Outptr_opt_ ID3D11DeviceContext** ppImmediateContext," )
cpp_quote( "    _Out_opt_ D3D_FEATURE_LEVEL* pChosenFeatureLevel );" )
cpp_quote( "" )

#pragma region Desktop Family
cpp_quote( "#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")

cpp_quote( "///////////////////////////////////////////////////////////////////////////" )
cpp_quote( "// D3D12CreateDeviceAndSwapChain" )
cpp_quote( "// ------------------------------" )
cpp_quote( "//" )
cpp_quote( "// pAdapter" )
cpp_quote( "//      If NULL, D3D12CreateDevice will choose the primary adapter and" )
cpp_quote( "//      create a new instance from a temporarily created IDXGIFactory." )
cpp_quote( "//      If non-NULL, D3D12CreateDevice will use the provided adapter." )
cpp_quote( "// DriverType" )
cpp_quote( "//      Specifies the driver type to be created: hardware or WARP" )
cpp_quote( "// Flags" )
cpp_quote( "//      Any of those documented for D3D12CreateDevice." )
cpp_quote( "// MinimumFeatureLevels" )
cpp_quote( "//      Any of the following:" )
cpp_quote( "//          D3D_FEATURE_LEVEL_11_1" )
cpp_quote( "//          D3D_FEATURE_LEVEL_11_0" )
cpp_quote( "//          D3D_FEATURE_LEVEL_10_1" )
cpp_quote( "//          D3D_FEATURE_LEVEL_10_0" )
cpp_quote( "//          D3D_FEATURE_LEVEL_9_3" )
cpp_quote( "//          D3D_FEATURE_LEVEL_9_2" )
cpp_quote( "//          D3D_FEATURE_LEVEL_9_1" )
cpp_quote( "//      The D3D12 runtime will always choose the best feature level that" )
cpp_quote( "//      is supported by the hardware. Use this parameter to indicate a" )
cpp_quote( "//      minimum feature level required for successful device creation." )
cpp_quote( "// SDKVersion" )
cpp_quote( "//      SDK version. Use the D3D12_SDK_VERSION macro." )
cpp_quote( "// pSwapChainDesc" )
cpp_quote( "//      Swap chain description, may be NULL." )
cpp_quote( "// ppSwapChain" )
cpp_quote( "//      Pointer to returned interface. May be NULL." )
cpp_quote( "// ppDevice" )
cpp_quote( "//      Pointer to returned interface. May be NULL." )
cpp_quote( "// pFeatureLevel" )
cpp_quote( "//      Pointer to returned feature level. May be NULL." )
cpp_quote( "//" )
cpp_quote( "// Return Values" )
cpp_quote( "//  Any of those documented for " )
cpp_quote( "//          CreateDXGIFactory1" )
cpp_quote( "//          IDXGIFactory::EnumAdapters" )
cpp_quote( "//          IDXGIAdapter::RegisterDriver" )
cpp_quote( "//          D3D12CreateDevice" )
cpp_quote( "//          IDXGIFactory::CreateSwapChain" )
cpp_quote( "//" )
cpp_quote( "///////////////////////////////////////////////////////////////////////////" )
cpp_quote( "typedef HRESULT (WINAPI* PFN_D3D12_CREATE_DEVICE_AND_SWAP_CHAIN)( _In_opt_ IDXGIAdapter*, " )
cpp_quote( "    D3D_DRIVER_TYPE, HMODULE, UINT, " )
cpp_quote( "    D3D_FEATURE_LEVEL, UINT, _In_opt_ CONST DXGI_SWAP_CHAIN_DESC*, " )
cpp_quote( "    _In_ REFIID, _COM_Outptr_opt_ void**, " )
cpp_quote( "    _In_ REFIID, _COM_Outptr_opt_ void** );" )
cpp_quote( "" )
cpp_quote( "HRESULT WINAPI D3D12CreateDeviceAndSwapChain(" )
cpp_quote( "    _In_opt_ IDXGIAdapter* pAdapter," )
cpp_quote( "    D3D_DRIVER_TYPE DriverType," )
cpp_quote( "    D3D12_CREATE_DEVICE_FLAG Flags,")
cpp_quote( "    D3D_FEATURE_LEVEL MinimumFeatureLevel," )
cpp_quote( "    UINT SDKVersion," )
cpp_quote( "    _In_opt_ CONST DXGI_SWAP_CHAIN_DESC* pSwapChainDesc," )
cpp_quote( "    _In_ REFIID riidSwapchain, // Expected: IDXGISwapChain" )
cpp_quote( "    _COM_Outptr_opt_ void** ppSwapChain," )
cpp_quote( "    _In_ REFIID riidDevice, // Expected: ID3D12Device" )
cpp_quote( "    _COM_Outptr_opt_ void** ppDevice );" )
cpp_quote( "" )

cpp_quote( "#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */")
#pragma endregion

const UINT D3D12_SDK_VERSION = 12;

interface ID3D12Device;

[ uuid( c4fec28f-7966-4e95-9f94-f431cb56c3b8 ), object, local, pointer_default( unique ) ]
interface ID3D12Object
    : IUnknown
{
    HRESULT GetPrivateData(
        [annotation("_In_")] REFGUID guid,
        [annotation("_Inout_")] UINT* pDataSize,
        [annotation("_Out_writes_bytes_opt_( *pDataSize )")] void* pData );
    HRESULT SetPrivateData(
        [annotation("_In_")] REFGUID guid,
        [annotation("_In_")] UINT DataSize,
        [annotation("_In_reads_bytes_opt_( DataSize )")] const void* pData );
    HRESULT SetPrivateDataInterface(
        [annotation("_In_")] REFGUID guid,
        [annotation("_In_opt_")] const IUnknown* pData );
    HRESULT SetName(
        [annotation("_In_z_")] LPCWSTR pName );
}

[ uuid( 905db94b-a00c-4140-9df5-2b64ca9ea357 ), object, local, pointer_default( unique ) ]
interface ID3D12DeviceChild
    : ID3D12Object
{
    void GetDevice( [annotation("_Out_")] ID3D12Device** ppDevice );
}

[ uuid( 63ee58fb-1268-4835-86da-f008ce62f0d6 ), object, local, pointer_default( unique ) ]
interface ID3D12Pageable
    : ID3D12DeviceChild
{
}

[ uuid( f98f3ba4-e608-4cf6-9e29-a14e50d4929d ), object, local, pointer_default( unique ) ]
interface ID3D12Heap
    : ID3D12Pageable
{
    D3D12_HEAP_DESC GetDesc();
}

[ uuid( 696442be-a72e-4059-bc79-5b5c98040fad ), object, local, pointer_default( unique ) ]
interface ID3D12Resource
    : ID3D12Pageable
{
    HRESULT Map(
        [annotation("_In_opt_")] const D3D12_RANGE* pReadRange,
        [annotation("_Outptr_")] void** ppData );

    void Unmap( [annotation("_In_opt_")] const D3D12_RANGE* pWrittenRange );

    D3D12_RESOURCE_DESC GetDesc();
}

[ uuid( 6102dee4-af59-4b09-b999-b44d73f09b24 ), object, local, pointer_default( unique ) ]
interface ID3D12CommandAllocator
    : ID3D12Pageable
{
    HRESULT Reset();
}

[ uuid( 0a753dcf-c4d8-4b91-adf6-be5a60d95a76 ), object, local, pointer_default( unique ) ]
interface ID3D12Fence 
    : ID3D12Pageable
{
    UINT64 GetCompletedValue();
    HRESULT SetEventOnCompletion(UINT64 Value, HANDLE hEvent);
    HRESULT Signal(UINT64 Value);
};

[ uuid( 765a30f3-f624-4c6f-a828-ace948622445 ), object, local, pointer_default( unique ) ]
interface ID3D12PipelineState
    : ID3D12Pageable
{
}

[ uuid( 3c2922d5-f9eb-41a8-9a15-9e707610984a ), object, local, pointer_default( unique ) ]
interface ID3D12DescriptorHeap
    : ID3D12Pageable
{
    void GetDesc([annotation("_Out_")] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc);

    D3D12_CPU_DESCRIPTOR_HANDLE GetCPUDescriptorHandleForHeapStart();
    D3D12_GPU_DESCRIPTOR_HANDLE GetGPUDescriptorHandleForHeapStart();
}

[ uuid( 168b7173-ba23-4bc8-9ff9-ee1db88afb20 ), object, local, pointer_default( unique ) ]
interface ID3D12CommandList
    : ID3D12DeviceChild
{
    HRESULT Close();

    HRESULT Reset(
        [annotation("_In_")] ID3D12CommandAllocator* pAllocator,
        [annotation("_In_opt_")] ID3D12PipelineState* pInitialState
        );

    void ClearState(
        [annotation("_In_")] ID3D12PipelineState *pPipelineState
        );

    void DrawInstanced(
        [annotation("_In_")] UINT VertexCountPerInstance,
        [annotation("_In_")] UINT InstanceCount,
        [annotation("_In_")] UINT StartVertexLocation,
        [annotation("_In_")] UINT StartInstanceLocation
        );

    void DrawIndexedInstanced(
        [annotation("_In_")] UINT IndexCountPerInstance,
        [annotation("_In_")] UINT InstanceCount,
        [annotation("_In_")] UINT StartIndexLocation,
        [annotation("_In_")] INT BaseVertexLocation,
        [annotation("_In_")] UINT StartInstanceLocation
        );

    void DrawInstancedIndirect(
        [annotation("_In_")] ID3D12Resource *pBufferForArgs,
        [annotation("_In_")] UINT AlignedByteOffsetForArgs
        );

    void DrawIndexedInstancedIndirect(
        [annotation("_In_")] ID3D12Resource *pBufferForArgs,
        [annotation("_In_")] UINT AlignedByteOffsetForArgs
        );

    void DrawAuto();

    void Dispatch(
        [annotation("_In_")] UINT ThreadGroupCountX,
        [annotation("_In_")] UINT ThreadGroupCountY,
        [annotation("_In_")] UINT ThreadGroupCountZ
        );

    void DispatchIndirect(
        [annotation("_In_")] ID3D12Resource *pBufferForArgs,
        [annotation("_In_")] UINT AlignedByteOffsetForArgs
        );

    void CopySubresourceRegion(
        [annotation("_In_")] ID3D12Resource *pDstResource,
        D3D12_SUBRESOURCE_VIEW_TYPE DstViewType,
        [annotation("_In_")] const void *pDstViewDesc,
        UINT DstX, UINT DstY, UINT DstZ,
        [annotation("_In_")] ID3D12Resource *pSrcResource,
        D3D12_SUBRESOURCE_VIEW_TYPE SrcViewType,
        [annotation("_In_")] const void *pSrcViewDesc,
        [annotation("_In_opt_")] const D3D12_BOX *pSrcBox,
        D3D12_COPY_FLAGS CopyFlags );

    void CopyResource(
        [annotation("_In_")] ID3D12Resource *pDstResource,
        [annotation("_In_")] ID3D12Resource *pSrcResource
        );

    void CopyTiles(
        [annotation("_In_")] ID3D12Resource *pTiledResource,
        [annotation("_In_")] const D3D12_TILED_RESOURCE_COORDINATE *pTileRegionStartCoordinate,
        [annotation("_In_")] const D3D12_TILE_REGION_SIZE *pTileRegionSize,
        [annotation("_In_")] ID3D12Resource *pBuffer,
        UINT64 BufferStartOffsetInBytes,
        D3D12_TILE_COPY_FLAG Flags
        );

    void ResolveSubresource(
        [annotation("_In_")] ID3D12Resource *pDstResource,
        [annotation("_In_")] UINT DstSubresource,
        [annotation("_In_")] ID3D12Resource *pSrcResource,
        [annotation("_In_")] UINT SrcSubresource,
        [annotation("_In_")] DXGI_FORMAT Format
        );

    void IASetPrimitiveTopology(
        [annotation("_In_")] D3D11_PRIMITIVE_TOPOLOGY PrimitiveTopology
        );

    void RSSetViewports(
        [annotation("_In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)")] UINT Count,
        [annotation("_In_reads_( Count)")] const D3D12_VIEWPORT *pViewports
        );

    void RSSetScissorRects(
        [annotation("_In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)")] UINT Count,
        [annotation("_In_reads_( Count)")] const D3D12_RECT *pRects
        );

    void OMSetBlendFactor(
        [annotation("_In_opt_")] const FLOAT BlendFactor[ 4 ]
     );

    void OMSetStencilRef(
        [annotation("_In_")] UINT StencilRef
        );

    void SetPipelineState(
        [annotation("_In_")] ID3D12PipelineState *pPipelineState
        );

    void ResourceBarrier(
        [annotation("_In_")] UINT Count,
        [annotation("_In_reads_(Count)")] const D3D12_RESOURCE_BARRIER_DESC* pDesc
        );

    void ExecuteBundle(
        [annotation("_In_")] ID3D12CommandList *pCommandList
        );

    void BeginQuery(
        [annotation("_In_")] ID3D11Asynchronous *pAsync
        );

    void EndQuery(
        [annotation("_In_")] ID3D11Asynchronous *pAsync
        );

    void SetPredication(
        [annotation("_In_opt_")] ID3D11Predicate *pPredicate,
        [annotation("_In_")] BOOL PredicateValue
        );

    void SetDescriptorHeaps(
        [annotation("_In_reads_(NumDescriptorHeaps)")] ID3D12DescriptorHeap** pDescriptorHeaps,
        [annotation("_In_")] UINT NumDescriptorHeaps);

    void SetComputeRootSignature(
        [annotation("_In_")] ID3D12RootSignature* pRootSignature);

    void SetGraphicsRootSignature(
        [annotation("_In_")] ID3D12RootSignature* pRootSignature);

    void SetComputeRootDescriptorTable(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_")] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

    void SetGraphicsRootDescriptorTable(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_")] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

    // Single constant
    void SetComputeRoot32BitConstant(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_")] UINT SrcData,
        [annotation("_In_")] UINT DestOffsetIn32BitValues);

    void SetGraphicsRoot32BitConstant(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_")] UINT SrcData,
        [annotation("_In_")] UINT DestOffsetIn32BitValues);

    // Group of constants
    void SetComputeRoot32BitConstants(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_reads_(Num32BitValuesToSet*sizeof(UINT))")] const void* pSrcData,
        [annotation("_In_")] UINT DestOffsetIn32BitValues,
        [annotation("_In_")] UINT Num32BitValuesToSet);

    void SetGraphicsRoot32BitConstants(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_reads_(Num32BitValuesToSet*sizeof(UINT))")] const void* pSrcData,
        [annotation("_In_")] UINT DestOffsetIn32BitValues,
        [annotation("_In_")] UINT Num32BitValuesToSet);

    // CBV single use
    void SetComputeRootConstantBufferViewSingleUse(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_opt_")] ID3D12Resource* pBuffer,
        [annotation("_In_")] const D3D12_CONSTANT_BUFFER_VIEW_DESC * pDesc);

    void SetGraphicsRootConstantBufferViewSingleUse(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_opt_")] ID3D12Resource* pBuffer,
        [annotation("_In_")] const D3D12_CONSTANT_BUFFER_VIEW_DESC * pDesc);

    // CBV by handle
    void SetComputeRootConstantBufferView(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DescriptorHandle);

    void SetGraphicsRootConstantBufferView(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DescriptorHandle);

    // SRV single use
    void SetComputeRootShaderResourceViewSingleUse(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_opt_")] ID3D12Resource* pResource,
        [annotation("_In_")] const D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc);

    void SetGraphicsRootShaderResourceViewSingleUse(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_opt_")] ID3D12Resource* pResource,
        [annotation("_In_")] const D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc);

    // SRV by handle
    void SetComputeRootShaderResourceView(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DescriptorHandle);

    void SetGraphicsRootShaderResourceView(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DescriptorHandle);

    // UAV single use
    void SetComputeRootUnorderedAccessViewSingleUse(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_opt_")] ID3D12Resource* pResource,
        [annotation("_In_")] const D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc);

    void SetGraphicsRootUnorderedAccessViewSingleUse(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_opt_")] ID3D12Resource* pResource,
        [annotation("_In_")] const D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc);

    // UAV by handle
    void SetComputeRootUnorderedAccessView(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DescriptorHandle);

    void SetGraphicsRootUnorderedAccessView(
        [annotation("_In_")] UINT RootParameterIndex,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DescriptorHandle);

    void SetIndexBuffer(
        [annotation("_In_opt_")] const D3D12_CPU_DESCRIPTOR_HANDLE* pDescriptor);

    void SetIndexBufferSingleUse(
        [annotation("_In_opt_")] ID3D12Resource* pBuffer,
        [annotation("_In_")] const D3D12_INDEX_BUFFER_VIEW_DESC* pDesc);

    void SetVertexBuffers(
        [annotation("_In_")] UINT StartSlot,
        [annotation("_In_")] const D3D12_CPU_DESCRIPTOR_HANDLE* pDescriptors,
        [annotation("_In_")] BOOL SingleHandleToDescriptorRange,
        [annotation("_In_")] UINT NumDescriptors);

    void SetVertexBuffersSingleUse(
        [annotation("_In_")] UINT StartSlot,
        [annotation("_In_reads_(NumBuffers)")] ID3D12Resource* const* ppBuffers,
        [annotation("_In_reads_(NumBuffers)")] const D3D12_VERTEX_BUFFER_VIEW_DESC* ppDescs,
        [annotation("_In_")] UINT NumBuffers);

    void SetStreamOutputBuffers(
        [annotation("_In_")] UINT StartSlot,
        [annotation("_In_")] const D3D12_CPU_DESCRIPTOR_HANDLE* pDescriptors,
        [annotation("_In_")] BOOL SingleHandleToDescriptorRange,
        [annotation("_In_")] UINT NumDescriptors);

    void SetStreamOutputBuffersSingleUse(
        [annotation("_In_")] UINT StartSlot,
        [annotation("_In_reads_(NumBuffers)")] ID3D12Resource* const* ppBuffers,
        [annotation("_In_reads_(NumBuffers)")] const D3D12_STREAM_OUTPUT_VIEW_DESC* pDescs,
        [annotation("_In_")] UINT NumBuffers);

    void SetRenderTargets(
        [annotation("_In_")] const D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors,
        [annotation("_In_")] BOOL RTsSingleHandleToDescriptorRange,
        [annotation("_In_")] UINT NumRenderTargetDescriptors,
        [annotation("_In_opt_")] const D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor);

    // Maintain the ability from D3D10/D3D11 to reset
    // stream output buffer offset:
    void SetStreamOutputBufferOffset(
        [annotation("_In_")] ID3D11Query* pSOOffset,
        [annotation("_In_")] UINT64 BufferOffsetInBytes);

    // Maintain the ability from D3D10/D3D11 to reset
    // UAV counter value:
    void SetUnorderedAccessViewCounterValue (
        [annotation("_In_")] ID3D11Query* pUAVCounter,
        [annotation("_In_")] UINT CounterValue);

    void ClearDepthStencilView(
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView,
        [annotation("_In_")] UINT ClearFlags,
        [annotation("_In_")] FLOAT Depth,
        [annotation("_In_")] UINT8 Stencil,
        [annotation("_In_reads_opt_(NumRects)")] const D3D12_RECT *pRect,
        [annotation("_In_")] UINT NumRects);

    void ClearRenderTargetView(
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView,
        [annotation("_In_")] const FLOAT ColorRGBA[4],
        [annotation("_In_reads_opt_(NumRects)")] const D3D12_RECT *pRects,
        [annotation("_In_")] UINT NumRects);

    void ClearUnorderedAccessViewUint(
        [annotation("_In_")] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle,
        [annotation("_In_")] ID3D12Resource* pResource,
        [annotation("_In_")] const UINT Values[4],
        [annotation("_In_reads_opt_(NumRects)")] const D3D12_RECT *pRects,
        [annotation("_In_")] UINT NumRects);

    void ClearUnorderedAccessViewFloat(
        [annotation("_In_")] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle,
        [annotation("_In_")] ID3D12Resource* pResource,
        [annotation("_In_")] const FLOAT Values[4],
        [annotation("_In_reads_opt_(NumRects)")] const D3D12_RECT *pRects,
        [annotation("_In_")] UINT NumRects);

    void CopyStructureCount(
        [annotation("_In_")] ID3D12Resource* pDstBuffer,
        [annotation("_In_")] UINT DstAlignedByteOffset,
        [annotation("_In_")] ID3D11Query* pUAVCounter);

    void DiscardResource(
        [annotation("_In_")] ID3D12Resource* pResource,
        [annotation("_In_opt_")] const D3D12_DISCARD_RESOURCE_DESC* pDesc
        );

    INT PIXBeginEvent([annotation("_In_z_")] LPCWSTR Name);
    INT PIXEndEvent(void);
    void PIXSetMarker([annotation("_In_z_")] LPCWSTR Name);
    BOOL PIXGetStatus(void);

    void SetMarkerInt( [annotation("_In_")] LPCWSTR pLabel, INT Data );
    void BeginEventInt( [annotation("_In_")] LPCWSTR pLabel, INT Data );
    void EndEvent();
}


[ uuid( c93c8c3d-bf95-441a-b0cd-56ea3c3287f1 ), object, local, pointer_default( unique ) ]
interface ID3D12CommandQueue
    : ID3D12Pageable
{
    void ExecuteCommandList(
        [annotation("_In_")] ID3D12CommandList* pCommandList
        );

    void UpdateTileMappings(
        [annotation("_In_")] ID3D12Resource* pResource,
        UINT NumResourceRegions,
        [annotation("_In_reads_opt_(NumResourceRegions)")] const D3D12_TILED_RESOURCE_COORDINATE* pResourceRegionStartCoordinates,
        [annotation("_In_reads_opt_(NumResourceRegions)")] const D3D12_TILE_REGION_SIZE* pResourceRegionSizes,
        [annotation("_In_opt_")] ID3D12Heap* pHeap,
        UINT NumRanges,
        [annotation("_In_reads_opt_(NumRanges)")] const D3D12_TILE_RANGE_FLAG* pRangeFlags,
        [annotation("_In_reads_opt_(NumRanges)")] const UINT* pHeapRangeStartOffsets,
        [annotation("_In_reads_opt_(NumRanges)")] const UINT* pRangeTileCounts,
        D3D12_TILE_MAPPING_FLAG Flags );

    void CopyTileMappings(
        [annotation("_In_")] ID3D12Resource* pDstResource,
        [annotation("_In_")] const D3D12_TILED_RESOURCE_COORDINATE* pDstRegionStartCoordinate,
        [annotation("_In_")] ID3D12Resource* pSrcResource,
        [annotation("_In_")] const D3D12_TILED_RESOURCE_COORDINATE* pSrcRegionStartCoordinate,
        [annotation("_In_")] const D3D12_TILE_REGION_SIZE* pRegionSize,
        D3D12_TILE_MAPPING_FLAG Flags );

    UINT64 GetCurrentFence();
    UINT64 AdvanceFence();
    HRESULT SetEventOnFenceCompletion( UINT64 Value, HANDLE hEvent );
    UINT64 GetLastCompletedFence();

    void ExecuteCommandLists(
        [annotation("_In_")] UINT Count,
        [annotation("_In_reads_(Count)")] ID3D12CommandList * const * ppCommandLists
        );

    INT PIXBeginEvent([annotation("_In_z_")] LPCWSTR Name);
    INT PIXEndEvent(void);
    void PIXSetMarker([annotation("_In_z_")] LPCWSTR Name);
    BOOL PIXGetStatus(void);

    HRESULT Signal(ID3D12Fence *pFence, UINT64 Value);
    HRESULT Wait(ID3D12Fence *pFence, UINT64 Value);
}

[ uuid( 5d1f22cd-756f-46f4-9c5c-86916eae4e02 ), object, local, pointer_default( unique ) ]
interface ID3D12Asynchronous
    : IUnknown
{
    HRESULT GetData(
        [annotation("_Out_writes_bytes_opt_( DataSize )")] void* pData,
        [annotation("_In_")] UINT DataSize
        );
}


[ uuid( 7579364f-41b3-455a-8785-ed83281ed144 ), object, local, pointer_default( unique ) ]
interface ID3D12Library
    : ID3D12DeviceChild
{
    HRESULT StoreObject(
        LPCSTR pName,
        [annotation("_In_")] ID3D12DeviceChild *pDeviceChild
        );
    HRESULT LoadObject(
        LPCSTR pName,
        REFGUID UUID,
        [annotation("_Outptr_")] void **ppObject
        );
    HRESULT Link(
        [annotation("_Outptr_")] ID3D10Blob **ppBlob
        );
}

[ uuid( cbb5d674-cc35-4481-8b09-be1750813f3e ), object, local, pointer_default( unique ) ]
interface ID3D12Callback
    : ID3D12DeviceChild
{
}

[ uuid( 13f7b9bd-7113-46ff-ac01-b3e10921f23d ), object, local, pointer_default( unique ) ]
interface ID3D12Device
    : ID3D12Object
{
    void GetDefaultCommandQueue(
        [annotation("_Outptr_ ")] ID3D12CommandQueue** ppCommandQueue
        );

    HRESULT CreateCommandQueue(
        D3D12_COMMAND_LIST_TYPE type,
        INT priority,
        [in] REFIID riid, // Expected: ID3D12CommandQueue
        [out, iid_is(riid), annotation("_COM_Outptr_")] void** ppCommandQueue 
        );

    HRESULT CreateCommandAllocator(
        [annotation("_In_")] D3D12_COMMAND_LIST_TYPE type,
        [annotation("_Outptr_")] ID3D12CommandAllocator** ppCommandAllocator
        );

    HRESULT CreateGraphicsPipelineState(
        [annotation("_In_")] const D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc,
        [annotation("_Outptr_")] ID3D12PipelineState** ppPipelineState
        );

    HRESULT CreateComputePipelineState(
        [annotation("_In_")] const D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc,
        [annotation("_Outptr_")] ID3D12PipelineState** ppPipelineState
        );

    HRESULT CreateCommandList(
        [annotation("_In_")] D3D12_COMMAND_LIST_TYPE type,
        [annotation("_In_")] ID3D12CommandAllocator* pCommandAllocator,
        [annotation("_In_opt_")] ID3D12PipelineState* pInitialState,
        [annotation("_Outptr_")] ID3D12CommandList** ppCommandList
        );

    // TODO: Delete
    HRESULT CreateBuffer(
        D3D12_HEAP_TYPE HeapType,
        UINT64 ByteSize,
        D3D12_RESOURCE_MISC_FLAG MiscFlags,
        [in] REFIID riid, // Expected: ID3D12Resource
        [out, iid_is(riid), annotation("_COM_Outptr_")] void** ppvBuffer );

    // TODO: Delete
    HRESULT CreateDefaultResource(
        [annotation("_In_")] const D3D11_RESOURCE_DESC* pDesc,
        [annotation("_In_opt_")] const D3D11_SUBRESOURCE_DATA* pInitialData,
        [in] REFIID riid, // Expected: ID3D12Resource
        [out, iid_is(riid), annotation("_COM_Outptr_")] void** ppvResource );

    HRESULT CheckFeatureSupport(
        D3D12_FEATURE Feature,
        [annotation("_Inout_updates_bytes_(FeatureSupportDataSize)")] void *pFeatureSupportData,
        UINT FeatureSupportDataSize
        );

    HRESULT CreateDescriptorHeap(
        [annotation("_In_")] const D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc,
        [in] REFIID riid, // Expected ID3D12DescriptorHeap
        [out, iid_is(riid), annotation("_COM_Outptr_")] void** ppvHeap);

    UINT GetDescriptorHandleIncrementSize(
        [annotation("_In_")] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);

    HRESULT CreateRootSignature(
        [annotation("_In_reads_(BlobLengthInBytes)")] const void* pBlobWithRootSignature,
        [annotation("_In_")] SIZE_T BlobLengthInBytes,
        [in] REFIID riid, // Expected ID3D12RootSignature
        [out, iid_is(riid), annotation("_COM_Outptr_")] void** ppvRootSignature);

    void CreateIndexBufferView(
        [annotation("_In_opt_")] ID3D12Resource* pBuffer,
        [annotation("_In_")] const D3D12_INDEX_BUFFER_VIEW_DESC* pDesc,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateVertexBufferView(
        [annotation("_In_opt_")] ID3D12Resource* pBuffer,
        [annotation("_In_")] const D3D12_VERTEX_BUFFER_VIEW_DESC* pDesc,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateConstantBufferView(
        [annotation("_In_opt_")] ID3D12Resource* pBuffer,
        [annotation("_In_")] const D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateShaderResourceView(
        [annotation("_In_opt_")] ID3D12Resource* pResource,
        [annotation("_In_opt_")] const D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateUnorderedAccessView(
        [annotation("_In_opt_")] ID3D12Resource* pResource,
        [annotation("_In_opt_")] const D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateStreamOutputView(
        [annotation("_In_opt_")] ID3D12Resource* pBuffer,
        [annotation("_In_")] const D3D12_STREAM_OUTPUT_VIEW_DESC* pDesc,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateRenderTargetView(
        [annotation("_In_opt_")] ID3D12Resource* pResource,
        [annotation("_In_opt_")] const D3D12_RENDER_TARGET_VIEW_DESC* pDesc,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateDepthStencilView(
        [annotation("_In_opt_")] ID3D12Resource* pResource,
        [annotation("_In_opt_")] const D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateSampler(
        [annotation("_In_")] const D3D12_SAMPLER_DESC* pDesc,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CopyDescriptors(
        [annotation("_In_reads_(NumDestDescriptorRanges)")] const D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts,
        [annotation("_In_reads_opt_(NumDestDescriptorRanges)")] const UINT* pDestDescriptorRangeSizes, // NULL means all ranges 1
        [annotation("_In_")] UINT NumDestDescriptorRanges,
        [annotation("_In_reads_(NumSrcDescriptorRanges)")] const D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts,
        [annotation("_In_reads_opt_(NumSrcDescriptorRanges)")] const UINT* pSrcDescriptorRangeSizes, // NULL means all ranges 1
        [annotation("_In_")] UINT NumSrcDescriptorRanges,
        [annotation("_In_")] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

    void CopyDescriptorsSimple(
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart,
        [annotation("_In_")] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart,
        [annotation("_In_")] UINT NumDescriptors,
        [annotation("_In_")] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

    HRESULT CreateLibrary(
        [annotation("_In_reads_(BlobLength)")] const void *pLibraryBlob,
        SIZE_T BlobLength,
        [annotation("_Outptr_")] ID3D12Library ** ppLibrary
        );

    D3D12_VIDEO_MEMORY_INFO QueryVideoMemoryInfo();

    void SetVideoMemoryReservation(
        [annotation("_In_")] UINT64 Reservation
        );
        
    D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo(
        UINT RDescs,
        [annotation("_In_reads_(RDescs)")] const D3D12_RESOURCE_DESC* pRDescs );

    D3D12_HEAP_PROPERTIES GetCustomHeapProperties( D3D12_HEAP_TYPE HeapType );

    HRESULT CreateCommittedResource(
        [annotation("_In_")] const D3D12_HEAP_PROPERTIES* pHeapProperties,
        D3D12_HEAP_MISC_FLAG HeapMiscFlags,
        [annotation("_In_")] const D3D12_RESOURCE_DESC* pResourceDesc,
        D3D12_RESOURCE_USAGE InitialResourceState,
        [in] REFIID riidResource, // Expected: ID3D12Resource*
        [out, iid_is(riidResource), annotation("_COM_Outptr_opt_")] void** ppvResource );

    HRESULT CreateHeap(
        [annotation("_In_")] const D3D12_HEAP_DESC* pDesc,
        [in] REFIID riid, // Expected: ID3D12Heap*
        [out, iid_is(riid), annotation("_COM_Outptr_opt_")] void** ppvHeap );

    HRESULT CreatePlacedResource(
        [annotation("_In_opt_")] ID3D12Heap* pHeap,
        UINT64 HeapOffset,
        [annotation("_In_")] const D3D12_RESOURCE_DESC* pDesc,
        D3D12_RESOURCE_USAGE InitialState,
        [in] REFIID riid, // Expected: ID3D12Resource*
        [out, iid_is(riid), annotation("_COM_Outptr_opt_")] void** ppvResource );

    HRESULT CreateReservedResource(
        [annotation("_In_")] const D3D12_RESOURCE_DESC* pDesc,
        D3D12_RESOURCE_USAGE InitialState,
        [in] REFIID riid, // Expected: ID3D12Resource*
        [out, iid_is(riid), annotation("_COM_Outptr_opt_")] void** ppvResource );

    HRESULT OpenSharedResourceAndHeap(
        [annotation("_In_opt_")] HANDLE hResourceAndHeap,
        [annotation("_In_opt_")] LPCWSTR pName,
        UINT DesiredAccess,
        D3D12_RESOURCE_USAGE InitialResourceState,
        [in] REFIID riidResource, // Expected: ID3D12Resource*
        [out, iid_is(riidResource), annotation("_COM_Outptr_opt_")] void** ppvResource,
        [in] REFIID riidHeap, // Expected: ID3D12Heap*
        [out, iid_is(riidHeap), annotation("_COM_Outptr_opt_")] void** ppvHeap );
        
    HRESULT CreateSharedHandle(
        [annotation("_In_")] ID3D12DeviceChild* pObject,
        [annotation("_In_opt_")] const SECURITY_ATTRIBUTES* pAttributes,
        DWORD Access,
        [annotation("_In_opt_")] LPCWSTR pName,
        [annotation("_Out_")] HANDLE* pHandle );

    HRESULT MakeResident( UINT Objects, [annotation("_In_reads_(Objects)")] ID3D12Pageable*const* ppObjects );

    HRESULT Evict( UINT Objects, [annotation("_In_reads_(Objects)")] ID3D12Pageable*const* ppObjects );

    HRESULT RegisterBudgetChangeCallback(
        [annotation("_In_")] PFN_D3D12_BUDGET_CHANGED pfnCallback,
        [annotation("_In_opt_")] PVOID pContext,
        [in] REFIID riid, // Expected: ID3D12Callback
        [out, iid_is(riid), annotation("_COM_Outptr_")] void** ppvCallback
        );

    HRESULT CreateFence(
        UINT64 InitialValue,
        D3D12_FENCE_MISC_FLAG Flags,
        [annotation("_Outptr_")] ID3D12Fence **ppFence);        

    D3D12_CREATE_DEVICE_FLAG GetCreateDeviceFlags();
    HRESULT GetDeviceRemovedReason();

    void GetCopyableLayout(
        [annotation("_In_")] const D3D12_RESOURCE_DESC* pResourceDesc,
        UINT FirstSubresource,
        UINT NumSubresources,
        UINT64 BaseOffset,
        [annotation("_Out_writes_opt_(NumSubresources)")] D3D12_PLACED_PITCHED_SUBRESOURCE_DESC* pLayouts,
        [annotation("_Out_writes_opt_(NumSubresources)")] UINT* pNumRows,
        [annotation("_Out_writes_opt_(NumSubresources)")] UINT64* pRowSizeInBytes,
        [annotation("_Out_opt_")] UINT64* pTotalBytes );
}


typedef struct D3D12_SUBRESOURCE_DATA
{
    const void* pData;
    LONG_PTR RowPitch;
    LONG_PTR SlicePitch;
} D3D12_SUBRESOURCE_DATA;

typedef struct D3D12_MEMCPY_DEST
{
    void* pData;
    SIZE_T RowPitch;
    SIZE_T SlicePitch;
} D3D12_MEMCPY_DEST;

// Helpers to ease the loss of UpdateSubresource and initial data
cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "// Row-by-row memcpy" )
cpp_quote( "inline void MemcpySubresource(" )
cpp_quote( "    const D3D12_MEMCPY_DEST* pDest," )
cpp_quote( "    const D3D12_SUBRESOURCE_DATA* pSrc," )
cpp_quote( "    SIZE_T RowSizeInBytes," )
cpp_quote( "    UINT NumRows," )
cpp_quote( "    UINT NumSlices)" )
cpp_quote( "{" )
cpp_quote( "    for (UINT z = 0; z < NumSlices; ++z)" )
cpp_quote( "    {" )
cpp_quote( "        BYTE* pDestSlice = reinterpret_cast<BYTE*>(pDest->pData) + pDest->SlicePitch * z;" )
cpp_quote( "        const BYTE* pSrcSlice = reinterpret_cast<const BYTE*>(pSrc->pData) + pSrc->SlicePitch * z;" )
cpp_quote( "        for (UINT y = 0; y < NumRows; ++y)" )
cpp_quote( "        {" )
cpp_quote( "            memcpy(pDestSlice + pDest->RowPitch * y," )
cpp_quote( "                   pSrcSlice + pSrc->RowPitch * y," )
cpp_quote( "                   RowSizeInBytes);" )
cpp_quote( "        }" )
cpp_quote( "    }" )
cpp_quote( "}" )
cpp_quote( "" )
cpp_quote( "// Returns required size of a buffer to be used for data upload" )
cpp_quote( "inline UINT64 GetRequiredIntermediateSize(" )
cpp_quote( "    _In_ ID3D12Resource* pDestinationResource," )
cpp_quote( "    UINT FirstSubresource," )
cpp_quote( "    UINT NumSubresources)" )
cpp_quote( "{" )
cpp_quote( "    D3D12_RESOURCE_DESC Desc = pDestinationResource->GetDesc();" )
cpp_quote( "    UINT64 RequiredSize = 0;" )
cpp_quote( "    " )
cpp_quote( "    ID3D12Device* pDevice;" )
cpp_quote( "    pDestinationResource->GetDevice(&pDevice);" )
cpp_quote( "    pDevice->GetCopyableLayout(&Desc, FirstSubresource, NumSubresources, 0, nullptr, nullptr, nullptr, &RequiredSize);" )
cpp_quote( "    pDevice->Release();" )
cpp_quote( "    " )
cpp_quote( "    return RequiredSize;" )
cpp_quote( "}" )
cpp_quote( "" )
cpp_quote( "// All arrays must be populated (e.g. by calling GetCopyableLayout)" )
cpp_quote( "inline UINT64 UpdateSubresources(" )
cpp_quote( "    _In_ ID3D12CommandList* pCmdList," )
cpp_quote( "    _In_ ID3D12Resource* pDestinationResource," )
cpp_quote( "    _In_ ID3D12Resource* pIntermediate," )
cpp_quote( "    UINT FirstSubresource," )
cpp_quote( "    UINT NumSubresources," )
cpp_quote( "    UINT64 RequiredSize," )
cpp_quote( "    _In_reads_(NumSubresources) const D3D12_PLACED_PITCHED_SUBRESOURCE_DESC* pLayouts," )
cpp_quote( "    _In_reads_(NumSubresources) const UINT* pNumRows," )
cpp_quote( "    _In_reads_(NumSubresources) const UINT64* pRowSizesInBytes," )
cpp_quote( "    _In_reads_(NumSubresources) const D3D12_SUBRESOURCE_DATA* pSrcData)" )
cpp_quote( "{" )
cpp_quote( "    // Minor validation" )
cpp_quote( "    D3D12_RESOURCE_DESC IntermediateDesc = pIntermediate->GetDesc();" )
cpp_quote( "    D3D12_RESOURCE_DESC DestinationDesc = pDestinationResource->GetDesc();" )
cpp_quote( "    if (IntermediateDesc.Dimension != D3D12_RESOURCE_DIMENSION_BUFFER || " )
cpp_quote( "        IntermediateDesc.Width < RequiredSize + pLayouts[0].Offset || " )
cpp_quote( "        RequiredSize > (SIZE_T)-1 || " )
cpp_quote( "        (DestinationDesc.Dimension == D3D12_RESOURCE_DIMENSION_BUFFER && " )
cpp_quote( "            (FirstSubresource != 0 || NumSubresources != 1)))" )
cpp_quote( "    {" )
cpp_quote( "        return 0;" )
cpp_quote( "    }" )
cpp_quote( "    " )
cpp_quote( "    BYTE* pData;" )
cpp_quote( "    HRESULT hr = pIntermediate->Map(NULL, reinterpret_cast<void**>(&pData));" )
cpp_quote( "    if (FAILED(hr))" )
cpp_quote( "    {" )
cpp_quote( "        return 0;" )
cpp_quote( "    }" )
cpp_quote( "    " )
cpp_quote( "    for (UINT i = 0; i < NumSubresources; ++i)" )
cpp_quote( "    {" )
cpp_quote( "        if (pRowSizesInBytes[i] > (SIZE_T)-1) return 0;" )
cpp_quote( "        D3D12_MEMCPY_DEST DestData = { pData + pLayouts[i].Offset, pLayouts[i].Placement.RowPitch, pLayouts[i].Placement.RowPitch * pNumRows[i] };" )
cpp_quote( "        MemcpySubresource(&DestData, &pSrcData[i], (SIZE_T)pRowSizesInBytes[i], pNumRows[i], pLayouts[i].Placement.Depth);" )
cpp_quote( "    }" )
cpp_quote( "    pIntermediate->Unmap(NULL);" )
cpp_quote( "    " )
cpp_quote( "    if (DestinationDesc.Dimension == D3D12_RESOURCE_DIMENSION_BUFFER)" )
cpp_quote( "    {" )
cpp_quote( "        CD3D12_BOX SrcBox( UINT( pLayouts[0].Offset ), UINT( pLayouts[0].Offset + pLayouts[0].Placement.Width ) );" )
cpp_quote( "        D3D12_SELECT_SUBRESOURCE SubresourceZero = { 0 };" )
cpp_quote( "        pCmdList->CopySubresourceRegion(" )
cpp_quote( "            pDestinationResource, D3D12_SUBRESOURCE_VIEW_SELECT_SUBRESOURCE, &SubresourceZero, 0, 0, 0," )
cpp_quote( "            pIntermediate, D3D12_SUBRESOURCE_VIEW_SELECT_SUBRESOURCE, &SubresourceZero, &SrcBox, D3D12_COPY_NO_OVERWRITE);" )
cpp_quote( "    }" )
cpp_quote( "    else" )
cpp_quote( "    {" )
cpp_quote( "        for (UINT i = 0; i < NumSubresources; ++i)" )
cpp_quote( "        {" )
cpp_quote( "            D3D12_SELECT_SUBRESOURCE DestSubresource = { i + FirstSubresource };" )
cpp_quote( "            pCmdList->CopySubresourceRegion(" )
cpp_quote( "                pDestinationResource, D3D12_SUBRESOURCE_VIEW_SELECT_SUBRESOURCE, &DestSubresource, 0, 0, 0," )
cpp_quote( "                pIntermediate, D3D12_SUBRESOURCE_VIEW_PLACED_PITCHED_SUBRESOURCE, &pLayouts[i], nullptr, D3D12_COPY_NO_OVERWRITE);" )
cpp_quote( "        }" )
cpp_quote( "    }" )
cpp_quote( "    return RequiredSize;" )
cpp_quote( "}" )
cpp_quote( "" )
cpp_quote( "// Heap-allocating UpdateSubresources implementation" )
cpp_quote( "inline UINT64 UpdateSubresources(" )
cpp_quote( "    _In_ ID3D12CommandList* pCmdList," )
cpp_quote( "    _In_ ID3D12Resource* pDestinationResource," )
cpp_quote( "    _In_ ID3D12Resource* pIntermediate," )
cpp_quote( "    UINT64 IntermediateOffset," )
cpp_quote( "    UINT FirstSubresource," )
cpp_quote( "    UINT NumSubresources," )
cpp_quote( "    _In_reads_(NumSubresources) D3D12_SUBRESOURCE_DATA* pSrcData)" )
cpp_quote( "{" )
cpp_quote( "    UINT64 RequiredSize = 0;" )
cpp_quote( "    D3D12_PLACED_PITCHED_SUBRESOURCE_DESC* pLayouts = new D3D12_PLACED_PITCHED_SUBRESOURCE_DESC[NumSubresources];" )
cpp_quote( "    UINT* pNumRows = new UINT[NumSubresources];" )
cpp_quote( "    UINT64* pRowSizesInBytes = new UINT64[NumSubresources];" )
cpp_quote( "    " )
cpp_quote( "    D3D12_RESOURCE_DESC Desc = pDestinationResource->GetDesc();" )
cpp_quote( "    ID3D12Device* pDevice;" )
cpp_quote( "    pDestinationResource->GetDevice(&pDevice);" )
cpp_quote( "    pDevice->GetCopyableLayout(&Desc, FirstSubresource, NumSubresources, IntermediateOffset, pLayouts, pNumRows, pRowSizesInBytes, &RequiredSize);" )
cpp_quote( "    pDevice->Release();" )
cpp_quote( "    " )
cpp_quote( "    UINT64 Result = UpdateSubresources(pCmdList, pDestinationResource, pIntermediate, FirstSubresource, NumSubresources, RequiredSize, pLayouts, pNumRows, pRowSizesInBytes, pSrcData);" )
cpp_quote( "    delete[] pLayouts;" )
cpp_quote( "    delete[] pNumRows;" )
cpp_quote( "    delete[] pRowSizesInBytes;" )
cpp_quote( "    return Result;" )
cpp_quote( "}" )
cpp_quote( "" )
cpp_quote( "// Stack-allocating UpdateSubresources implementation" )
cpp_quote( "template <UINT MaxSubresources>" )
cpp_quote( "inline UINT64 UpdateSubresources(" )
cpp_quote( "    _In_ ID3D12CommandList* pCmdList," )
cpp_quote( "    _In_ ID3D12Resource* pDestinationResource," )
cpp_quote( "    _In_ ID3D12Resource* pIntermediate," )
cpp_quote( "    UINT64 IntermediateOffset," )
cpp_quote( "    _In_range_(0, MaxSubresources) UINT FirstSubresource," )
cpp_quote( "    _In_range_(1, MaxSubresources - FirstSubresource) UINT NumSubresources," )
cpp_quote( "    _In_reads_(NumSubresources) D3D12_SUBRESOURCE_DATA* pSrcData)" )
cpp_quote( "{" )
cpp_quote( "    UINT64 RequiredSize = 0;" )
cpp_quote( "    D3D12_PLACED_PITCHED_SUBRESOURCE_DESC Layouts[MaxSubresources];" )
cpp_quote( "    UINT NumRows[MaxSubresources];" )
cpp_quote( "    UINT64 RowSizesInBytes[MaxSubresources];" )
cpp_quote( "    " )
cpp_quote( "    D3D12_RESOURCE_DESC Desc = pDestinationResource->GetDesc();" )
cpp_quote( "    ID3D12Device* pDevice;" )
cpp_quote( "    pDestinationResource->GetDevice(&pDevice);" )
cpp_quote( "    pDevice->GetCopyableLayout(&Desc, FirstSubresource, NumSubresources, IntermediateOffset, Layouts, NumRows, RowSizesInBytes, &RequiredSize);" )
cpp_quote( "    pDevice->Release();" )
cpp_quote( "    " )
cpp_quote( "    return UpdateSubresources(pCmdList, pDestinationResource, pIntermediate, FirstSubresource, NumSubresources, RequiredSize, Layouts, NumRows, RowSizesInBytes, pSrcData);" )
cpp_quote( "}" )
cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )

cpp_quote( "DEFINE_GUID(IID_ID3D12Object,0xc4fec28f,0x7966,0x4e95,0x9f,0x94,0xf4,0x31,0xcb,0x56,0xc3,0xb8);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12DeviceChild,0x905db94b,0xa00c,0x4140,0x9d,0xf5,0x2b,0x64,0xca,0x9e,0xa3,0x57);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12RootSignature,0xc54a6b66,0x72df,0x4ee8,0x8b,0xe5,0xa9,0x46,0xa1,0x42,0x92,0x14);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12RootSignatureDeserializer,0x34AB647B,0x3CC8,0x46AC,0x84,0x1B,0xC0,0x96,0x56,0x45,0xC0,0x46);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12Pageable,0x63ee58fb,0x1268,0x4835,0x86,0xda,0xf0,0x08,0xce,0x62,0xf0,0xd6);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12Heap,0xf98f3ba4,0xe608,0x4cf6,0x9e,0x29,0xa1,0x4e,0x50,0xd4,0x92,0x9d);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12Resource,0x696442be,0xa72e,0x4059,0xbc,0x79,0x5b,0x5c,0x98,0x04,0x0f,0xad);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12CommandAllocator,0x6102dee4,0xaf59,0x4b09,0xb9,0x99,0xb4,0x4d,0x73,0xf0,0x9b,0x24);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12Fence,0x0a753dcf,0xc4d8,0x4b91,0xad,0xf6,0xbe,0x5a,0x60,0xd9,0x5a,0x76);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12PipelineState,0x765a30f3,0xf624,0x4c6f,0xa8,0x28,0xac,0xe9,0x48,0x62,0x24,0x45);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12DescriptorHeap,0x3c2922d5,0xf9eb,0x41a8,0x9a,0x15,0x9e,0x70,0x76,0x10,0x98,0x4a);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12CommandList,0x168b7173,0xba23,0x4bc8,0x9f,0xf9,0xee,0x1d,0xb8,0x8a,0xfb,0x20);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12CommandQueue,0xc93c8c3d,0xbf95,0x441a,0xb0,0xcd,0x56,0xea,0x3c,0x32,0x87,0xf1);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12Asynchronous,0x5d1f22cd,0x756f,0x46f4,0x9c,0x5c,0x86,0x91,0x6e,0xae,0x4e,0x02);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12Library,0x7579364f,0x41b3,0x455a,0x87,0x85,0xed,0x83,0x28,0x1e,0xd1,0x44);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12Callback,0xcbb5d674,0xcc35,0x4481,0x8b,0x09,0xbe,0x17,0x50,0x81,0x3f,0x3e);" )
cpp_quote( "DEFINE_GUID(IID_ID3D12Device,0x13f7b9bd,0x7113,0x46ff,0xac,0x01,0xb3,0xe1,0x09,0x21,0xf2,0x3d);" )
