
/*  A Bison parser, made from hlslang.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	ATTRIBUTE	258
#define	CONST_QUAL	259
#define	BOOL_TYPE	260
#define	FLOAT_TYPE	261
#define	INT_TYPE	262
#define	STRING_TYPE	263
#define	BREAK	264
#define	CONTINUE	265
#define	DO	266
#define	ELSE	267
#define	FOR	268
#define	IF	269
#define	DISCARD	270
#define	RETURN	271
#define	BVEC2	272
#define	BVEC3	273
#define	BVEC4	274
#define	IVEC2	275
#define	IVEC3	276
#define	IVEC4	277
#define	VEC2	278
#define	VEC3	279
#define	VEC4	280
#define	MATRIX2	281
#define	MATRIX3	282
#define	MATRIX4	283
#define	IN_QUAL	284
#define	OUT_QUAL	285
#define	INOUT_QUAL	286
#define	UNIFORM	287
#define	VARYING	288
#define	STRUCT	289
#define	VOID_TYPE	290
#define	WHILE	291
#define	SAMPLER1D	292
#define	SAMPLER2D	293
#define	SAMPLER3D	294
#define	SAMPLERCUBE	295
#define	SAMPLER1DSHADOW	296
#define	SAMPLER2DSHADOW	297
#define	SAMPLERGENERIC	298
#define	VECTOR	299
#define	MATRIX	300
#define	REGISTER	301
#define	TEXTURE	302
#define	SAMPLERSTATE	303
#define	IDENTIFIER	304
#define	TYPE_NAME	305
#define	FLOATCONSTANT	306
#define	INTCONSTANT	307
#define	BOOLCONSTANT	308
#define	STRINGCONSTANT	309
#define	FIELD_SELECTION	310
#define	LEFT_OP	311
#define	RIGHT_OP	312
#define	INC_OP	313
#define	DEC_OP	314
#define	LE_OP	315
#define	GE_OP	316
#define	EQ_OP	317
#define	NE_OP	318
#define	AND_OP	319
#define	OR_OP	320
#define	XOR_OP	321
#define	MUL_ASSIGN	322
#define	DIV_ASSIGN	323
#define	ADD_ASSIGN	324
#define	MOD_ASSIGN	325
#define	LEFT_ASSIGN	326
#define	RIGHT_ASSIGN	327
#define	AND_ASSIGN	328
#define	XOR_ASSIGN	329
#define	OR_ASSIGN	330
#define	SUB_ASSIGN	331
#define	LEFT_PAREN	332
#define	RIGHT_PAREN	333
#define	LEFT_BRACKET	334
#define	RIGHT_BRACKET	335
#define	LEFT_BRACE	336
#define	RIGHT_BRACE	337
#define	DOT	338
#define	COMMA	339
#define	COLON	340
#define	EQUAL	341
#define	SEMICOLON	342
#define	BANG	343
#define	DASH	344
#define	TILDE	345
#define	PLUS	346
#define	STAR	347
#define	SLASH	348
#define	PERCENT	349
#define	LEFT_ANGLE	350
#define	RIGHT_ANGLE	351
#define	VERTICAL_BAR	352
#define	CARET	353
#define	AMPERSAND	354
#define	QUESTION	355

#line 73 "hlslang.y"


/* Based on:
ANSI C Yacc grammar

In 1985, Jeff Lee published his Yacc grammar (which is accompanied by a 
matching Lex specification) for the April 30, 1985 draft version of the 
ANSI C standard.  Tom Stockfisch reposted it to net.sources in 1987; that
original, as mentioned in the answer to question 17.25 of the comp.lang.c
FAQ, can be ftp'ed from ftp.uu.net, file usenet/net.sources/ansi.c.grammar.Z.
 
I intend to keep this version as close to the current C Standard grammar as 
possible; please let me know if you discover discrepancies. 

Jutta Degener, 1995 
*/

#include "SymbolTable.h"
#include "ParseHelper.h"
#include "../Public/HLSL2GLSL.h"

#ifdef _WIN32
    #define YYPARSE_PARAM parseContext
    #define YYPARSE_PARAM_DECL TParseContext&
    #define YY_DECL int yylex(YYSTYPE* pyylval, TParseContext& parseContext)
    #define YYLEX_PARAM parseContext
#else
    #define YYPARSE_PARAM parseContextLocal
    #define parseContext (*((TParseContext*)(parseContextLocal)))
    #define YY_DECL int yylex(YYSTYPE* pyylval, void* parseContextLocal)
    #define YYLEX_PARAM (void*)(parseContextLocal)
    extern void yyerror(char*);    
#endif

#define FRAG_VERT_ONLY(S, L) {                                                  \
    if (parseContext.language != EShLangFragment &&                             \
        parseContext.language != EShLangVertex) {                               \
        parseContext.error(L, " supported in vertex/fragment shaders only ", S, "", "");   \
        parseContext.recover();                                                            \
    }                                                                           \
}

#define VERTEX_ONLY(S, L) {                                                     \
    if (parseContext.language != EShLangVertex) {                               \
        parseContext.error(L, " supported in vertex shaders only ", S, "", "");            \
        parseContext.recover();                                                            \
    }                                                                           \
}

#define FRAG_ONLY(S, L) {                                                       \
    if (parseContext.language != EShLangFragment) {                             \
        parseContext.error(L, " supported in fragment shaders only ", S, "", "");          \
        parseContext.recover();                                                            \
    }                                                                           \
}

#define UNSUPPORTED_FEATURE(S, L) {                                                       \
    parseContext.error(L, " not supported ", S, "", "");              \
    parseContext.recover();                                                            \
}



#line 136 "hlslang.y"
typedef union {
    struct {
        TSourceLoc line;
        union {
            TString *string;
            float f;
            int i;
            bool b;
        };
        TSymbol* symbol;
    } lex;
    struct {
        TSourceLoc line;
        TOperator op;
        union {
            TIntermNode* intermNode;
            TIntermNodePair nodePair;
            TIntermTyped* intermTypedNode;
            TIntermAggregate* intermAggregate;
        };
        union {
            TPublicType type;
            TQualifier qualifier;
            TFunction* function;
            TParameter param;
            TTypeLine typeLine;
            TTypeList* typeList;
	    TAnnotation* ann;
	    TTypeInfo* typeInfo;
        };
    } interm;
} YYSTYPE;
#line 169 "hlslang.y"

#ifndef _WIN32
    extern int yylex(YYSTYPE*, void*);
#endif

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		448
#define	YYFLAG		-32768
#define	YYNTBASE	101

#define YYTRANSLATE(x) ((unsigned)(x) <= 355 ? yytranslate[x] : 193)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    14,    16,    21,    23,
    27,    30,    33,    35,    37,    39,    43,    46,    49,    52,
    54,    57,    61,    64,    66,    68,    70,    72,    75,    78,
    81,    86,    88,    90,    92,    94,    96,   100,   104,   108,
   110,   114,   118,   120,   124,   128,   130,   134,   138,   142,
   146,   148,   152,   156,   158,   162,   164,   168,   170,   174,
   176,   180,   182,   186,   188,   192,   194,   200,   202,   206,
   208,   210,   212,   214,   216,   218,   220,   222,   224,   226,
   228,   230,   234,   236,   239,   242,   245,   250,   252,   254,
   257,   261,   265,   268,   273,   278,   284,   292,   296,   299,
   303,   306,   307,   309,   311,   313,   315,   317,   322,   329,
   337,   346,   356,   363,   365,   369,   375,   382,   390,   399,
   405,   407,   410,   412,   414,   416,   418,   420,   425,   427,
   429,   431,   433,   440,   447,   454,   456,   458,   460,   462,
   464,   466,   468,   470,   472,   474,   476,   478,   480,   482,
   484,   486,   488,   490,   492,   494,   496,   498,   504,   509,
   511,   514,   518,   520,   524,   526,   530,   535,   542,   544,
   546,   548,   550,   552,   554,   556,   558,   560,   562,   564,
   567,   568,   569,   575,   577,   579,   582,   586,   588,   591,
   593,   596,   602,   606,   608,   610,   615,   616,   623,   624,
   633,   634,   642,   644,   646,   648,   649,   652,   656,   659,
   662,   665,   669,   672,   674,   677,   679,   681,   683,   684,
   688,   692,   697,   699,   701,   705,   709,   712,   716,   718,
   721,   727,   729,   731,   733,   735,   737,   739,   741,   743,
   745,   747,   749,   751,   753,   755,   757,   759,   761,   763,
   765,   767,   772,   774,   778,   782,   788,   791,   792,   794,
   796,   798,   801,   804,   807,   811,   816,   820,   822,   825,
   830,   837,   844,   849,   856
};

static const short yyrhs[] = {    49,
     0,   101,     0,    52,     0,    51,     0,    53,     0,    77,
   128,    78,     0,   102,     0,   103,    79,   104,    80,     0,
   105,     0,   103,    83,    55,     0,   103,    58,     0,   103,
    59,     0,   128,     0,   106,     0,   107,     0,   103,    83,
   107,     0,   109,    78,     0,   108,    78,     0,   110,    35,
     0,   110,     0,   110,   126,     0,   109,    84,   126,     0,
   111,    77,     0,   143,     0,    49,     0,    55,     0,   103,
     0,    58,   112,     0,    59,   112,     0,   113,   112,     0,
    77,   144,    78,   112,     0,    91,     0,    89,     0,    88,
     0,    90,     0,   112,     0,   114,    92,   112,     0,   114,
    93,   112,     0,   114,    94,   112,     0,   114,     0,   115,
    91,   114,     0,   115,    89,   114,     0,   115,     0,   116,
    56,   115,     0,   116,    57,   115,     0,   116,     0,   117,
    95,   116,     0,   117,    96,   116,     0,   117,    60,   116,
     0,   117,    61,   116,     0,   117,     0,   118,    62,   117,
     0,   118,    63,   117,     0,   118,     0,   119,    99,   118,
     0,   119,     0,   120,    98,   119,     0,   120,     0,   121,
    97,   120,     0,   121,     0,   122,    64,   121,     0,   122,
     0,   123,    66,   122,     0,   123,     0,   124,    65,   123,
     0,   124,     0,   124,   100,   128,    85,   126,     0,   125,
     0,   112,   127,   126,     0,    86,     0,    67,     0,    68,
     0,    70,     0,    69,     0,    76,     0,    71,     0,    72,
     0,    73,     0,    74,     0,    75,     0,   126,     0,   128,
    84,   126,     0,   125,     0,   131,    87,     0,   139,    87,
     0,   132,    78,     0,   132,    78,    85,    49,     0,   134,
     0,   133,     0,   134,   136,     0,   133,    84,   136,     0,
   141,    49,    77,     0,   143,    49,     0,   143,    49,    86,
   150,     0,   143,    49,    85,    49,     0,   143,    49,    79,
   129,    80,     0,   143,    49,    79,   129,    80,    85,    49,
     0,   142,   137,   135,     0,   137,   135,     0,   142,   137,
   138,     0,   137,   138,     0,     0,    29,     0,    30,     0,
    31,     0,   143,     0,   140,     0,   139,    84,    49,   189,
     0,   139,    84,    49,    79,    80,   189,     0,   139,    84,
    49,    79,   129,    80,   189,     0,   139,    84,    49,    79,
    80,   189,    86,   150,     0,   139,    84,    49,    79,   129,
    80,   189,    86,   150,     0,   139,    84,    49,   189,    86,
   150,     0,   141,     0,   141,    49,   189,     0,   141,    49,
    79,    80,   189,     0,   141,    49,    79,   129,    80,   189,
     0,   141,    49,    79,    80,   189,    86,   150,     0,   141,
    49,    79,   129,    80,   189,    86,   150,     0,   141,    49,
   189,    86,   150,     0,   143,     0,   142,   143,     0,     4,
     0,     3,     0,    33,     0,    32,     0,   144,     0,   144,
    79,   129,    80,     0,    35,     0,     6,     0,     7,     0,
     5,     0,    44,    95,     6,    84,    52,    96,     0,    44,
    95,     7,    84,    52,    96,     0,    44,    95,     5,    84,
    52,    96,     0,    23,     0,    24,     0,    25,     0,    17,
     0,    18,     0,    19,     0,    20,     0,    21,     0,    22,
     0,    26,     0,    27,     0,    28,     0,    47,     0,    43,
     0,    37,     0,    38,     0,    39,     0,    40,     0,    41,
     0,    42,     0,   145,     0,    50,     0,    34,    49,    81,
   146,    82,     0,    34,    81,   146,    82,     0,   147,     0,
   146,   147,     0,   143,   148,    87,     0,   149,     0,   148,
    84,   149,     0,    49,     0,    49,    85,    49,     0,    49,
    79,   129,    80,     0,    49,    79,   129,    80,    85,    49,
     0,   126,     0,   176,     0,   190,     0,   130,     0,   154,
     0,   153,     0,   151,     0,   160,     0,   161,     0,   164,
     0,   171,     0,    81,    82,     0,     0,     0,    81,   155,
   159,   156,    82,     0,   158,     0,   153,     0,    81,    82,
     0,    81,   159,    82,     0,   152,     0,   159,   152,     0,
    87,     0,   128,    87,     0,    14,    77,   128,    78,   162,
     0,   152,    12,   152,     0,   152,     0,   128,     0,   141,
    49,    86,   150,     0,     0,    36,    77,   165,   163,    78,
   157,     0,     0,    11,   166,   152,    36,    77,   128,    78,
    87,     0,     0,    13,    77,   167,   168,   170,    78,   157,
     0,   160,     0,   151,     0,   163,     0,     0,   169,    87,
     0,   169,    87,   128,     0,    10,    87,     0,     9,    87,
     0,    16,    87,     0,    16,   128,    87,     0,    15,    87,
     0,   173,     0,   172,   173,     0,   174,     0,   130,     0,
    87,     0,     0,   131,   175,   158,     0,    81,   177,    82,
     0,    81,   177,    84,    82,     0,   126,     0,   176,     0,
   177,    84,   126,     0,   177,    84,   176,     0,    95,    96,
     0,    95,   179,    96,     0,   180,     0,   179,   180,     0,
   181,    49,    86,   182,    87,     0,     6,     0,     7,     0,
     5,     0,     8,     0,    17,     0,    18,     0,    19,     0,
    20,     0,    21,     0,    22,     0,    23,     0,    24,     0,
    25,     0,   183,     0,    54,     0,   184,     0,   186,     0,
    52,     0,    53,     0,    51,     0,   181,    77,   185,    78,
     0,   183,     0,   185,    84,   183,     0,    81,   185,    82,
     0,    85,    46,    77,    49,    78,     0,    85,    49,     0,
     0,   188,     0,   187,     0,   178,     0,   188,   178,     0,
   188,   187,     0,   187,   178,     0,   188,   187,   178,     0,
    48,    81,   191,    82,     0,    48,    81,    82,     0,   192,
     0,   191,   192,     0,    49,    86,    49,    87,     0,    49,
    86,    95,    49,    96,    87,     0,    49,    86,    77,    49,
    78,    87,     0,    47,    86,    49,    87,     0,    47,    86,
    95,    49,    96,    87,     0,    47,    86,    77,    49,    78,
    87,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   243,   279,   282,   287,   292,   297,   303,   306,   379,   382,
   503,   513,   526,   534,   655,   658,   676,   680,   687,   691,
   698,   704,   713,   721,   782,   794,   804,   807,   817,   827,
   845,   916,   917,   918,   919,   925,   926,   935,   944,   955,
   956,   964,   975,   976,   985,   997,   998,  1008,  1018,  1028,
  1041,  1042,  1053,  1067,  1068,  1080,  1081,  1093,  1094,  1106,
  1107,  1120,  1121,  1134,  1135,  1148,  1149,  1164,  1165,  1179,
  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  1188,  1189,
  1193,  1196,  1207,  1215,  1216,  1224,  1257,  1294,  1297,  1304,
  1312,  1333,  1358,  1369,  1382,  1394,  1412,  1441,  1446,  1456,
  1461,  1471,  1474,  1477,  1480,  1486,  1493,  1496,  1507,  1525,
  1546,  1577,  1611,  1648,  1652,  1665,  1684,  1707,  1741,  1778,
  1829,  1832,  1854,  1857,  1863,  1871,  1879,  1882,  1897,  1901,
  1905,  1909,  1913,  1924,  1935,  1946,  1951,  1956,  1961,  1966,
  1971,  1976,  1981,  1986,  1991,  1997,  2003,  2009,  2014,  2019,
  2024,  2029,  2034,  2039,  2044,  2049,  2054,  2067,  2077,  2085,
  2088,  2103,  2129,  2133,  2139,  2144,  2150,  2160,  2176,  2177,
  2178,  2182,  2186,  2187,  2193,  2194,  2195,  2196,  2197,  2201,
  2202,  2202,  2202,  2210,  2211,  2216,  2219,  2227,  2230,  2236,
  2237,  2241,  2249,  2253,  2263,  2268,  2285,  2285,  2290,  2290,
  2297,  2297,  2310,  2313,  2319,  2322,  2328,  2332,  2339,  2346,
  2353,  2360,  2380,  2389,  2393,  2400,  2403,  2406,  2410,  2498,
  2523,  2526,  2533,  2537,  2541,  2545,  2552,  2556,  2562,  2566,
  2573,  2579,  2580,  2581,  2582,  2583,  2584,  2585,  2586,  2587,
  2588,  2589,  2590,  2591,  2595,  2596,  2597,  2598,  2602,  2605,
  2608,  2614,  2618,  2619,  2623,  2627,  2633,  2637,  2638,  2639,
  2640,  2641,  2642,  2643,  2644,  2648,  2653,  2658,  2660,  2665,
  2666,  2667,  2668,  2669,  2670
};

static const char * const yytname[] = {   "$","error","$undefined.","ATTRIBUTE",
"CONST_QUAL","BOOL_TYPE","FLOAT_TYPE","INT_TYPE","STRING_TYPE","BREAK","CONTINUE",
"DO","ELSE","FOR","IF","DISCARD","RETURN","BVEC2","BVEC3","BVEC4","IVEC2","IVEC3",
"IVEC4","VEC2","VEC3","VEC4","MATRIX2","MATRIX3","MATRIX4","IN_QUAL","OUT_QUAL",
"INOUT_QUAL","UNIFORM","VARYING","STRUCT","VOID_TYPE","WHILE","SAMPLER1D","SAMPLER2D",
"SAMPLER3D","SAMPLERCUBE","SAMPLER1DSHADOW","SAMPLER2DSHADOW","SAMPLERGENERIC",
"VECTOR","MATRIX","REGISTER","TEXTURE","SAMPLERSTATE","IDENTIFIER","TYPE_NAME",
"FLOATCONSTANT","INTCONSTANT","BOOLCONSTANT","STRINGCONSTANT","FIELD_SELECTION",
"LEFT_OP","RIGHT_OP","INC_OP","DEC_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP",
"OR_OP","XOR_OP","MUL_ASSIGN","DIV_ASSIGN","ADD_ASSIGN","MOD_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","SUB_ASSIGN","LEFT_PAREN",
"RIGHT_PAREN","LEFT_BRACKET","RIGHT_BRACKET","LEFT_BRACE","RIGHT_BRACE","DOT",
"COMMA","COLON","EQUAL","SEMICOLON","BANG","DASH","TILDE","PLUS","STAR","SLASH",
"PERCENT","LEFT_ANGLE","RIGHT_ANGLE","VERTICAL_BAR","CARET","AMPERSAND","QUESTION",
"variable_identifier","primary_expression","postfix_expression","integer_expression",
"function_call","function_call_or_method","function_call_generic","function_call_header_no_parameters",
"function_call_header_with_parameters","function_call_header","function_identifier",
"unary_expression","unary_operator","multiplicative_expression","additive_expression",
"shift_expression","relational_expression","equality_expression","and_expression",
"exclusive_or_expression","inclusive_or_expression","logical_and_expression",
"logical_xor_expression","logical_or_expression","conditional_expression","assignment_expression",
"assignment_operator","expression","constant_expression","declaration","function_prototype",
"function_declarator","function_header_with_parameters","function_header","parameter_declarator",
"parameter_declaration","parameter_qualifier","parameter_type_specifier","init_declarator_list",
"single_declaration","fully_specified_type","type_qualifier","type_specifier",
"type_specifier_nonarray","struct_specifier","struct_declaration_list","struct_declaration",
"struct_declarator_list","struct_declarator","initializer","declaration_statement",
"statement","simple_statement","compound_statement","@1","@2","statement_no_new_scope",
"compound_statement_no_new_scope","statement_list","expression_statement","selection_statement",
"selection_rest_statement","condition","iteration_statement","@3","@4","@5",
"for_init_statement","conditionopt","for_rest_statement","jump_statement","translation_unit",
"external_declaration","function_definition","@6","initialization_list","initializer_list",
"annotation","annotation_list","annotation_item","ann_type","ann_literal","ann_numerical_constant",
"ann_literal_constructor","ann_value_list","ann_literal_init_list","register_specifier",
"semantic","type_info","sampler_initializer","sampler_init_list","sampler_init_item",
""
};
#endif

static const short yyr1[] = {     0,
   101,   102,   102,   102,   102,   102,   103,   103,   103,   103,
   103,   103,   104,   105,   106,   106,   107,   107,   108,   108,
   109,   109,   110,   111,   111,   111,   112,   112,   112,   112,
   112,   113,   113,   113,   113,   114,   114,   114,   114,   115,
   115,   115,   116,   116,   116,   117,   117,   117,   117,   117,
   118,   118,   118,   119,   119,   120,   120,   121,   121,   122,
   122,   123,   123,   124,   124,   125,   125,   126,   126,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   128,   128,   129,   130,   130,   131,   131,   132,   132,   133,
   133,   134,   135,   135,   135,   135,   135,   136,   136,   136,
   136,   137,   137,   137,   137,   138,   139,   139,   139,   139,
   139,   139,   139,   140,   140,   140,   140,   140,   140,   140,
   141,   141,   142,   142,   142,   142,   143,   143,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   145,   145,   146,
   146,   147,   148,   148,   149,   149,   149,   149,   150,   150,
   150,   151,   152,   152,   153,   153,   153,   153,   153,   154,
   155,   156,   154,   157,   157,   158,   158,   159,   159,   160,
   160,   161,   162,   162,   163,   163,   165,   164,   166,   164,
   167,   164,   168,   168,   169,   169,   170,   170,   171,   171,
   171,   171,   171,   172,   172,   173,   173,   173,   175,   174,
   176,   176,   177,   177,   177,   177,   178,   178,   179,   179,
   180,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   182,   182,   182,   182,   183,   183,
   183,   184,   185,   185,   186,   187,   188,   189,   189,   189,
   189,   189,   189,   189,   189,   190,   190,   191,   191,   192,
   192,   192,   192,   192,   192
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     3,     1,     4,     1,     3,
     2,     2,     1,     1,     1,     3,     2,     2,     2,     1,
     2,     3,     2,     1,     1,     1,     1,     2,     2,     2,
     4,     1,     1,     1,     1,     1,     3,     3,     3,     1,
     3,     3,     1,     3,     3,     1,     3,     3,     3,     3,
     1,     3,     3,     1,     3,     1,     3,     1,     3,     1,
     3,     1,     3,     1,     3,     1,     5,     1,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     2,     2,     2,     4,     1,     1,     2,
     3,     3,     2,     4,     4,     5,     7,     3,     2,     3,
     2,     0,     1,     1,     1,     1,     1,     4,     6,     7,
     8,     9,     6,     1,     3,     5,     6,     7,     8,     5,
     1,     2,     1,     1,     1,     1,     1,     4,     1,     1,
     1,     1,     6,     6,     6,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     5,     4,     1,
     2,     3,     1,     3,     1,     3,     4,     6,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     0,     0,     5,     1,     1,     2,     3,     1,     2,     1,
     2,     5,     3,     1,     1,     4,     0,     6,     0,     8,
     0,     7,     1,     1,     1,     0,     2,     3,     2,     2,
     2,     3,     2,     1,     2,     1,     1,     1,     0,     3,
     3,     4,     1,     1,     3,     3,     2,     3,     1,     2,
     5,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     4,     1,     3,     3,     5,     2,     0,     1,     1,
     1,     2,     2,     2,     3,     4,     3,     1,     2,     4,
     6,     6,     4,     6,     6
};

static const short yydefact[] = {     0,
   124,   123,   132,   130,   131,   139,   140,   141,   142,   143,
   144,   136,   137,   138,   145,   146,   147,   126,   125,     0,
   129,   150,   151,   152,   153,   154,   155,   149,     0,   148,
   157,   218,   217,   219,     0,    89,   102,     0,   107,   114,
     0,   121,   127,   156,     0,   214,   216,     0,     0,     0,
    84,     0,    86,   102,   103,   104,   105,    90,     0,   102,
     0,    85,   258,   122,     0,   215,     0,     0,     0,   160,
     0,     0,     0,     0,   220,     0,    91,    99,   101,   106,
     0,   258,    92,     0,     0,     0,   261,   260,   259,   115,
     1,     4,     3,     5,    26,     0,     0,     0,    34,    33,
    35,    32,     2,     7,    27,     9,    14,    15,     0,     0,
    20,     0,    36,     0,    40,    43,    46,    51,    54,    56,
    58,    60,    62,    64,    66,    83,     0,    24,     0,   165,
     0,   163,   159,   161,     0,     0,     0,     0,     0,   199,
     0,     0,     0,     0,     0,   181,   186,   190,    36,    68,
    81,     0,   172,     0,   121,   175,   188,   174,   173,     0,
   176,   177,   178,   179,    87,    93,    98,   100,     0,   108,
   258,     0,     0,   257,   234,   232,   233,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   227,     0,   229,
     0,   264,     0,   262,   263,     0,    28,    29,     0,   127,
    11,    12,     0,     0,    18,    17,     0,   129,    21,    23,
    30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   128,   158,     0,     0,     0,   162,     0,     0,     0,
   210,   209,     0,   201,     0,   213,   211,     0,   197,   180,
     0,    71,    72,    74,    73,    76,    77,    78,    79,    80,
    75,    70,     0,     0,   191,   187,   189,     0,     0,     0,
   258,     0,     0,   116,   258,     0,   228,   230,     0,   265,
     0,     0,   169,   120,   170,   171,     6,     0,     0,    13,
    25,    10,    16,    22,    37,    38,    39,    42,    41,    44,
    45,    49,    50,    47,    48,    52,    53,    55,    57,    59,
    61,    63,    65,     0,     0,   166,   164,   135,   133,   134,
     0,     0,     0,   212,     0,   182,    69,    82,     0,    95,
    94,   109,   258,   113,     0,   117,     0,     0,     0,   223,
   224,     0,    31,     8,     0,   167,     0,   204,   203,   206,
     0,   195,     0,     0,     0,    96,     0,   110,   118,     0,
   256,   251,   249,   250,   246,     0,     0,     0,   245,   247,
   248,     0,     0,   267,     0,   268,   221,     0,    67,     0,
     0,   205,     0,     0,   194,   192,     0,     0,   183,     0,
   111,     0,   119,   253,     0,     0,   231,     0,     0,   266,
   269,   222,   225,   226,   168,     0,   207,     0,     0,     0,
   185,   198,   184,    97,   112,   255,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   208,   202,   193,   196,   254,
   252,   273,     0,     0,   270,     0,     0,   200,     0,     0,
     0,     0,   275,   274,   272,   271,     0,     0
};

static const short yydefgoto[] = {   103,
   104,   105,   289,   106,   107,   108,   109,   110,   111,   112,
   149,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   150,   151,   263,   152,   127,   153,   154,
    35,    36,    37,    78,    58,    59,    79,    38,    39,    40,
    41,   128,    43,    44,    69,    70,   131,   132,   284,   156,
   157,   158,   159,   251,   355,   412,   413,   160,   161,   162,
   386,   354,   163,   325,   243,   322,   350,   383,   384,   164,
    45,    46,    47,    52,   285,   342,    87,   189,   190,   191,
   368,   394,   370,   395,   371,    88,    89,    90,   286,   375,
   376
};

static const short yypact[] = {  1512,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -10,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -37,-32768,
-32768,-32768,-32768,    34,    41,    28,    32,     1,-32768,    82,
  1722,-32768,    67,-32768,   274,-32768,-32768,    68,  1722,   173,
-32768,    90,    91,   124,-32768,-32768,-32768,-32768,  1722,   164,
   138,-32768,    16,-32768,  1362,-32768,  1722,   148,  1563,-32768,
    98,   123,   129,   407,-32768,   178,-32768,-32768,-32768,   180,
  1722,    19,-32768,  1058,    40,     9,-32768,   142,    -1,   116,
   167,-32768,-32768,-32768,-32768,  1362,  1362,  1362,-32768,-32768,
-32768,-32768,-32768,-32768,    20,-32768,-32768,-32768,   168,   -32,
  1437,   170,-32768,  1362,   107,   -34,   -13,   -42,   147,   146,
   151,   160,   184,   192,   -23,-32768,   179,-32768,  1609,    66,
    33,-32768,-32768,-32768,   198,   208,   209,   175,   176,-32768,
   187,   188,   181,  1134,   189,   185,-32768,-32768,   150,-32768,
-32768,    46,-32768,    34,   193,-32768,-32768,-32768,-32768,   496,
-32768,-32768,-32768,-32768,-32768,    84,-32768,-32768,  1209,   183,
    23,   191,   195,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   118,-32768,
   226,-32768,   230,-32768,   142,   903,-32768,-32768,    38,   133,
-32768,-32768,  1362,  1676,-32768,-32768,  1362,   204,-32768,-32768,
-32768,  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,
  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,
  1362,-32768,-32768,  1362,   234,   148,-32768,   190,   194,   207,
-32768,-32768,   585,-32768,  1362,-32768,-32768,    60,-32768,-32768,
   585,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1362,  1362,-32768,-32768,-32768,  1362,   236,   903,
    23,   224,   903,   203,    23,   270,-32768,-32768,   237,-32768,
   239,  1285,-32768,-32768,-32768,-32768,-32768,  1362,   247,   244,
-32768,   252,-32768,-32768,-32768,-32768,-32768,   107,   107,   -34,
   -34,   -13,   -13,   -13,   -13,   -42,   -42,   147,   146,   151,
   160,   184,   192,   154,   250,-32768,-32768,-32768,-32768,-32768,
   316,   753,    83,-32768,   828,   585,-32768,-32768,   275,-32768,
-32768,   268,    23,-32768,   903,   271,   278,  1655,   -26,-32768,
-32768,    80,-32768,-32768,  1362,   273,   282,-32768,-32768,   828,
   585,   244,   311,   284,   281,   279,   903,   280,-32768,   903,
-32768,-32768,-32768,-32768,-32768,   153,   288,   283,-32768,-32768,
-32768,   285,   286,-32768,    -9,-32768,-32768,   980,-32768,   318,
  1362,-32768,   287,   290,   357,-32768,   289,   674,-32768,   324,
-32768,   903,-32768,-32768,   101,   153,-32768,   -29,   -27,-32768,
-32768,-32768,-32768,-32768,-32768,    88,  1362,   674,   585,   903,
-32768,-32768,-32768,-32768,-32768,-32768,   153,    97,   291,   327,
   328,   292,   331,   332,   295,   244,-32768,-32768,-32768,-32768,
-32768,-32768,   305,   293,-32768,   306,   294,-32768,   298,   299,
   304,   307,-32768,-32768,-32768,-32768,   392,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,   196,-32768,-32768,-32768,-32768,
   119,-32768,    26,    14,   -31,    11,   171,   169,   166,   174,
   172,   206,-32768,   -60,  -105,-32768,   -97,   -82,    25,    37,
-32768,-32768,-32768,   317,   343,   339,   322,-32768,-32768,  -274,
    59,     0,   308,-32768,   337,   -57,-32768,   201,  -260,    93,
  -153,  -328,-32768,-32768,-32768,    -3,   367,   202,   130,-32768,
-32768,   105,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   393,-32768,-32768,  -271,-32768,   -80,-32768,   272,   125,
-32768,  -334,-32768,    71,-32768,   375,-32768,   -79,-32768,-32768,
    94
};


#define	YYLAST		1772


static const short yytable[] = {    42,
   199,   172,   170,   369,   126,   209,   267,   192,   194,   331,
   341,   134,   334,   175,   176,   177,   178,   219,   220,   419,
   372,   422,   373,   126,    33,   179,   180,   181,   182,   183,
   184,   185,   186,   187,     1,     2,    34,   372,    48,   373,
    64,   230,   217,   218,    42,   206,   248,   420,    68,   423,
   353,   207,   221,   222,   215,   374,   216,    50,    80,   411,
    55,    56,    57,    18,    19,   421,    68,   424,    68,    33,
    49,   134,   400,   155,   359,   353,   231,   201,   202,   411,
    80,    34,   430,   193,    61,   173,   272,    62,   174,   321,
   283,   274,    83,    86,    84,    60,   391,   169,   203,   393,
    85,   294,   204,    85,   188,   290,   404,    85,   126,   -88,
    86,    54,    60,    86,   280,   287,   236,    86,    53,   237,
    51,   264,   175,   176,   177,   178,     1,     2,    68,   264,
    63,   415,   265,   314,   179,   180,   181,   182,   183,   184,
   185,   186,   187,   264,   234,    65,   324,   323,    67,   429,
   235,   315,    55,    56,    57,    18,    19,   327,   328,   155,
   351,   377,   268,   378,   283,   425,   264,   283,   269,   270,
    74,   264,   267,   126,   431,    76,   340,    71,    72,    73,
   417,   135,   416,   113,   417,   329,    82,   302,   303,   304,
   305,   332,    55,    56,    57,   336,   130,   385,   212,   213,
   214,   196,   113,   362,   363,   364,   136,   126,   223,   224,
   288,    65,   137,   277,   197,   198,   252,   253,   254,   255,
   256,   257,   258,   259,   260,   261,   165,   352,   166,   283,
   300,   301,   211,   306,   307,   262,    86,   264,   345,   379,
   298,   299,   155,   -25,   225,   205,   210,   228,   226,   238,
   155,   283,   352,   358,   283,   428,   227,   229,   232,   239,
   240,   241,   242,   244,   245,   249,   250,   246,   273,   -24,
   275,   276,   403,   447,   279,   173,     1,     2,     3,     4,
     5,   -19,   316,   406,   330,   318,   283,   113,   335,   319,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,   320,   333,   283,    18,    19,    20,    21,   426,
    22,    23,    24,    25,    26,    27,    28,    29,   337,   339,
    30,   155,   338,    31,   155,   155,   344,   264,   -26,   346,
   295,   296,   297,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,   155,
   155,   347,   113,   357,   356,   361,   360,   380,   381,   387,
    32,   388,   389,   390,   396,   392,   405,   408,   409,   397,
   398,   399,   414,   407,   410,   433,   434,   432,   435,   436,
   437,   438,   439,   441,   443,   444,   113,   155,   440,   442,
   445,   448,   310,   446,   309,   308,    77,   167,    81,   293,
   312,   311,   168,   129,   427,   200,   343,   155,   155,     1,
     2,     3,     4,     5,   348,   138,   139,   140,    75,   141,
   142,   143,   144,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,   313,   317,    66,    18,    19,
    20,    21,   145,    22,    23,    24,    25,    26,    27,    28,
    29,   349,   326,    30,   382,    91,    31,    92,    93,    94,
   278,    95,   367,   195,    96,    97,   418,     0,   401,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    98,     0,     0,     0,   146,   147,     0,
     0,     0,     0,   148,    99,   100,   101,   102,     1,     2,
     3,     4,     5,     0,   138,   139,   140,     0,   141,   142,
   143,   144,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,     0,     0,     0,    18,    19,    20,
    21,   145,    22,    23,    24,    25,    26,    27,    28,    29,
     0,     0,    30,     0,    91,    31,    92,    93,    94,     0,
    95,     0,     0,    96,    97,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    98,     0,     0,     0,   146,   266,     0,     0,
     0,     0,   148,    99,   100,   101,   102,     1,     2,     3,
     4,     5,     0,   138,   139,   140,     0,   141,   142,   143,
   144,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,     0,     0,     0,    18,    19,    20,    21,
   145,    22,    23,    24,    25,    26,    27,    28,    29,     0,
     0,    30,     0,    91,    31,    92,    93,    94,     0,    95,
     0,     0,    96,    97,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    98,     0,     0,     0,   146,     0,     0,     0,     0,
     0,   148,    99,   100,   101,   102,     1,     2,     3,     4,
     5,     0,   138,   139,   140,     0,   141,   142,   143,   144,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,     0,     0,     0,    18,    19,    20,    21,   145,
    22,    23,    24,    25,    26,    27,    28,    29,     0,     0,
    30,     0,    91,    31,    92,    93,    94,     0,    95,     0,
     0,    96,    97,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    98,     0,     0,     0,    74,     1,     2,     3,     4,     5,
   148,    99,   100,   101,   102,     0,     0,     0,     0,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,     0,     0,     0,    18,    19,    20,    21,     0,    22,
    23,    24,    25,    26,    27,    28,    29,     0,     0,    30,
     0,    91,    31,    92,    93,    94,     0,    95,     0,     0,
    96,    97,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    98,
     1,     2,     3,     4,     5,     0,     0,     0,     0,   148,
    99,   100,   101,   102,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,     0,     0,     0,    18,
    19,    20,    21,     0,    22,    23,    24,    25,    26,    27,
    28,    29,     0,     0,    30,     0,    91,    31,    92,    93,
    94,     0,    95,     0,     0,    96,    97,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    98,     0,     0,     3,     4,     5,
     0,     0,     0,     0,     0,    99,   100,   101,   102,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,     0,     0,     0,     0,     0,    20,    21,     0,    22,
    23,    24,    25,    26,    27,    28,    29,     0,     0,    30,
   281,    91,    31,    92,    93,    94,     0,    95,     0,     0,
    96,    97,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    98,
     0,     0,     0,   282,     3,     4,     5,     0,     0,     0,
    99,   100,   101,   102,     0,     0,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,     0,     0,
     0,     0,     0,    20,    21,     0,    22,    23,    24,    25,
    26,    27,    28,    29,     0,     0,    30,     0,    91,    31,
    92,    93,    94,     0,    95,     0,     0,    96,    97,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    98,     0,     0,     0,
   282,   402,     3,     4,     5,     0,     0,    99,   100,   101,
   102,     0,     0,     0,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,     0,     0,     0,     0,
     0,    20,    21,     0,    22,    23,    24,    25,    26,    27,
    28,    29,     0,     0,    30,     0,    91,    31,    92,    93,
    94,     0,    95,     0,     0,    96,    97,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    98,     0,     0,   171,     3,     4,
     5,     0,     0,     0,     0,    99,   100,   101,   102,     0,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,     0,     0,     0,     0,     0,    20,    21,     0,
    22,    23,    24,    25,    26,    27,    28,    29,     0,     0,
    30,     0,    91,    31,    92,    93,    94,     0,    95,     0,
     0,    96,    97,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    98,     0,     0,     3,     4,     5,     0,     0,     0,     0,
   247,    99,   100,   101,   102,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,     0,     0,     0,
     0,     0,    20,    21,     0,    22,    23,    24,    25,    26,
    27,    28,    29,     0,     0,    30,     0,    91,    31,    92,
    93,    94,     0,    95,     0,     0,    96,    97,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    98,     0,     0,   271,     3,
     4,     5,     0,     0,     0,     0,    99,   100,   101,   102,
     0,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,     0,     0,     0,     0,     0,    20,    21,
     0,    22,    23,    24,    25,    26,    27,    28,    29,     0,
     0,    30,     0,    91,    31,    92,    93,    94,     0,    95,
     0,     0,    96,    97,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    98,     0,     0,     0,   282,     3,     4,     5,     0,
     0,     0,    99,   100,   101,   102,     0,     0,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
     0,     0,     0,     0,     0,    20,    21,     0,    22,    23,
    24,    25,    26,    27,    28,    29,     0,     0,    30,     0,
    91,    31,    92,    93,    94,     0,    95,     0,     0,    96,
    97,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    98,     0,
     0,     3,     4,     5,     0,     0,     0,     0,     0,    99,
   100,   101,   102,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,     0,     0,     0,     0,     0,
    20,   208,     0,    22,    23,    24,    25,    26,    27,    28,
    29,     0,     0,    30,     0,    91,    31,    92,    93,    94,
     0,    95,     0,     0,    96,    97,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    98,     1,     2,     3,     4,     5,     0,
     0,     0,     0,     0,    99,   100,   101,   102,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
     0,     0,     0,    18,    19,    20,    21,     0,    22,    23,
    24,    25,    26,    27,    28,    29,     0,     0,    30,     0,
     0,    31,     0,     0,     0,     0,     0,     3,     4,     5,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,     0,     0,     0,     0,     0,    20,    21,    32,    22,
    23,    24,    25,    26,    27,    28,    29,     0,     0,    30,
     0,     0,    31,     3,     4,     5,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,     0,     0,     0,
     0,     0,    20,    21,   133,    22,    23,    24,    25,    26,
    27,    28,    29,     0,     0,    30,     0,     0,    31,   175,
   176,   177,   178,     0,     0,     0,     0,     0,     0,     0,
     0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     3,     4,     5,     0,     0,     0,     0,     0,     0,     0,
   233,     0,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,     0,   362,   363,   364,   365,    20,
    21,     0,    22,    23,    24,    25,    26,    27,    28,    29,
     0,     0,    30,     0,   291,    31,     3,     4,     5,     0,
   292,     0,     0,     0,     0,   366,     0,     0,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
     0,     0,     0,     0,     0,    20,    21,     0,    22,    23,
    24,    25,    26,    27,    28,    29,     0,     0,    30,     0,
     0,    31
};

static const short yycheck[] = {     0,
    98,    84,    82,   338,    65,   111,   160,    88,    89,   270,
   282,    69,   273,     5,     6,     7,     8,    60,    61,    49,
    47,    49,    49,    84,     0,    17,    18,    19,    20,    21,
    22,    23,    24,    25,     3,     4,     0,    47,    49,    49,
    41,    65,    56,    57,    45,    78,   144,    77,    49,    77,
   325,    84,    95,    96,    89,    82,    91,    95,    59,   388,
    29,    30,    31,    32,    33,    95,    67,    95,    69,    45,
    81,   129,    82,    74,   335,   350,   100,    58,    59,   408,
    81,    45,   417,    85,    84,    46,   169,    87,    49,   243,
   196,   171,    77,    95,    79,    37,   357,    79,    79,   360,
    85,   207,    83,    85,    96,   203,   378,    85,   169,    78,
    95,    84,    54,    95,   195,    78,    84,    95,    78,    87,
    87,    84,     5,     6,     7,     8,     3,     4,   129,    84,
    49,   392,    87,   231,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    84,    79,    79,    87,   245,    81,   410,
    85,   234,    29,    30,    31,    32,    33,   263,   264,   160,
    78,    82,    79,    84,   270,    78,    84,   273,    85,    86,
    81,    84,   326,   234,    78,    85,   282,     5,     6,     7,
    84,    84,    82,    65,    84,   268,    49,   219,   220,   221,
   222,   271,    29,    30,    31,   275,    49,   351,    92,    93,
    94,    86,    84,    51,    52,    53,    84,   268,    62,    63,
    78,    79,    84,    96,    96,    97,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    49,   325,    49,   335,
   217,   218,   114,   223,   224,    86,    95,    84,    85,   345,
   215,   216,   243,    77,    99,    78,    77,    64,    98,    52,
   251,   357,   350,   333,   360,   409,    97,    66,    80,    52,
    52,    87,    87,    77,    77,    77,    82,    87,    86,    77,
    80,    77,   378,     0,    49,    46,     3,     4,     5,     6,
     7,    78,    49,   381,    49,    96,   392,   169,    86,    96,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    96,    80,   410,    32,    33,    34,    35,   407,
    37,    38,    39,    40,    41,    42,    43,    44,    49,    81,
    47,   322,    86,    50,   325,   326,    80,    84,    77,    80,
   212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   350,
   351,    36,   234,    86,    80,    78,    86,    85,    77,    49,
    87,    78,    82,    85,    77,    86,    49,    78,    12,    87,
    86,    86,    49,    87,    86,    49,    49,    87,    87,    49,
    49,    87,    78,    78,    87,    87,   268,   388,    96,    96,
    87,     0,   227,    87,   226,   225,    54,    81,    60,   204,
   229,   228,    81,    67,   408,    98,   288,   408,   409,     3,
     4,     5,     6,     7,   322,     9,    10,    11,    52,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,   230,   236,    45,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,   322,   251,    47,   350,    49,    50,    51,    52,    53,
   189,    55,   338,    89,    58,    59,   396,    -1,   375,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    77,    -1,    -1,    -1,    81,    82,    -1,
    -1,    -1,    -1,    87,    88,    89,    90,    91,     3,     4,
     5,     6,     7,    -1,     9,    10,    11,    -1,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    -1,    -1,    -1,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    -1,    -1,    47,    -1,    49,    50,    51,    52,    53,    -1,
    55,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
    -1,    -1,    87,    88,    89,    90,    91,     3,     4,     5,
     6,     7,    -1,     9,    10,    11,    -1,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    -1,    -1,    -1,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    -1,
    -1,    47,    -1,    49,    50,    51,    52,    53,    -1,    55,
    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
    -1,    87,    88,    89,    90,    91,     3,     4,     5,     6,
     7,    -1,     9,    10,    11,    -1,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    -1,    -1,    -1,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    -1,    -1,
    47,    -1,    49,    50,    51,    52,    53,    -1,    55,    -1,
    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    77,    -1,    -1,    -1,    81,     3,     4,     5,     6,     7,
    87,    88,    89,    90,    91,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    -1,    -1,    -1,    32,    33,    34,    35,    -1,    37,
    38,    39,    40,    41,    42,    43,    44,    -1,    -1,    47,
    -1,    49,    50,    51,    52,    53,    -1,    55,    -1,    -1,
    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,
     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,    87,
    88,    89,    90,    91,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    32,
    33,    34,    35,    -1,    37,    38,    39,    40,    41,    42,
    43,    44,    -1,    -1,    47,    -1,    49,    50,    51,    52,
    53,    -1,    55,    -1,    -1,    58,    59,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    77,    -1,    -1,     5,     6,     7,
    -1,    -1,    -1,    -1,    -1,    88,    89,    90,    91,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    37,
    38,    39,    40,    41,    42,    43,    44,    -1,    -1,    47,
    48,    49,    50,    51,    52,    53,    -1,    55,    -1,    -1,
    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,
    -1,    -1,    -1,    81,     5,     6,     7,    -1,    -1,    -1,
    88,    89,    90,    91,    -1,    -1,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,    40,
    41,    42,    43,    44,    -1,    -1,    47,    -1,    49,    50,
    51,    52,    53,    -1,    55,    -1,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,
    81,    82,     5,     6,     7,    -1,    -1,    88,    89,    90,
    91,    -1,    -1,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
    -1,    34,    35,    -1,    37,    38,    39,    40,    41,    42,
    43,    44,    -1,    -1,    47,    -1,    49,    50,    51,    52,
    53,    -1,    55,    -1,    -1,    58,    59,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    77,    -1,    -1,    80,     5,     6,
     7,    -1,    -1,    -1,    -1,    88,    89,    90,    91,    -1,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,
    37,    38,    39,    40,    41,    42,    43,    44,    -1,    -1,
    47,    -1,    49,    50,    51,    52,    53,    -1,    55,    -1,
    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    77,    -1,    -1,     5,     6,     7,    -1,    -1,    -1,    -1,
    87,    88,    89,    90,    91,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    -1,    -1,    -1,
    -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
    42,    43,    44,    -1,    -1,    47,    -1,    49,    50,    51,
    52,    53,    -1,    55,    -1,    -1,    58,    59,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,    80,     5,
     6,     7,    -1,    -1,    -1,    -1,    88,    89,    90,    91,
    -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
    -1,    37,    38,    39,    40,    41,    42,    43,    44,    -1,
    -1,    47,    -1,    49,    50,    51,    52,    53,    -1,    55,
    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    77,    -1,    -1,    -1,    81,     5,     6,     7,    -1,
    -1,    -1,    88,    89,    90,    91,    -1,    -1,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    37,    38,
    39,    40,    41,    42,    43,    44,    -1,    -1,    47,    -1,
    49,    50,    51,    52,    53,    -1,    55,    -1,    -1,    58,
    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
    -1,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    88,
    89,    90,    91,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
    34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
    44,    -1,    -1,    47,    -1,    49,    50,    51,    52,    53,
    -1,    55,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    77,     3,     4,     5,     6,     7,    -1,
    -1,    -1,    -1,    -1,    88,    89,    90,    91,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    -1,    -1,    -1,    32,    33,    34,    35,    -1,    37,    38,
    39,    40,    41,    42,    43,    44,    -1,    -1,    47,    -1,
    -1,    50,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    87,    37,
    38,    39,    40,    41,    42,    43,    44,    -1,    -1,    47,
    -1,    -1,    50,     5,     6,     7,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    -1,    -1,    -1,
    -1,    -1,    34,    35,    82,    37,    38,    39,    40,    41,
    42,    43,    44,    -1,    -1,    47,    -1,    -1,    50,     5,
     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    82,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    -1,    51,    52,    53,    54,    34,
    35,    -1,    37,    38,    39,    40,    41,    42,    43,    44,
    -1,    -1,    47,    -1,    49,    50,     5,     6,     7,    -1,
    55,    -1,    -1,    -1,    -1,    81,    -1,    -1,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    37,    38,
    39,    40,    41,    42,    43,    44,    -1,    -1,    47,    -1,
    -1,    50
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not __GNUC__ */
#if HAVE_ALLOCA_H
#include <alloca.h>
#else /* not HAVE_ALLOCA_H */
#ifdef _AIX
 #pragma alloca
#else /* not _AIX */
char *alloca ();
#endif /* not _AIX */
#endif /* not HAVE_ALLOCA_H */
#endif /* not __GNUC__ */

extern void yyerror(char* s);

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if (defined (MSDOS) && !defined (__TURBOC__)) || defined (WIN32)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     size_t count;
{
  register char *f = from;
  register char *t = to;
  register size_t i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, size_t count)
{
  register char *f = from;
  register char *t = to;
  register size_t i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifndef YYPARSE_PARAM_DECL
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif 
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

extern YY_DECL;

int
yyparse(YYPARSE_PARAM_DECL YYPARSE_PARAM) {
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  size_t yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      size_t size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 243 "hlslang.y"
{
        // The symbol table search was done in the lexical phase
        const TSymbol* symbol = yyvsp[0].lex.symbol;
        const TVariable* variable;
        if (symbol == 0) {
            parseContext.error(yyvsp[0].lex.line, "undeclared identifier", yyvsp[0].lex.string->c_str(), "");
            parseContext.recover();
            TType type(EbtFloat);
            TVariable* fakeVariable = new TVariable(yyvsp[0].lex.string, type);
            parseContext.symbolTable.insert(*fakeVariable);
            variable = fakeVariable;
        } else {
            // This identifier can only be a variable type symbol 
            if (! symbol->isVariable()) {
                parseContext.error(yyvsp[0].lex.line, "variable expected", yyvsp[0].lex.string->c_str(), "");
                parseContext.recover();
            }
            variable = static_cast<const TVariable*>(symbol);
        }

        // don't delete $1.string, it's used by error recovery, and the pool
        // pop will reclaim the memory

        if (variable->getType().getQualifier() == EvqConst ) {
            constUnion* constArray = variable->getConstPointer();
            TType t(variable->getType());
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(constArray, t, yyvsp[0].lex.line);        
        } else
            yyval.interm.intermTypedNode = parseContext.intermediate.addSymbol(variable->getUniqueId(), 
                                                     variable->getName(),
                                                     variable->getInfo(), 
                                                     variable->getType(), yyvsp[0].lex.line);
    ;
    break;}
case 2:
#line 279 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 3:
#line 282 "hlslang.y"
{        
        constUnion *unionArray = new constUnion[1];
        unionArray->setIConst(yyvsp[0].lex.i);
        yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EvqConst), yyvsp[0].lex.line);
    ;
    break;}
case 4:
#line 287 "hlslang.y"
{
        constUnion *unionArray = new constUnion[1];
        unionArray->setFConst(yyvsp[0].lex.f);
        yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtFloat, EvqConst), yyvsp[0].lex.line);
    ;
    break;}
case 5:
#line 292 "hlslang.y"
{
        constUnion *unionArray = new constUnion[1];
        unionArray->setBConst(yyvsp[0].lex.b);
        yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[0].lex.line);
    ;
    break;}
case 6:
#line 297 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[-1].interm.intermTypedNode;
    ;
    break;}
case 7:
#line 303 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 8:
#line 306 "hlslang.y"
{
        if (!yyvsp[-3].interm.intermTypedNode->isArray() && !yyvsp[-3].interm.intermTypedNode->isMatrix() && !yyvsp[-3].interm.intermTypedNode->isVector()) {
            if (yyvsp[-3].interm.intermTypedNode->getAsSymbolNode())
                parseContext.error(yyvsp[-2].lex.line, " left of '[' is not of type array, matrix, or vector ", yyvsp[-3].interm.intermTypedNode->getAsSymbolNode()->getSymbol().c_str(), "");
            else
                parseContext.error(yyvsp[-2].lex.line, " left of '[' is not of type array, matrix, or vector ", "expression", "");
            parseContext.recover();
        }
        if (yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst && yyvsp[-1].interm.intermTypedNode->getQualifier() == EvqConst) {
            if (yyvsp[-3].interm.intermTypedNode->isArray()) { // constant folding for arrays
                yyval.interm.intermTypedNode = parseContext.addConstArrayNode(yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst(), yyvsp[-3].interm.intermTypedNode, yyvsp[-2].lex.line);
            } else if (yyvsp[-3].interm.intermTypedNode->isVector()) {  // constant folding for vectors
                TVectorFields fields;                
                fields.num = 1;
                fields.offsets[0] = yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst(); // need to do it this way because v.xy sends fields integer array
                yyval.interm.intermTypedNode = parseContext.addConstVectorNode(fields, yyvsp[-3].interm.intermTypedNode, yyvsp[-2].lex.line);
            } else if (yyvsp[-3].interm.intermTypedNode->isMatrix()) { // constant folding for matrices
                yyval.interm.intermTypedNode = parseContext.addConstMatrixNode(yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst(), yyvsp[-3].interm.intermTypedNode, yyvsp[-2].lex.line);
            } 
        } else {
            if (yyvsp[-1].interm.intermTypedNode->getQualifier() == EvqConst) {
                if ((yyvsp[-3].interm.intermTypedNode->isVector() || yyvsp[-3].interm.intermTypedNode->isMatrix()) && yyvsp[-3].interm.intermTypedNode->getType().getNominalSize() <= yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst() && !yyvsp[-3].interm.intermTypedNode->isArray() ) {
                    parseContext.error(yyvsp[-2].lex.line, "", "[", "field selection out of range '%d'", yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst());
                    parseContext.recover();
                } else {
                    if (yyvsp[-3].interm.intermTypedNode->isArray()) {
                        if (yyvsp[-3].interm.intermTypedNode->getType().getArraySize() == 0) {
                            if (yyvsp[-3].interm.intermTypedNode->getType().getMaxArraySize() <= yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst()) {
                                if (parseContext.arraySetMaxSize(yyvsp[-3].interm.intermTypedNode->getAsSymbolNode(), yyvsp[-3].interm.intermTypedNode->getTypePointer(), yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst(), true, yyvsp[-2].lex.line))
                                    parseContext.recover(); 
                            } else {
                                if (parseContext.arraySetMaxSize(yyvsp[-3].interm.intermTypedNode->getAsSymbolNode(), yyvsp[-3].interm.intermTypedNode->getTypePointer(), 0, false, yyvsp[-2].lex.line))
                                    parseContext.recover(); 
                            }
                        } else if ( yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst() >= yyvsp[-3].interm.intermTypedNode->getType().getArraySize()) {
                            parseContext.error(yyvsp[-2].lex.line, "", "[", "array index out of range '%d'", yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst());
                            parseContext.recover();
                        }
                    }
                    yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexDirect, yyvsp[-3].interm.intermTypedNode, yyvsp[-1].interm.intermTypedNode, yyvsp[-2].lex.line);
                }
            } else {
                if (yyvsp[-3].interm.intermTypedNode->isArray() && yyvsp[-3].interm.intermTypedNode->getType().getArraySize() == 0) {
                    parseContext.error(yyvsp[-2].lex.line, "", "[", "array must be redeclared with a size before being indexed with a variable");
                    parseContext.recover();
                }
                
                yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexIndirect, yyvsp[-3].interm.intermTypedNode, yyvsp[-1].interm.intermTypedNode, yyvsp[-2].lex.line);
            }
        } 
        if (yyval.interm.intermTypedNode == 0) {
            constUnion *unionArray = new constUnion[1];
            unionArray->setFConst(0.0f);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtFloat, EvqConst), yyvsp[-2].lex.line);
        } else if (yyvsp[-3].interm.intermTypedNode->isArray()) {
            if (yyvsp[-3].interm.intermTypedNode->getType().getStruct())
                yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getType().getStruct(), yyvsp[-3].interm.intermTypedNode->getType().getTypeName()));
            else
                yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), EvqTemporary, yyvsp[-3].interm.intermTypedNode->getNominalSize(), yyvsp[-3].interm.intermTypedNode->isMatrix()));
                
            if (yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst)
                yyval.interm.intermTypedNode->getTypePointer()->changeQualifier(EvqConst);
        } else if (yyvsp[-3].interm.intermTypedNode->isMatrix() && yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst)         
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), EvqConst, yyvsp[-3].interm.intermTypedNode->getNominalSize()));     
        else if (yyvsp[-3].interm.intermTypedNode->isMatrix())            
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), EvqTemporary, yyvsp[-3].interm.intermTypedNode->getNominalSize()));     
        else if (yyvsp[-3].interm.intermTypedNode->isVector() && yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst)          
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), EvqConst));     
        else if (yyvsp[-3].interm.intermTypedNode->isVector())       
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), EvqTemporary));
        else
            yyval.interm.intermTypedNode->setType(yyvsp[-3].interm.intermTypedNode->getType()); 
    ;
    break;}
case 9:
#line 379 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 10:
#line 382 "hlslang.y"
{        
        if (yyvsp[-2].interm.intermTypedNode->isArray()) {
            parseContext.error(yyvsp[0].lex.line, "cannot apply dot operator to an array", ".", "");
            parseContext.recover();
        }

        if (yyvsp[-2].interm.intermTypedNode->isVector()) {
            TVectorFields fields;
            if (! parseContext.parseVectorFields(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode->getNominalSize(), fields, yyvsp[0].lex.line)) {
                fields.num = 1;
                fields.offsets[0] = 0;
                parseContext.recover();
            }

            if (yyvsp[-2].interm.intermTypedNode->getType().getQualifier() == EvqConst) { // constant folding for vector fields
                yyval.interm.intermTypedNode = parseContext.addConstVectorNode(fields, yyvsp[-2].interm.intermTypedNode, yyvsp[0].lex.line);
                if (yyval.interm.intermTypedNode == 0) {
                    parseContext.recover();
                    yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
                }
                else
                    yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType(), EvqConst, (int) (*yyvsp[0].lex.string).size()));
            } else {
                if (fields.num == 1) {
                    constUnion *unionArray = new constUnion[1];
                    unionArray->setIConst(fields.offsets[0]);
                    TIntermTyped* index = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EvqConst), yyvsp[0].lex.line);
                    yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexDirect, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);
                    yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType()));
                } else {
                    TString vectorString = *yyvsp[0].lex.string;
                    TIntermTyped* index = parseContext.intermediate.addSwizzle(fields, yyvsp[0].lex.line);                
                    yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpVectorSwizzle, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);
                    yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType(),EvqTemporary, (int) vectorString.size()));  
                }
            }
        } else if (yyvsp[-2].interm.intermTypedNode->isMatrix()) {
            TVectorFields fields;
            if (! parseContext.parseMatrixFields(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode->getNominalSize(), fields, yyvsp[0].lex.line)) {
                fields.num = 1;
                fields.offsets[0] = 0;
                parseContext.recover();
            }

            TString vectorString = *yyvsp[0].lex.string;
            TIntermTyped* index = parseContext.intermediate.addSwizzle(fields, yyvsp[0].lex.line);                
            yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpMatrixSwizzle, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType(),EvqTemporary, fields.num));
                    
        } else if (yyvsp[-2].interm.intermTypedNode->getBasicType() == EbtStruct) {
            bool fieldFound = false;
            TTypeList* fields = yyvsp[-2].interm.intermTypedNode->getType().getStruct();
            if (fields == 0) {
                parseContext.error(yyvsp[-1].lex.line, "structure has no fields", "Internal Error", "");
                parseContext.recover();
                yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
            } else {
                unsigned int i;
                for (i = 0; i < fields->size(); ++i) {
                    if ((*fields)[i].type->getFieldName() == *yyvsp[0].lex.string) {
                        fieldFound = true;
                        break;
                    }                
                }
                if (fieldFound) {
                    if (yyvsp[-2].interm.intermTypedNode->getType().getQualifier() == EvqConst) {
                        yyval.interm.intermTypedNode = parseContext.addConstStruct(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode, yyvsp[-1].lex.line);
                        if (yyval.interm.intermTypedNode == 0) {
                            parseContext.recover();
                            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
                        }
                        else {
                            yyval.interm.intermTypedNode->setType(*(*fields)[i].type);
                            // change the qualifier of the return type, not of the structure field
                            // as the structure definition is shared between various structures.
                            yyval.interm.intermTypedNode->getTypePointer()->changeQualifier(EvqConst);
                        }
                    } else {
                        constUnion *unionArray = new constUnion[1];
                        unionArray->setIConst(i);
                        TIntermTyped* index = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EvqConst), yyvsp[0].lex.line);
                        yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexDirectStruct, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);                
                        yyval.interm.intermTypedNode->setType(*(*fields)[i].type);
                    }
                } else {
                    parseContext.error(yyvsp[-1].lex.line, " no such field in structure", yyvsp[0].lex.string->c_str(), "");
                    parseContext.recover();
                    yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
                }
            }
        } else if (yyvsp[-2].interm.intermTypedNode->getNominalSize() == 1) {

            // HLSL allows ".xxxx" field selection on single component floats.  Handle that here.
            TVectorFields fields;

            // Check to make sure only the "x" component is accessed.
            if (! parseContext.parseVectorFields(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode->getNominalSize(), fields, yyvsp[0].lex.line)) {
                fields.num = 1;
                fields.offsets[0] = 0;
                parseContext.recover();
            }

            if (yyvsp[-2].interm.intermTypedNode->getType().getQualifier() == EvqConst) { 
                parseContext.error(yyvsp[-1].lex.line, " field selection requires structure, vector, or matrix on left hand side", yyvsp[0].lex.string->c_str(), "");
                parseContext.recover();
                yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
            } else {    

               // Create the appropriate constructor based on the number of ".x"'s there are in the selection field
                TString vectorString = *yyvsp[0].lex.string;
                yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType(),EvqTemporary, (int) vectorString.size()));  
                yyval.interm.intermTypedNode = parseContext.constructBuiltIn ( &yyval.interm.intermTypedNode->getType(), parseContext.getConstructorOp(yyval.interm.intermTypedNode->getType()),
                                                     yyval.interm.intermTypedNode, yyvsp[-2].interm.intermTypedNode->getLine(), false);                               
            }           
        } else {
            parseContext.error(yyvsp[-1].lex.line, " field selection requires structure, vector, or matrix on left hand side", yyvsp[0].lex.string->c_str(), "");
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
        // don't delete $3.string, it's from the pool
    ;
    break;}
case 11:
#line 503 "hlslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[0].lex.line, "++", yyvsp[-1].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(EOpPostIncrement, yyvsp[-1].interm.intermTypedNode, yyvsp[0].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[0].lex.line, "++", yyvsp[-1].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-1].interm.intermTypedNode;
        }
    ;
    break;}
case 12:
#line 513 "hlslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[0].lex.line, "--", yyvsp[-1].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(EOpPostDecrement, yyvsp[-1].interm.intermTypedNode, yyvsp[0].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[0].lex.line, "--", yyvsp[-1].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-1].interm.intermTypedNode;
        }
    ;
    break;}
case 13:
#line 526 "hlslang.y"
{
        if (parseContext.integerErrorCheck(yyvsp[0].interm.intermTypedNode, "[]"))
            parseContext.recover();
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; 
    ;
    break;}
case 14:
#line 534 "hlslang.y"
{
        TFunction* fnCall = yyvsp[0].interm.function;
        TOperator op = fnCall->getBuiltInOp();
        
        if (op == EOpArrayLength) {
            if (yyvsp[0].interm.intermNode->getAsTyped() == 0 || yyvsp[0].interm.intermNode->getAsTyped()->getType().getArraySize() == 0) {
                parseContext.error(yyvsp[0].interm.line, "", fnCall->getName().c_str(), "array must be declared with a size before using this method");
                parseContext.recover();
            }

            constUnion *unionArray = new constUnion[1];
            unionArray->setIConst(yyvsp[0].interm.intermNode->getAsTyped()->getType().getArraySize());
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EvqConst), yyvsp[0].interm.line);
        } else if (op != EOpNull) {
            //
            // Then this should be a constructor.
            // Don't go through the symbol table for constructors.  
            // Their parameters will be verified algorithmically.
            //
            TType type(EbtVoid);  // use this to get the type back
            if (parseContext.constructorErrorCheck(yyvsp[0].interm.line, yyvsp[0].interm.intermNode, *fnCall, op, &type)) {
                yyval.interm.intermTypedNode = 0;
            } else {
                //
                // It's a constructor, of type 'type'.
                //
                yyval.interm.intermTypedNode = parseContext.addConstructor(yyvsp[0].interm.intermNode, &type, op, fnCall, yyvsp[0].interm.line);
            }
            
            if (yyval.interm.intermTypedNode == 0) {        
                parseContext.recover();
                yyval.interm.intermTypedNode = parseContext.intermediate.setAggregateOperator(0, op, yyvsp[0].interm.line);
            }
            yyval.interm.intermTypedNode->setType(type);
        } else {
            //
            // Not a constructor.  Find it in the symbol table.
            //
            const TFunction* fnCandidate;
            bool builtIn;
            fnCandidate = parseContext.findFunction(yyvsp[0].interm.line, fnCall, &builtIn);
            
            if ( fnCandidate && fnCandidate->getMangledName() != fnCall->getMangledName()) {
                //add constructors to arguments to ensure that they have proper types
                TIntermNode *temp = parseContext.promoteFunctionArguments( yyvsp[0].interm.intermNode,
                                      fnCandidate);
                if (temp)
                    yyvsp[0].interm.intermNode = temp;
                else {
                    parseContext.error( yyvsp[0].interm.intermNode->getLine(), " unable to suitably promote arguments to function",
                                        fnCandidate->getName().c_str(), "");
                    fnCandidate = 0;
                }
            }
            
            if (fnCandidate) {
                //
                // A declared function.  But, it might still map to a built-in
                // operation.
                //
                op = fnCandidate->getBuiltInOp();
                if (builtIn && op != EOpNull) {
                    //
                    // A function call mapped to a built-in operation.
                    //
                    if (fnCandidate->getParamCount() == 1) {
                        //
                        // Treat it like a built-in unary operator.
                        //
                        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(op, yyvsp[0].interm.intermNode, 0, parseContext.symbolTable);
                        if (yyval.interm.intermTypedNode == 0)  {
                            parseContext.error(yyvsp[0].interm.intermNode->getLine(), " wrong operand type", "Internal Error", 
                                "built in unary operator function.  Type: %s",
                                static_cast<TIntermTyped*>(yyvsp[0].interm.intermNode)->getCompleteString().c_str());
                            YYERROR;
                        }
                    } else {
                        yyval.interm.intermTypedNode = parseContext.intermediate.setAggregateOperator(yyvsp[0].interm.intermAggregate, op, yyvsp[0].interm.line);
                    }
                } else {
                    // This is a real function call
                    
                    yyval.interm.intermTypedNode = parseContext.intermediate.setAggregateOperator(yyvsp[0].interm.intermAggregate, EOpFunctionCall, yyvsp[0].interm.line);
                    yyval.interm.intermTypedNode->setType(fnCandidate->getReturnType());                   
                    
                    // this is how we know whether the given function is a builtIn function or a user defined function
                    // if builtIn == false, it's a userDefined -> could be an overloaded builtIn function also
                    // if builtIn == true, it's definitely a builtIn function with EOpNull
                    if (!builtIn) 
                        yyval.interm.intermTypedNode->getAsAggregate()->setUserDefined(); 
                    yyval.interm.intermTypedNode->getAsAggregate()->setName(fnCandidate->getMangledName());
                    yyval.interm.intermTypedNode->getAsAggregate()->setPlainName(fnCandidate->getName());

                    TQualifier qual;
                    TQualifierList& qualifierList = yyval.interm.intermTypedNode->getAsAggregate()->getQualifier();
                    for (int i = 0; i < fnCandidate->getParamCount(); ++i) {
                        qual = (*fnCandidate)[i].type->getQualifier();
                        if (qual == EvqOut || qual == EvqInOut) {
                            if (parseContext.lValueErrorCheck(yyval.interm.intermTypedNode->getLine(), "assign", yyval.interm.intermTypedNode->getAsAggregate()->getSequence()[i]->getAsTyped())) {
                                parseContext.error(yyvsp[0].interm.intermNode->getLine(), "Constant value cannot be passed for 'out' or 'inout' parameters.", "Error", "");
                                parseContext.recover();
                            }
                        }
                        qualifierList.push_back(qual);
                    }
                }
                yyval.interm.intermTypedNode->setType(fnCandidate->getReturnType());
            } else {
                // error message was put out by PaFindFunction()
                // Put on a dummy node for error recovery
                constUnion *unionArray = new constUnion[1];
                unionArray->setFConst(0.0f);
                yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtFloat, EvqConst), yyvsp[0].interm.line);
                parseContext.recover();
            }
        }
        delete fnCall;
    ;
    break;}
case 15:
#line 655 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
    ;
    break;}
case 16:
#line 658 "hlslang.y"
{
        if (yyvsp[-2].interm.intermTypedNode->isArray() && yyvsp[0].interm.function->getName() == "length") {
            //
            // implement array.length()
            //            
            yyval.interm = yyvsp[0].interm;
            yyval.interm.intermNode = yyvsp[-2].interm.intermTypedNode;
            yyval.interm.function->relateToOperator(EOpArrayLength);
            
        } else {
            parseContext.error(yyvsp[0].interm.line, "methods are not supported", "", "");
            parseContext.recover();
            yyval.interm = yyvsp[0].interm;
        }
    ;
    break;}
case 17:
#line 676 "hlslang.y"
{
        yyval.interm = yyvsp[-1].interm;
        yyval.interm.line = yyvsp[0].lex.line;
    ;
    break;}
case 18:
#line 680 "hlslang.y"
{
        yyval.interm = yyvsp[-1].interm;
        yyval.interm.line = yyvsp[0].lex.line;
    ;
    break;}
case 19:
#line 687 "hlslang.y"
{
        yyval.interm.function = yyvsp[-1].interm.function;
        yyval.interm.intermNode = 0;
    ;
    break;}
case 20:
#line 691 "hlslang.y"
{
        yyval.interm.function = yyvsp[0].interm.function;
        yyval.interm.intermNode = 0;
    ;
    break;}
case 21:
#line 698 "hlslang.y"
{
        TParameter param = { 0, 0, new TType(yyvsp[0].interm.intermTypedNode->getType()) };
        yyvsp[-1].interm.function->addParameter(param);
        yyval.interm.function = yyvsp[-1].interm.function;
        yyval.interm.intermNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 22:
#line 704 "hlslang.y"
{
        TParameter param = { 0, 0, new TType(yyvsp[0].interm.intermTypedNode->getType()) };
        yyvsp[-2].interm.function->addParameter(param);
        yyval.interm.function = yyvsp[-2].interm.function;
        yyval.interm.intermNode = parseContext.intermediate.growAggregate(yyvsp[-2].interm.intermNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line);
    ;
    break;}
case 23:
#line 713 "hlslang.y"
{
        yyval.interm.function = yyvsp[-1].interm.function;
    ;
    break;}
case 24:
#line 721 "hlslang.y"
{
        //
        // Constructor
        //
        if (yyvsp[0].interm.type.array) {
            //TODO : figure out how to deal with array constructors            
        }

        if (yyvsp[0].interm.type.userDef) {
            TString tempString = "";
            TType type(yyvsp[0].interm.type);
            TFunction *function = new TFunction(&tempString, type, EOpConstructStruct);
            yyval.interm.function = function;
        } else {
            TOperator op = EOpNull;
            switch (yyvsp[0].interm.type.type) {
            case EbtFloat:
                if (yyvsp[0].interm.type.matrix) {
                    switch(yyvsp[0].interm.type.size) {
                    case 2:                                     op = EOpConstructMat2;  break;
                    case 3:                                     op = EOpConstructMat3;  break;
                    case 4:                                     op = EOpConstructMat4;  break;
                    }         
                } else {      
                    switch(yyvsp[0].interm.type.size) {
                    case 1:                                     op = EOpConstructFloat; break;
                    case 2:                                     op = EOpConstructVec2;  break;
                    case 3:                                     op = EOpConstructVec3;  break;
                    case 4:                                     op = EOpConstructVec4;  break;
                    }       
                }  
                break;               
            case EbtInt:
                switch(yyvsp[0].interm.type.size) {
                case 1:                                         op = EOpConstructInt;   break;
                case 2:       FRAG_VERT_ONLY("ivec2", yyvsp[0].interm.type.line); op = EOpConstructIVec2; break;
                case 3:       FRAG_VERT_ONLY("ivec3", yyvsp[0].interm.type.line); op = EOpConstructIVec3; break;
                case 4:       FRAG_VERT_ONLY("ivec4", yyvsp[0].interm.type.line); op = EOpConstructIVec4; break;
                }         
                break;    
            case EbtBool:
                switch(yyvsp[0].interm.type.size) {
                case 1:                                         op = EOpConstructBool;  break;
                case 2:       FRAG_VERT_ONLY("bvec2", yyvsp[0].interm.type.line); op = EOpConstructBVec2; break;
                case 3:       FRAG_VERT_ONLY("bvec3", yyvsp[0].interm.type.line); op = EOpConstructBVec3; break;
                case 4:       FRAG_VERT_ONLY("bvec4", yyvsp[0].interm.type.line); op = EOpConstructBVec4; break;
                }         
                break;
            }
            if (op == EOpNull) {                    
                parseContext.error(yyvsp[0].interm.type.line, "cannot construct this type", TType::getBasicString(yyvsp[0].interm.type.type), "");
                parseContext.recover();
                yyvsp[0].interm.type.type = EbtFloat;
                op = EOpConstructFloat;
            }            
            TString tempString = "";
            TType type(yyvsp[0].interm.type);
            TFunction *function = new TFunction(&tempString, type, op);
            yyval.interm.function = function;
        }
    ;
    break;}
case 25:
#line 782 "hlslang.y"
{
        if (parseContext.reservedErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string)) 
            parseContext.recover();
        TType type(EbtVoid);
	const TString *mangled;
	if ( *yyvsp[0].lex.string == "main")
	    mangled = NewPoolTString("xlat_main");
	else
	    mangled = yyvsp[0].lex.string;
        TFunction *function = new TFunction( mangled, type);
        yyval.interm.function = function;
    ;
    break;}
case 26:
#line 794 "hlslang.y"
{
        if (parseContext.reservedErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string)) 
            parseContext.recover();
        TType type(EbtVoid);
        TFunction *function = new TFunction(yyvsp[0].lex.string, type);
        yyval.interm.function = function;
    ;
    break;}
case 27:
#line 804 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 28:
#line 807 "hlslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[-1].lex.line, "++", yyvsp[0].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(EOpPreIncrement, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[-1].lex.line, "++", yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 29:
#line 817 "hlslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[-1].lex.line, "--", yyvsp[0].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(EOpPreDecrement, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[-1].lex.line, "--", yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 30:
#line 827 "hlslang.y"
{
        if (yyvsp[-1].interm.op != EOpNull) {
            yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(yyvsp[-1].interm.op, yyvsp[0].interm.intermTypedNode, yyvsp[-1].interm.line, parseContext.symbolTable);
            if (yyval.interm.intermTypedNode == 0) {
                char* errorOp = "";
                switch(yyvsp[-1].interm.op) {
                case EOpNegative:   errorOp = "-"; break;
                case EOpLogicalNot: errorOp = "!"; break;
                case EOpBitwiseNot: errorOp = "~"; break;
				default: break;
                }
                parseContext.unaryOpError(yyvsp[-1].interm.line, errorOp, yyvsp[0].interm.intermTypedNode->getCompleteString());
                parseContext.recover();
                yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
            }
        } else
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 31:
#line 845 "hlslang.y"
{
        // cast operator, insert constructor
        TOperator op = EOpNull;
        switch (yyvsp[-2].interm.type.type) {
        case EbtFloat:
            if (yyvsp[-2].interm.type.matrix) {
                switch(yyvsp[-2].interm.type.size) {
                case 2:                                     op = EOpConstructMat2;  break;
                case 3:                                     op = EOpConstructMat3;  break;
                case 4:                                     op = EOpConstructMat4;  break;
                }         
            } else {      
                switch(yyvsp[-2].interm.type.size) {
                case 1:                                     op = EOpConstructFloat; break;
                case 2:                                     op = EOpConstructVec2;  break;
                case 3:                                     op = EOpConstructVec3;  break;
                case 4:                                     op = EOpConstructVec4;  break;
                }       
            }  
            break;               
        case EbtInt:
            switch(yyvsp[-2].interm.type.size) {
            case 1:                                         op = EOpConstructInt;   break;
            case 2:       FRAG_VERT_ONLY("ivec2", yyvsp[-2].interm.type.line); op = EOpConstructIVec2; break;
            case 3:       FRAG_VERT_ONLY("ivec3", yyvsp[-2].interm.type.line); op = EOpConstructIVec3; break;
            case 4:       FRAG_VERT_ONLY("ivec4", yyvsp[-2].interm.type.line); op = EOpConstructIVec4; break;
            }         
            break;    
        case EbtBool:
            switch(yyvsp[-2].interm.type.size) {
            case 1:                                         op = EOpConstructBool;  break;
            case 2:       FRAG_VERT_ONLY("bvec2", yyvsp[-2].interm.type.line); op = EOpConstructBVec2; break;
            case 3:       FRAG_VERT_ONLY("bvec3", yyvsp[-2].interm.type.line); op = EOpConstructBVec3; break;
            case 4:       FRAG_VERT_ONLY("bvec4", yyvsp[-2].interm.type.line); op = EOpConstructBVec4; break;
            }         
            break;
        case EbtStruct:
            op = EOpConstructStruct;
            break;
        }
        if (op == EOpNull) {                    
            parseContext.error(yyvsp[-2].interm.type.line, "cannot cast this type", TType::getBasicString(yyvsp[-2].interm.type.type), "");
            parseContext.recover();
            yyvsp[-2].interm.type.type = EbtFloat;
            op = EOpConstructFloat;
        }            
        TString tempString = "";
        TType type(yyvsp[-2].interm.type);
        TFunction *function = new TFunction(&tempString, type, op);
        TParameter param = { 0, 0, new TType(yyvsp[0].interm.intermTypedNode->getType()) };
        function->addParameter(param);
        TType type2(EbtVoid);  // use this to get the type back
        if (parseContext.constructorErrorCheck(yyvsp[-2].interm.type.line, yyvsp[0].interm.intermTypedNode, *function, op, &type2)) {
            yyval.interm.intermTypedNode = 0;
        } else {
            //
            // It's a constructor, of type 'type'.
            //
            yyval.interm.intermTypedNode = parseContext.addConstructor(yyvsp[0].interm.intermTypedNode, &type2, op, function, yyvsp[-2].interm.type.line);
        }
        
        if (yyval.interm.intermTypedNode == 0) {        
            parseContext.recover();
            yyval.interm.intermTypedNode = parseContext.intermediate.setAggregateOperator(0, op, yyvsp[-2].interm.type.line);
        }
        yyval.interm.intermTypedNode->setType(type2);
    ;
    break;}
case 32:
#line 916 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpNull; ;
    break;}
case 33:
#line 917 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpNegative; ;
    break;}
case 34:
#line 918 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpLogicalNot; ;
    break;}
case 35:
#line 919 "hlslang.y"
{ UNSUPPORTED_FEATURE("~", yyvsp[0].lex.line);  
              yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpBitwiseNot; ;
    break;}
case 36:
#line 925 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 37:
#line 926 "hlslang.y"
{
        FRAG_VERT_ONLY("*", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpMul, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "*", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 38:
#line 935 "hlslang.y"
{
        FRAG_VERT_ONLY("/", yyvsp[-1].lex.line); 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpDiv, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "/", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 39:
#line 944 "hlslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpMod, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "%", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 40:
#line 955 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 41:
#line 956 "hlslang.y"
{  
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpAdd, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "+", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 42:
#line 964 "hlslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpSub, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "-", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        } 
    ;
    break;}
case 43:
#line 975 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 44:
#line 976 "hlslang.y"
{
        UNSUPPORTED_FEATURE("<<", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLeftShift, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "<<", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 45:
#line 985 "hlslang.y"
{
        UNSUPPORTED_FEATURE(">>", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpRightShift, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ">>", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 46:
#line 997 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 47:
#line 998 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLessThan, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "<", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 48:
#line 1008 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpGreaterThan, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ">", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 49:
#line 1018 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLessThanEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "<=", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 50:
#line 1028 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpGreaterThanEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ">=", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 51:
#line 1041 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 52:
#line 1042 "hlslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "==", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        } else if ((yyvsp[-2].interm.intermTypedNode->isArray() || yyvsp[0].interm.intermTypedNode->isArray()))
            parseContext.recover();
    ;
    break;}
case 53:
#line 1053 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpNotEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "!=", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        } else if ((yyvsp[-2].interm.intermTypedNode->isArray() || yyvsp[0].interm.intermTypedNode->isArray()))
            parseContext.recover();
    ;
    break;}
case 54:
#line 1067 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 55:
#line 1068 "hlslang.y"
{
        UNSUPPORTED_FEATURE("&", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpAnd, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "&", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 56:
#line 1080 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 57:
#line 1081 "hlslang.y"
{
        UNSUPPORTED_FEATURE("^", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpExclusiveOr, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "^", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 58:
#line 1093 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 59:
#line 1094 "hlslang.y"
{
        UNSUPPORTED_FEATURE("|", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpInclusiveOr, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "|", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 60:
#line 1106 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 61:
#line 1107 "hlslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLogicalAnd, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "&&", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 62:
#line 1120 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 63:
#line 1121 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLogicalXor, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "^^", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 64:
#line 1134 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 65:
#line 1135 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLogicalOr, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "||", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 66:
#line 1148 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 67:
#line 1149 "hlslang.y"
{
       if (parseContext.boolErrorCheck(yyvsp[-3].lex.line, yyvsp[-4].interm.intermTypedNode))
            parseContext.recover();
       
        yyval.interm.intermTypedNode = parseContext.intermediate.addSelection(yyvsp[-4].interm.intermTypedNode, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-3].lex.line);
           
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-3].lex.line, ":", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 68:
#line 1164 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 69:
#line 1165 "hlslang.y"
{        
        if (parseContext.lValueErrorCheck(yyvsp[-1].interm.line, "assign", yyvsp[-2].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.addAssign(yyvsp[-1].interm.op, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].interm.line);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.assignError(yyvsp[-1].interm.line, "assign", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        } else if ((yyvsp[-2].interm.intermTypedNode->isArray() || yyvsp[0].interm.intermTypedNode->isArray()))
            parseContext.recover();
    ;
    break;}
case 70:
#line 1179 "hlslang.y"
{                                    yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpAssign; ;
    break;}
case 71:
#line 1180 "hlslang.y"
{ FRAG_VERT_ONLY("*=", yyvsp[0].lex.line);     yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpMulAssign; ;
    break;}
case 72:
#line 1181 "hlslang.y"
{ FRAG_VERT_ONLY("/=", yyvsp[0].lex.line);     yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpDivAssign; ;
    break;}
case 73:
#line 1182 "hlslang.y"
{ UNSUPPORTED_FEATURE("%=", yyvsp[0].lex.line);   yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpModAssign; ;
    break;}
case 74:
#line 1183 "hlslang.y"
{                                    yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpAddAssign; ;
    break;}
case 75:
#line 1184 "hlslang.y"
{                                    yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpSubAssign; ;
    break;}
case 76:
#line 1185 "hlslang.y"
{ UNSUPPORTED_FEATURE("<<=", yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpLeftShiftAssign; ;
    break;}
case 77:
#line 1186 "hlslang.y"
{ UNSUPPORTED_FEATURE("<<=", yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpRightShiftAssign; ;
    break;}
case 78:
#line 1187 "hlslang.y"
{ UNSUPPORTED_FEATURE("&=",  yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpAndAssign; ;
    break;}
case 79:
#line 1188 "hlslang.y"
{ UNSUPPORTED_FEATURE("^=",  yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpExclusiveOrAssign; ;
    break;}
case 80:
#line 1189 "hlslang.y"
{ UNSUPPORTED_FEATURE("|=",  yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpInclusiveOrAssign; ;
    break;}
case 81:
#line 1193 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 82:
#line 1196 "hlslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addComma(yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ",", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 83:
#line 1207 "hlslang.y"
{
        if (parseContext.constErrorCheck(yyvsp[0].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 84:
#line 1215 "hlslang.y"
{ yyval.interm.intermNode = 0; ;
    break;}
case 85:
#line 1216 "hlslang.y"
{ 
        if (yyvsp[-1].interm.intermAggregate)
            yyvsp[-1].interm.intermAggregate->setOperator(EOpSequence); 
        yyval.interm.intermNode = yyvsp[-1].interm.intermAggregate; 
    ;
    break;}
case 86:
#line 1224 "hlslang.y"
{
        //
        // Multiple declarations of the same function are allowed.
        //
        // If this is a definition, the definition production code will check for redefinitions 
        // (we don't know at this point if it's a definition or not).
        //
        // Redeclarations are allowed.  But, return types and parameter qualifiers must match.
        //        
        TFunction* prevDec = static_cast<TFunction*>(parseContext.symbolTable.find(yyvsp[-1].interm.function->getMangledName()));
        if (prevDec) {
            if (prevDec->getReturnType() != yyvsp[-1].interm.function->getReturnType()) {
                parseContext.error(yyvsp[0].lex.line, "overloaded functions must have the same return type", yyvsp[-1].interm.function->getReturnType().getBasicString(), "");
                parseContext.recover();
            }
            for (int i = 0; i < prevDec->getParamCount(); ++i) {
                if ((*prevDec)[i].type->getQualifier() != (*yyvsp[-1].interm.function)[i].type->getQualifier()) {
                    parseContext.error(yyvsp[0].lex.line, "overloaded functions must have the same parameter qualifiers", (*yyvsp[-1].interm.function)[i].type->getQualifierString(), "");
                    parseContext.recover();
                }
            }
        }
        
        //
        // If this is a redeclaration, it could also be a definition,
        // in which case, we want to use the variable names from this one, and not the one that's
        // being redeclared.  So, pass back up this declaration, not the one in the symbol table.
        //
        yyval.interm.function = yyvsp[-1].interm.function;
        yyval.interm.line = yyvsp[0].lex.line;

        parseContext.symbolTable.insert(*yyval.interm.function);
    ;
    break;}
case 87:
#line 1257 "hlslang.y"
{
        //
        // Multiple declarations of the same function are allowed.
        //
        // If this is a definition, the definition production code will check for redefinitions 
        // (we don't know at this point if it's a definition or not).
        //
        // Redeclarations are allowed.  But, return types and parameter qualifiers must match.
        //        
        TFunction* prevDec = static_cast<TFunction*>(parseContext.symbolTable.find(yyvsp[-3].interm.function->getMangledName()));
        if (prevDec) {
            if (prevDec->getReturnType() != yyvsp[-3].interm.function->getReturnType()) {
                parseContext.error(yyvsp[-2].lex.line, "overloaded functions must have the same return type", yyvsp[-3].interm.function->getReturnType().getBasicString(), "");
                parseContext.recover();
            }
            for (int i = 0; i < prevDec->getParamCount(); ++i) {
                if ((*prevDec)[i].type->getQualifier() != (*yyvsp[-3].interm.function)[i].type->getQualifier()) {
                    parseContext.error(yyvsp[-2].lex.line, "overloaded functions must have the same parameter qualifiers", (*yyvsp[-3].interm.function)[i].type->getQualifierString(), "");
                    parseContext.recover();
                }
            }
        }
        
        //
        // If this is a redeclaration, it could also be a definition,
        // in which case, we want to use the variable names from this one, and not the one that's
        // being redeclared.  So, pass back up this declaration, not the one in the symbol table.
        //
        yyval.interm.function = yyvsp[-3].interm.function;
        yyval.interm.line = yyvsp[-2].lex.line;
        yyval.interm.function->setInfo(new TTypeInfo(*yyvsp[0].lex.string, 0));

        parseContext.symbolTable.insert(*yyval.interm.function);
    ;
    break;}
case 88:
#line 1294 "hlslang.y"
{
        yyval.interm.function = yyvsp[0].interm.function;
    ;
    break;}
case 89:
#line 1297 "hlslang.y"
{ 
        yyval.interm.function = yyvsp[0].interm.function;  
    ;
    break;}
case 90:
#line 1304 "hlslang.y"
{
        // Add the parameter 
        yyval.interm.function = yyvsp[-1].interm.function;
        if (yyvsp[0].interm.param.type->getBasicType() != EbtVoid)
            yyvsp[-1].interm.function->addParameter(yyvsp[0].interm.param);
        else
            delete yyvsp[0].interm.param.type;
    ;
    break;}
case 91:
#line 1312 "hlslang.y"
{   
        //
        // Only first parameter of one-parameter functions can be void
        // The check for named parameters not being void is done in parameter_declarator 
        //
        if (yyvsp[0].interm.param.type->getBasicType() == EbtVoid) {
            //
            // This parameter > first is void
            //
            parseContext.error(yyvsp[-1].lex.line, "cannot be an argument type except for '(void)'", "void", "");
            parseContext.recover();
            delete yyvsp[0].interm.param.type;
        } else {
            // Add the parameter 
            yyval.interm.function = yyvsp[-2].interm.function; 
            yyvsp[-2].interm.function->addParameter(yyvsp[0].interm.param);
        }
    ;
    break;}
case 92:
#line 1333 "hlslang.y"
{
        if (yyvsp[-2].interm.type.qualifier != EvqGlobal && yyvsp[-2].interm.type.qualifier != EvqTemporary) {
            parseContext.error(yyvsp[-1].lex.line, "no qualifiers allowed for function return", getQualifierString(yyvsp[-2].interm.type.qualifier), "");
            parseContext.recover();
        }
        // make sure a sampler is not involved as well...
        if (parseContext.structQualifierErrorCheck(yyvsp[-1].lex.line, yyvsp[-2].interm.type))
            parseContext.recover();
        
        // Add the function as a prototype after parsing it (we do not support recursion) 
        TFunction *function;
        TType type(yyvsp[-2].interm.type);
	const TString* mangled = 0;
	if ( *yyvsp[-1].lex.string == "main")
	    mangled = NewPoolTString( "xlat_main");
	else
	    mangled = yyvsp[-1].lex.string;

        function = new TFunction(mangled, type);
        yyval.interm.function = function;
    ;
    break;}
case 93:
#line 1358 "hlslang.y"
{
        if (yyvsp[-1].interm.type.type == EbtVoid) {
            parseContext.error(yyvsp[0].lex.line, "illegal use of type 'void'", yyvsp[0].lex.string->c_str(), "");
            parseContext.recover();
        }
        if (parseContext.reservedErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string))
            parseContext.recover();
        TParameter param = {yyvsp[0].lex.string, 0, new TType(yyvsp[-1].interm.type)};
        yyval.interm.line = yyvsp[0].lex.line;
        yyval.interm.param = param; 
    ;
    break;}
case 94:
#line 1369 "hlslang.y"
{
        if (yyvsp[-3].interm.type.type == EbtVoid) {
            parseContext.error(yyvsp[-2].lex.line, "illegal use of type 'void'", yyvsp[-2].lex.string->c_str(), "");
            parseContext.recover();
        }
        if (parseContext.reservedErrorCheck(yyvsp[-2].lex.line, *yyvsp[-2].lex.string))
            parseContext.recover();
        TParameter param = {yyvsp[-2].lex.string, 0, new TType(yyvsp[-3].interm.type)};
        yyval.interm.line = yyvsp[-2].lex.line;
        yyval.interm.param = param; 
        
        //TODO: add initializer support
    ;
    break;}
case 95:
#line 1382 "hlslang.y"
{
        //Parameter with semantic
        if (yyvsp[-3].interm.type.type == EbtVoid) {
            parseContext.error(yyvsp[-2].lex.line, "illegal use of type 'void'", yyvsp[-2].lex.string->c_str(), "");
            parseContext.recover();
        }
        if (parseContext.reservedErrorCheck(yyvsp[-2].lex.line, *yyvsp[-2].lex.string))
            parseContext.recover();
        TParameter param = {yyvsp[-2].lex.string, new TTypeInfo(*yyvsp[0].lex.string, 0), new TType(yyvsp[-3].interm.type)};
        yyval.interm.line = yyvsp[-2].lex.line;
        yyval.interm.param = param; 
    ;
    break;}
case 96:
#line 1394 "hlslang.y"
{
        // Check that we can make an array out of this type
        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();
            
        if (parseContext.reservedErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string))
            parseContext.recover();
            
        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
            parseContext.recover();
        yyvsp[-4].interm.type.setArray(true, size);
             
        TType* type = new TType(yyvsp[-4].interm.type);
        TParameter param = { yyvsp[-3].lex.string, 0, type };
        yyval.interm.line = yyvsp[-3].lex.line;
        yyval.interm.param = param;
    ;
    break;}
case 97:
#line 1412 "hlslang.y"
{
        // Check that we can make an array out of this type
        if (parseContext.arrayTypeErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();
            
        if (parseContext.reservedErrorCheck(yyvsp[-5].lex.line, *yyvsp[-5].lex.string))
            parseContext.recover();
            
        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-4].lex.line, yyvsp[-3].interm.intermTypedNode, size))
            parseContext.recover();
        yyvsp[-6].interm.type.setArray(true, size);
             
        TType* type = new TType(yyvsp[-6].interm.type);
        TParameter param = { yyvsp[-5].lex.string, new TTypeInfo(*yyvsp[0].lex.string, 0), type };
        yyval.interm.line = yyvsp[-5].lex.line;
        yyval.interm.param = param;
    ;
    break;}
case 98:
#line 1441 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, yyvsp[-2].interm.type.qualifier, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 99:
#line 1446 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.parameterSamplerErrorCheck(yyvsp[0].interm.line, yyvsp[-1].interm.qualifier, *yyvsp[0].interm.param.type))
            parseContext.recover();
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, EvqTemporary, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 100:
#line 1456 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, yyvsp[-2].interm.type.qualifier, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 101:
#line 1461 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.parameterSamplerErrorCheck(yyvsp[0].interm.line, yyvsp[-1].interm.qualifier, *yyvsp[0].interm.param.type))
            parseContext.recover();
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, EvqTemporary, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 102:
#line 1471 "hlslang.y"
{
        yyval.interm.qualifier = EvqIn;
    ;
    break;}
case 103:
#line 1474 "hlslang.y"
{
        yyval.interm.qualifier = EvqIn;
    ;
    break;}
case 104:
#line 1477 "hlslang.y"
{
        yyval.interm.qualifier = EvqOut;
    ;
    break;}
case 105:
#line 1480 "hlslang.y"
{
        yyval.interm.qualifier = EvqInOut;
    ;
    break;}
case 106:
#line 1486 "hlslang.y"
{
        TParameter param = { 0, 0, new TType(yyvsp[0].interm.type) };
        yyval.interm.param = param;
    ;
    break;}
case 107:
#line 1493 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
    ;
    break;}
case 108:
#line 1496 "hlslang.y"
{
        yyval.interm = yyvsp[-3].interm;
        if (parseContext.structQualifierErrorCheck(yyvsp[-1].lex.line, yyval.interm.type))
            parseContext.recover();
        
        if (parseContext.nonInitConstErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string, yyval.interm.type))
            parseContext.recover();

        if (parseContext.nonInitErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string, yyvsp[0].interm.typeInfo, yyval.interm.type))
            parseContext.recover();
    ;
    break;}
case 109:
#line 1507 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();
            
        if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-5].interm.type))
            parseContext.recover();

        yyval.interm = yyvsp[-5].interm;
        
        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-5].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();
        else {
            yyvsp[-5].interm.type.setArray(true);
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-2].lex.line, *yyvsp[-3].lex.string, yyvsp[0].interm.typeInfo, yyvsp[-5].interm.type, variable))
                parseContext.recover();
        }
    ;
    break;}
case 110:
#line 1525 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();
            
        if (parseContext.nonInitConstErrorCheck(yyvsp[-4].lex.line, *yyvsp[-4].lex.string, yyvsp[-6].interm.type))
            parseContext.recover();
        
        yyval.interm = yyvsp[-6].interm;

        if (parseContext.arrayTypeErrorCheck(yyvsp[-3].lex.line, yyvsp[-6].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-3].lex.line, yyvsp[-2].interm.intermTypedNode, size))
                parseContext.recover();
            yyvsp[-6].interm.type.setArray(true, size);        
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-3].lex.line, *yyvsp[-4].lex.string, yyvsp[0].interm.typeInfo, yyvsp[-6].interm.type, variable))
                parseContext.recover();
        }
    ;
    break;}
case 111:
#line 1546 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-5].lex.line, yyvsp[-7].interm.type))
            parseContext.recover();
            
        yyval.interm = yyvsp[-7].interm;
            
        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-4].lex.line, yyvsp[-7].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-7].interm.type))
            parseContext.recover();
        else {
			yyvsp[-7].interm.type.setArray(true, yyvsp[0].interm.intermTypedNode->getType().getArraySize());
            if (parseContext.arrayErrorCheck(yyvsp[-4].lex.line, *yyvsp[-5].lex.string, yyvsp[-7].interm.type, variable))
                parseContext.recover();
        }

        {
            TIntermNode* intermNode;
            if (!parseContext.executeInitializer(yyvsp[-5].lex.line, *yyvsp[-5].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-7].interm.type, yyvsp[0].interm.intermTypedNode, intermNode, variable)) {
                //
                // build the intermediate representation
                //
                if (intermNode)
                    yyval.interm.intermAggregate = parseContext.intermediate.growAggregate(yyvsp[-7].interm.intermNode, intermNode, yyvsp[-1].lex.line);
                else
                    yyval.interm.intermAggregate = yyvsp[-7].interm.intermAggregate;
            } else {
                parseContext.recover();
                yyval.interm.intermAggregate = 0;
            }
        }
    ;
    break;}
case 112:
#line 1577 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-6].lex.line, yyvsp[-8].interm.type))
            parseContext.recover();
            
        yyval.interm = yyvsp[-8].interm;
            
        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-5].lex.line, yyvsp[-8].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-5].lex.line, yyvsp[-8].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-5].lex.line, yyvsp[-4].interm.intermTypedNode, size))
                parseContext.recover();
            yyvsp[-8].interm.type.setArray(true, size);
            if (parseContext.arrayErrorCheck(yyvsp[-5].lex.line, *yyvsp[-6].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-8].interm.type, variable))
                parseContext.recover();
        }

        {
            TIntermNode* intermNode;
            if (!parseContext.executeInitializer(yyvsp[-6].lex.line, *yyvsp[-6].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-8].interm.type, yyvsp[0].interm.intermTypedNode, intermNode, variable)) {
                //
                // build the intermediate representation
                //
                if (intermNode)
                    yyval.interm.intermAggregate = parseContext.intermediate.growAggregate(yyvsp[-8].interm.intermNode, intermNode, yyvsp[-1].lex.line);
                else
                    yyval.interm.intermAggregate = yyvsp[-8].interm.intermAggregate;
            } else {
                parseContext.recover();
                yyval.interm.intermAggregate = 0;
            }
        }
    ;
    break;}
case 113:
#line 1611 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();
        
        yyval.interm = yyvsp[-5].interm;
        
        TIntermNode* intermNode;
	if ( !IsSampler(yyvsp[-5].interm.type.type)) {
	    if (!parseContext.executeInitializer(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-5].interm.type, yyvsp[0].interm.intermTypedNode, intermNode)) {
		//
		// build the intermediate representation
		//
		if (intermNode)
		    yyval.interm.intermAggregate = parseContext.intermediate.growAggregate(yyvsp[-5].interm.intermNode, intermNode, yyvsp[-1].lex.line);
		else
		    yyval.interm.intermAggregate = yyvsp[-5].interm.intermAggregate;
	    } else {
		parseContext.recover();
		yyval.interm.intermAggregate = 0;
	    }
	}
	else {
	    //Special code to skip initializers for samplers
	    yyval.interm = yyvsp[-5].interm;
	    if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyval.interm.type))
		parseContext.recover();
	    
	    if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyval.interm.type))
		parseContext.recover();
	    
	    if (parseContext.nonInitErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-2].interm.typeInfo, yyval.interm.type))
		parseContext.recover();
	}
    ;
    break;}
case 114:
#line 1648 "hlslang.y"
{
        yyval.interm.type = yyvsp[0].interm.type;
        yyval.interm.intermAggregate = 0;
    ;
    break;}
case 115:
#line 1652 "hlslang.y"
{
        yyval.interm.intermAggregate = 0;
        yyval.interm.type = yyvsp[-2].interm.type;

        if (parseContext.structQualifierErrorCheck(yyvsp[-1].lex.line, yyval.interm.type))
            parseContext.recover();
        
        if (parseContext.nonInitConstErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string, yyval.interm.type))
            parseContext.recover();

        if (parseContext.nonInitErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string, yyvsp[0].interm.typeInfo, yyval.interm.type))
            parseContext.recover();
    ;
    break;}
case 116:
#line 1665 "hlslang.y"
{
        yyval.interm.intermAggregate = 0;
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();

        if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-4].interm.type))
            parseContext.recover();

        yyval.interm.type = yyvsp[-4].interm.type;

        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();
        else {
            yyvsp[-4].interm.type.setArray(true);        
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-2].lex.line, *yyvsp[-3].lex.string, yyvsp[0].interm.typeInfo, yyvsp[-4].interm.type, variable))
                parseContext.recover();
        }
    ;
    break;}
case 117:
#line 1684 "hlslang.y"
{
        yyval.interm.intermAggregate = 0;
        if (parseContext.structQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();

        if (parseContext.nonInitConstErrorCheck(yyvsp[-4].lex.line, *yyvsp[-4].lex.string, yyvsp[-5].interm.type))
            parseContext.recover();
            
        yyval.interm.type = yyvsp[-5].interm.type;

        if (parseContext.arrayTypeErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-3].lex.line, yyvsp[-2].interm.intermTypedNode, size))
                parseContext.recover();
            
            yyvsp[-5].interm.type.setArray(true, size);
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-3].lex.line, *yyvsp[-4].lex.string, yyvsp[0].interm.typeInfo, yyvsp[-5].interm.type, variable))
                parseContext.recover();
        }
    ;
    break;}
case 118:
#line 1707 "hlslang.y"
{
        yyval.interm.intermAggregate = 0;

        if (parseContext.structQualifierErrorCheck(yyvsp[-5].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();

        yyval.interm.type = yyvsp[-6].interm.type;

        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();
        else {
            yyvsp[-6].interm.type.setArray(true, yyvsp[0].interm.intermTypedNode->getType().getArraySize());
            if (parseContext.arrayErrorCheck(yyvsp[-4].lex.line, *yyvsp[-5].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-6].interm.type, variable))
                parseContext.recover();
        }

        
	     {        
            TIntermNode* intermNode;
            if (!parseContext.executeInitializer(yyvsp[-5].lex.line, *yyvsp[-5].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-6].interm.type, yyvsp[0].interm.intermTypedNode, intermNode, variable)) {
                //
                // Build intermediate representation
                //
                if (intermNode)
                    yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate(intermNode, yyvsp[-1].lex.line);
                else
                    yyval.interm.intermAggregate = 0;
            } else {
                parseContext.recover();
                yyval.interm.intermAggregate = 0;
            }
        }
    ;
    break;}
case 119:
#line 1741 "hlslang.y"
{
        yyval.interm.intermAggregate = 0;

        if (parseContext.structQualifierErrorCheck(yyvsp[-6].lex.line, yyvsp[-7].interm.type))
            parseContext.recover();

        yyval.interm.type = yyvsp[-7].interm.type;

        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-5].lex.line, yyvsp[-7].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-5].lex.line, yyvsp[-7].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-5].lex.line, yyvsp[-4].interm.intermTypedNode, size))
                parseContext.recover();
            
            yyvsp[-7].interm.type.setArray(true, size);
            if (parseContext.arrayErrorCheck(yyvsp[-5].lex.line, *yyvsp[-6].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-7].interm.type, variable))
                parseContext.recover();
        }
        
        {        
            TIntermNode* intermNode;
            if (!parseContext.executeInitializer(yyvsp[-6].lex.line, *yyvsp[-6].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-7].interm.type, yyvsp[0].interm.intermTypedNode, intermNode, variable)) {
                //
                // Build intermediate representation
                //
                if (intermNode)
                    yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate(intermNode, yyvsp[-1].lex.line);
                else
                    yyval.interm.intermAggregate = 0;
            } else {
                parseContext.recover();
                yyval.interm.intermAggregate = 0;
            }
        }        
    ;
    break;}
case 120:
#line 1778 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();

        yyval.interm.type = yyvsp[-4].interm.type;

        TIntermNode* intermNode;
	if ( !IsSampler(yyvsp[-4].interm.type.type)) {
	    if (!parseContext.executeInitializer(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-4].interm.type, yyvsp[0].interm.intermTypedNode, intermNode)) {
		//
		// Build intermediate representation
		//
		if (intermNode)
		    yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate(intermNode, yyvsp[-1].lex.line);
		else
		    yyval.interm.intermAggregate = 0;
	    } else {
		parseContext.recover();
		yyval.interm.intermAggregate = 0;
	    }
	}
	else {
	    //Skip sampler initializers for now
	    yyval.interm.intermAggregate = 0;

	    if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyval.interm.type))
		parseContext.recover();
	    
	    if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyval.interm.type))
		parseContext.recover();
	    
	    if (parseContext.nonInitErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-2].interm.typeInfo, yyval.interm.type))
		parseContext.recover();
	}
    ;
    break;}
case 121:
#line 1829 "hlslang.y"
{
        yyval.interm.type = yyvsp[0].interm.type;                       
    ;
    break;}
case 122:
#line 1832 "hlslang.y"
{                
        if (yyvsp[0].interm.type.array && parseContext.arrayQualifierErrorCheck(yyvsp[0].interm.type.line, yyvsp[-1].interm.type)) {
            parseContext.recover();
            yyvsp[0].interm.type.setArray(false);
        }
        
        if (yyvsp[-1].interm.type.qualifier == EvqAttribute &&
            (yyvsp[0].interm.type.type == EbtBool || yyvsp[0].interm.type.type == EbtInt)) {
            parseContext.error(yyvsp[0].interm.type.line, "cannot be bool or int", getQualifierString(yyvsp[-1].interm.type.qualifier), "");
            parseContext.recover();
        }
        if ((yyvsp[-1].interm.type.qualifier == EvqVaryingIn || yyvsp[-1].interm.type.qualifier == EvqVaryingOut) &&
            (yyvsp[0].interm.type.type == EbtBool || yyvsp[0].interm.type.type == EbtInt)) {
            parseContext.error(yyvsp[0].interm.type.line, "cannot be bool or int", getQualifierString(yyvsp[-1].interm.type.qualifier), "");
            parseContext.recover();
        }
        yyval.interm.type = yyvsp[0].interm.type; 
        yyval.interm.type.qualifier = yyvsp[-1].interm.type.qualifier;
    ;
    break;}
case 123:
#line 1854 "hlslang.y"
{
        yyval.interm.type.setBasic(EbtVoid, EvqConst, yyvsp[0].lex.line);
    ;
    break;}
case 124:
#line 1857 "hlslang.y"
{ 
        VERTEX_ONLY("attribute", yyvsp[0].lex.line);
        if (parseContext.globalErrorCheck(yyvsp[0].lex.line, parseContext.symbolTable.atGlobalLevel(), "attribute"))
            parseContext.recover();
        yyval.interm.type.setBasic(EbtVoid, EvqAttribute, yyvsp[0].lex.line);
    ;
    break;}
case 125:
#line 1863 "hlslang.y"
{
        if (parseContext.globalErrorCheck(yyvsp[0].lex.line, parseContext.symbolTable.atGlobalLevel(), "varying"))
            parseContext.recover();
        if (parseContext.language == EShLangVertex)
            yyval.interm.type.setBasic(EbtVoid, EvqVaryingOut, yyvsp[0].lex.line);
        else
            yyval.interm.type.setBasic(EbtVoid, EvqVaryingIn, yyvsp[0].lex.line);
    ;
    break;}
case 126:
#line 1871 "hlslang.y"
{
        if (parseContext.globalErrorCheck(yyvsp[0].lex.line, parseContext.symbolTable.atGlobalLevel(), "uniform"))
            parseContext.recover();
        yyval.interm.type.setBasic(EbtVoid, EvqUniform, yyvsp[0].lex.line);
    ;
    break;}
case 127:
#line 1879 "hlslang.y"
{
        yyval.interm.type = yyvsp[0].interm.type;
    ;
    break;}
case 128:
#line 1882 "hlslang.y"
{
        yyval.interm.type = yyvsp[-3].interm.type;
        
        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
                parseContext.recover();
            yyval.interm.type.setArray(true, size);
        }
    ;
    break;}
case 129:
#line 1897 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtVoid, qual, yyvsp[0].lex.line); 
    ;
    break;}
case 130:
#line 1901 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
    ;
    break;}
case 131:
#line 1905 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtInt, qual, yyvsp[0].lex.line);
    ;
    break;}
case 132:
#line 1909 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtBool, qual, yyvsp[0].lex.line);
    ;
    break;}
case 133:
#line 1913 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        if ( yyvsp[-1].lex.i > 4 || yyvsp[-1].lex.i < 1 ) {
            parseContext.error(yyvsp[-4].lex.line, "vector dimension out of range", "", "");
            parseContext.recover();
            yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[-5].lex.line);
        } else {
            yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[-5].lex.line);
            yyval.interm.type.setAggregate(yyvsp[-1].lex.i);
        }
    ;
    break;}
case 134:
#line 1924 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        if ( yyvsp[-1].lex.i > 4 || yyvsp[-1].lex.i < 1 ) {
            parseContext.error(yyvsp[-4].lex.line, "vector dimension out of range", "", "");
            parseContext.recover();
            yyval.interm.type.setBasic(EbtInt, qual, yyvsp[-5].lex.line);
        } else {
            yyval.interm.type.setBasic(EbtInt, qual, yyvsp[-5].lex.line);
            yyval.interm.type.setAggregate(yyvsp[-1].lex.i);
        }
    ;
    break;}
case 135:
#line 1935 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        if ( yyvsp[-1].lex.i > 4 || yyvsp[-1].lex.i < 1 ) {
            parseContext.error(yyvsp[-4].lex.line, "vector dimension out of range", "", "");
            parseContext.recover();
            yyval.interm.type.setBasic(EbtBool, qual, yyvsp[-5].lex.line);
        } else {
            yyval.interm.type.setBasic(EbtBool, qual, yyvsp[-5].lex.line);
            yyval.interm.type.setAggregate(yyvsp[-1].lex.i);
        }
    ;
    break;}
case 136:
#line 1946 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(2);
    ;
    break;}
case 137:
#line 1951 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(3);
    ;
    break;}
case 138:
#line 1956 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(4);
    ;
    break;}
case 139:
#line 1961 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtBool, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(2);
    ;
    break;}
case 140:
#line 1966 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtBool, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(3);
    ;
    break;}
case 141:
#line 1971 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtBool, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(4);
    ;
    break;}
case 142:
#line 1976 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtInt, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(2);
    ;
    break;}
case 143:
#line 1981 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtInt, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(3);
    ;
    break;}
case 144:
#line 1986 "hlslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtInt, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(4);
    ;
    break;}
case 145:
#line 1991 "hlslang.y"
{
        FRAG_VERT_ONLY("mat2", yyvsp[0].lex.line); 
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(2, true);
    ;
    break;}
case 146:
#line 1997 "hlslang.y"
{ 
        FRAG_VERT_ONLY("mat3", yyvsp[0].lex.line); 
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(3, true);
    ;
    break;}
case 147:
#line 2003 "hlslang.y"
{ 
        FRAG_VERT_ONLY("mat4", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(4, true);
    ;
    break;}
case 148:
#line 2009 "hlslang.y"
{
        FRAG_VERT_ONLY("texture", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtTexture, qual, yyvsp[0].lex.line);
    ;
    break;}
case 149:
#line 2014 "hlslang.y"
{
        FRAG_VERT_ONLY("sampler", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSamplerGeneric, qual, yyvsp[0].lex.line);
    ;
    break;}
case 150:
#line 2019 "hlslang.y"
{
        FRAG_VERT_ONLY("sampler1D", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSampler1D, qual, yyvsp[0].lex.line);
    ;
    break;}
case 151:
#line 2024 "hlslang.y"
{
        FRAG_VERT_ONLY("sampler2D", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSampler2D, qual, yyvsp[0].lex.line);
    ;
    break;}
case 152:
#line 2029 "hlslang.y"
{
        FRAG_VERT_ONLY("sampler3D", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSampler3D, qual, yyvsp[0].lex.line);
    ;
    break;}
case 153:
#line 2034 "hlslang.y"
{
        FRAG_VERT_ONLY("samplerCube", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSamplerCube, qual, yyvsp[0].lex.line);
    ;
    break;}
case 154:
#line 2039 "hlslang.y"
{
        FRAG_VERT_ONLY("sampler1DShadow", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSampler1DShadow, qual, yyvsp[0].lex.line);
    ;
    break;}
case 155:
#line 2044 "hlslang.y"
{
        FRAG_VERT_ONLY("sampler2DShadow", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSampler2DShadow, qual, yyvsp[0].lex.line);
    ;
    break;}
case 156:
#line 2049 "hlslang.y"
{
        FRAG_VERT_ONLY("struct", yyvsp[0].interm.type.line);
        yyval.interm.type = yyvsp[0].interm.type;
        yyval.interm.type.qualifier = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
    ;
    break;}
case 157:
#line 2054 "hlslang.y"
{     
        //
        // This is for user defined type names.  The lexical phase looked up the 
        // type.
        //
        TType& structure = static_cast<TVariable*>(yyvsp[0].lex.symbol)->getType();
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtStruct, qual, yyvsp[0].lex.line);
        yyval.interm.type.userDef = &structure;
    ;
    break;}
case 158:
#line 2067 "hlslang.y"
{
        TType* structure = new TType(yyvsp[-1].interm.typeList, *yyvsp[-3].lex.string);
        TVariable* userTypeDef = new TVariable(yyvsp[-3].lex.string, *structure, true);
        if (! parseContext.symbolTable.insert(*userTypeDef)) {
            parseContext.error(yyvsp[-3].lex.line, "redefinition", yyvsp[-3].lex.string->c_str(), "struct");
            parseContext.recover();
        }
        yyval.interm.type.setBasic(EbtStruct, EvqTemporary, yyvsp[-4].lex.line);
        yyval.interm.type.userDef = structure;
    ;
    break;}
case 159:
#line 2077 "hlslang.y"
{
        TType* structure = new TType(yyvsp[-1].interm.typeList, TString(""));
        yyval.interm.type.setBasic(EbtStruct, EvqTemporary, yyvsp[-3].lex.line);
        yyval.interm.type.userDef = structure;
    ;
    break;}
case 160:
#line 2085 "hlslang.y"
{
        yyval.interm.typeList = yyvsp[0].interm.typeList;
    ;
    break;}
case 161:
#line 2088 "hlslang.y"
{
        yyval.interm.typeList = yyvsp[-1].interm.typeList;
        for (unsigned int i = 0; i < yyvsp[0].interm.typeList->size(); ++i) {
            for (unsigned int j = 0; j < yyval.interm.typeList->size(); ++j) {
                if ((*yyval.interm.typeList)[j].type->getFieldName() == (*yyvsp[0].interm.typeList)[i].type->getFieldName()) {
                    parseContext.error((*yyvsp[0].interm.typeList)[i].line, "duplicate field name in structure:", "struct", (*yyvsp[0].interm.typeList)[i].type->getFieldName().c_str());
                    parseContext.recover();
                }
            }
            yyval.interm.typeList->push_back((*yyvsp[0].interm.typeList)[i]);
        }
    ;
    break;}
case 162:
#line 2103 "hlslang.y"
{
        yyval.interm.typeList = yyvsp[-1].interm.typeList;
        
        if (parseContext.voidErrorCheck(yyvsp[-2].interm.type.line, (*yyvsp[-1].interm.typeList)[0].type->getFieldName(), yyvsp[-2].interm.type)) {
            parseContext.recover();
        }
        for (unsigned int i = 0; i < yyval.interm.typeList->size(); ++i) {
            //
            // Careful not to replace already know aspects of type, like array-ness
            //
            (*yyval.interm.typeList)[i].type->setType(yyvsp[-2].interm.type.type, yyvsp[-2].interm.type.size, yyvsp[-2].interm.type.matrix, yyvsp[-2].interm.type.userDef);

            // don't allow arrays of arrays
            if ((*yyval.interm.typeList)[i].type->isArray()) {
                if (parseContext.arrayTypeErrorCheck(yyvsp[-2].interm.type.line, yyvsp[-2].interm.type))
                    parseContext.recover();
            }
            if (yyvsp[-2].interm.type.array)
                (*yyval.interm.typeList)[i].type->setArraySize(yyvsp[-2].interm.type.arraySize);
            if (yyvsp[-2].interm.type.userDef)
                (*yyval.interm.typeList)[i].type->setTypeName(yyvsp[-2].interm.type.userDef->getTypeName());
        }
    ;
    break;}
case 163:
#line 2129 "hlslang.y"
{
        yyval.interm.typeList = NewPoolTTypeList();
        yyval.interm.typeList->push_back(yyvsp[0].interm.typeLine);
    ;
    break;}
case 164:
#line 2133 "hlslang.y"
{
        yyval.interm.typeList->push_back(yyvsp[0].interm.typeLine);
    ;
    break;}
case 165:
#line 2139 "hlslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid);
        yyval.interm.typeLine.line = yyvsp[0].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[0].lex.string);
    ;
    break;}
case 166:
#line 2144 "hlslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid);
        yyval.interm.typeLine.line = yyvsp[-2].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[-2].lex.string);
        yyval.interm.typeLine.type->setSemantic(*yyvsp[0].lex.string);
    ;
    break;}
case 167:
#line 2150 "hlslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid);
        yyval.interm.typeLine.line = yyvsp[-3].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[-3].lex.string);
        
        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
            parseContext.recover();
        yyval.interm.typeLine.type->setArraySize(size);
    ;
    break;}
case 168:
#line 2160 "hlslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid);
        yyval.interm.typeLine.line = yyvsp[-5].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[-5].lex.string);
        
        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-4].lex.line, yyvsp[-3].interm.intermTypedNode, size))
            parseContext.recover();
        yyval.interm.typeLine.type->setArraySize(size);
        yyval.interm.typeLine.type->setSemantic(*yyvsp[0].lex.string);
    ;
    break;}
case 169:
#line 2176 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 170:
#line 2177 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 171:
#line 2178 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 172:
#line 2182 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 173:
#line 2186 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermAggregate; ;
    break;}
case 174:
#line 2187 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 175:
#line 2193 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 176:
#line 2194 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 177:
#line 2195 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 178:
#line 2196 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 179:
#line 2197 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 180:
#line 2201 "hlslang.y"
{ yyval.interm.intermAggregate = 0; ;
    break;}
case 181:
#line 2202 "hlslang.y"
{ parseContext.symbolTable.push(); ;
    break;}
case 182:
#line 2202 "hlslang.y"
{ parseContext.symbolTable.pop(); ;
    break;}
case 183:
#line 2202 "hlslang.y"
{
        if (yyvsp[-2].interm.intermAggregate != 0)            
            yyvsp[-2].interm.intermAggregate->setOperator(EOpSequence); 
        yyval.interm.intermAggregate = yyvsp[-2].interm.intermAggregate;
    ;
    break;}
case 184:
#line 2210 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 185:
#line 2211 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 186:
#line 2216 "hlslang.y"
{ 
        yyval.interm.intermNode = 0; 
    ;
    break;}
case 187:
#line 2219 "hlslang.y"
{ 
        if (yyvsp[-1].interm.intermAggregate)
            yyvsp[-1].interm.intermAggregate->setOperator(EOpSequence); 
        yyval.interm.intermNode = yyvsp[-1].interm.intermAggregate; 
    ;
    break;}
case 188:
#line 2227 "hlslang.y"
{
        yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate(yyvsp[0].interm.intermNode, 0); 
    ;
    break;}
case 189:
#line 2230 "hlslang.y"
{ 
        yyval.interm.intermAggregate = parseContext.intermediate.growAggregate(yyvsp[-1].interm.intermAggregate, yyvsp[0].interm.intermNode, 0);
    ;
    break;}
case 190:
#line 2236 "hlslang.y"
{ yyval.interm.intermNode = 0; ;
    break;}
case 191:
#line 2237 "hlslang.y"
{ yyval.interm.intermNode = static_cast<TIntermNode*>(yyvsp[-1].interm.intermTypedNode); ;
    break;}
case 192:
#line 2241 "hlslang.y"
{ 
        if (parseContext.boolErrorCheck(yyvsp[-4].lex.line, yyvsp[-2].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermNode = parseContext.intermediate.addSelection(yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.nodePair, yyvsp[-4].lex.line);
    ;
    break;}
case 193:
#line 2249 "hlslang.y"
{
        yyval.interm.nodePair.node1 = yyvsp[-2].interm.intermNode;
        yyval.interm.nodePair.node2 = yyvsp[0].interm.intermNode;
    ;
    break;}
case 194:
#line 2253 "hlslang.y"
{ 
        yyval.interm.nodePair.node1 = yyvsp[0].interm.intermNode;
        yyval.interm.nodePair.node2 = 0;
    ;
    break;}
case 195:
#line 2263 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        if (parseContext.boolErrorCheck(yyvsp[0].interm.intermTypedNode->getLine(), yyvsp[0].interm.intermTypedNode))
            parseContext.recover();          
    ;
    break;}
case 196:
#line 2268 "hlslang.y"
{
        TIntermNode* intermNode;
        if (parseContext.structQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();
        if (parseContext.boolErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();
        
        if (!parseContext.executeInitializer(yyvsp[-2].lex.line, *yyvsp[-2].lex.string, yyvsp[-3].interm.type, yyvsp[0].interm.intermTypedNode, intermNode))
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        else {
            parseContext.recover();
            yyval.interm.intermTypedNode = 0;
        }
    ;
    break;}
case 197:
#line 2285 "hlslang.y"
{ parseContext.symbolTable.push(); ++parseContext.loopNestingLevel; ;
    break;}
case 198:
#line 2285 "hlslang.y"
{ 
        parseContext.symbolTable.pop();
        yyval.interm.intermNode = parseContext.intermediate.addLoop(yyvsp[0].interm.intermNode, yyvsp[-2].interm.intermTypedNode, 0, true, yyvsp[-5].lex.line);
        --parseContext.loopNestingLevel;
    ;
    break;}
case 199:
#line 2290 "hlslang.y"
{ ++parseContext.loopNestingLevel; ;
    break;}
case 200:
#line 2290 "hlslang.y"
{
        if (parseContext.boolErrorCheck(yyvsp[0].lex.line, yyvsp[-2].interm.intermTypedNode))
            parseContext.recover();
                    
        yyval.interm.intermNode = parseContext.intermediate.addLoop(yyvsp[-5].interm.intermNode, yyvsp[-2].interm.intermTypedNode, 0, false, yyvsp[-4].lex.line);
        --parseContext.loopNestingLevel;
    ;
    break;}
case 201:
#line 2297 "hlslang.y"
{ parseContext.symbolTable.push(); ++parseContext.loopNestingLevel; ;
    break;}
case 202:
#line 2297 "hlslang.y"
{
        parseContext.symbolTable.pop();
        yyval.interm.intermNode = parseContext.intermediate.makeAggregate(yyvsp[-3].interm.intermNode, yyvsp[-5].lex.line);
        yyval.interm.intermNode = parseContext.intermediate.growAggregate(
                yyval.interm.intermNode,
                parseContext.intermediate.addLoop(yyvsp[0].interm.intermNode, reinterpret_cast<TIntermTyped*>(yyvsp[-2].interm.nodePair.node1), reinterpret_cast<TIntermTyped*>(yyvsp[-2].interm.nodePair.node2), true, yyvsp[-6].lex.line),
                yyvsp[-6].lex.line);
        yyval.interm.intermNode->getAsAggregate()->setOperator(EOpSequence);
        --parseContext.loopNestingLevel;
    ;
    break;}
case 203:
#line 2310 "hlslang.y"
{
        yyval.interm.intermNode = yyvsp[0].interm.intermNode; 
    ;
    break;}
case 204:
#line 2313 "hlslang.y"
{
        yyval.interm.intermNode = yyvsp[0].interm.intermNode;
    ;
    break;}
case 205:
#line 2319 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; 
    ;
    break;}
case 206:
#line 2322 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = 0; 
    ;
    break;}
case 207:
#line 2328 "hlslang.y"
{ 
        yyval.interm.nodePair.node1 = yyvsp[-1].interm.intermTypedNode;
        yyval.interm.nodePair.node2 = 0;
    ;
    break;}
case 208:
#line 2332 "hlslang.y"
{
        yyval.interm.nodePair.node1 = yyvsp[-2].interm.intermTypedNode;
        yyval.interm.nodePair.node2 = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 209:
#line 2339 "hlslang.y"
{
        if (parseContext.loopNestingLevel <= 0) {
            parseContext.error(yyvsp[-1].lex.line, "continue statement only allowed in loops", "", "");
            parseContext.recover();
        }        
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpContinue, yyvsp[-1].lex.line);
    ;
    break;}
case 210:
#line 2346 "hlslang.y"
{
        if (parseContext.loopNestingLevel <= 0) {
            parseContext.error(yyvsp[-1].lex.line, "break statement only allowed in loops", "", "");
            parseContext.recover();
        }        
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpBreak, yyvsp[-1].lex.line);
    ;
    break;}
case 211:
#line 2353 "hlslang.y"
{
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpReturn, yyvsp[-1].lex.line);
        if (parseContext.currentFunctionType->getBasicType() != EbtVoid) {
            parseContext.error(yyvsp[-1].lex.line, "non-void function must return a value", "return", "");
            parseContext.recover();
        }
    ;
    break;}
case 212:
#line 2360 "hlslang.y"
{        
        TIntermTyped *temp = yyvsp[-1].interm.intermTypedNode;
        if (parseContext.currentFunctionType->getBasicType() == EbtVoid) {
            parseContext.error(yyvsp[-2].lex.line, "void function cannot return a value", "return", "");
            parseContext.recover();
        } else if (*(parseContext.currentFunctionType) != yyvsp[-1].interm.intermTypedNode->getType()) {
            TOperator op = parseContext.getConstructorOp( *(parseContext.currentFunctionType));
            if ( op != EOpNull)
                temp = parseContext.constructBuiltIn( (parseContext.currentFunctionType), op, yyvsp[-1].interm.intermTypedNode, yyvsp[-2].lex.line, false);
            else
                temp = 0;
            if ( temp == 0) {
                parseContext.error(yyvsp[-2].lex.line, "function return is not matching type:", "return", "");
                parseContext.recover();
                temp = yyvsp[-1].interm.intermTypedNode;
            }
        }
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpReturn, temp, yyvsp[-2].lex.line);
        parseContext.functionReturnsValue = true;
    ;
    break;}
case 213:
#line 2380 "hlslang.y"
{
        FRAG_ONLY("discard", yyvsp[-1].lex.line);
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpKill, yyvsp[-1].lex.line);
    ;
    break;}
case 214:
#line 2389 "hlslang.y"
{ 
        yyval.interm.intermNode = yyvsp[0].interm.intermNode; 
        parseContext.treeRoot = yyval.interm.intermNode; 
    ;
    break;}
case 215:
#line 2393 "hlslang.y"
{
        yyval.interm.intermNode = parseContext.intermediate.growAggregate(yyvsp[-1].interm.intermNode, yyvsp[0].interm.intermNode, 0);
        parseContext.treeRoot = yyval.interm.intermNode;
    ;
    break;}
case 216:
#line 2400 "hlslang.y"
{ 
        yyval.interm.intermNode = yyvsp[0].interm.intermNode; 
    ;
    break;}
case 217:
#line 2403 "hlslang.y"
{ 
        yyval.interm.intermNode = yyvsp[0].interm.intermNode; 
    ;
    break;}
case 218:
#line 2406 "hlslang.y"
{ yyval.interm.intermNode = 0; ;
    break;}
case 219:
#line 2410 "hlslang.y"
{
        TFunction& function = *(yyvsp[0].interm.function);
        TFunction* prevDec = static_cast<TFunction*>(parseContext.symbolTable.find(function.getMangledName()));
        //
        // Note:  'prevDec' could be 'function' if this is the first time we've seen function
        // as it would have just been put in the symbol table.  Otherwise, we're looking up
        // an earlier occurance.
        //
        if (prevDec->isDefined()) {
            //
            // Then this function already has a body.
            //
            parseContext.error(yyvsp[0].interm.line, "function already has a body", function.getName().c_str(), "");
            parseContext.recover();
        }
        prevDec->setDefined();
        
        //
        // Raise error message if main function takes any parameters or return anything other than void
        //
        /* TODO: this is unneeded for HLSL, but it might need to name mangle 
        if (function.getName() == "main") {
            if (function.getParamCount() > 0) {
                parseContext.error($1.line, "function cannot take any parameter(s)", function.getName().c_str(), "");
                parseContext.recover();
            }
            if (function.getReturnType().getBasicType() != EbtVoid) {
                parseContext.error($1.line, "", function.getReturnType().getBasicString(), "main function cannot return a value");
                parseContext.recover();
            }            
        }
        */
   
        //
        // New symbol table scope for body of function plus its arguments
        //
        parseContext.symbolTable.push();
        
        //
        // Remember the return type for later checking for RETURN statements.
        //
        parseContext.currentFunctionType = &(prevDec->getReturnType());
        parseContext.functionReturnsValue = false;
        
        // 
        // Insert parameters into the symbol table.
        // If the parameter has no name, it's not an error, just don't insert it 
        // (could be used for unused args).
        //
        // Also, accumulate the list of parameters into the HIL, so lower level code
        // knows where to find parameters.
        //
        TIntermAggregate* paramNodes = new TIntermAggregate;
        for (int i = 0; i < function.getParamCount(); i++) {
            TParameter& param = function[i];
            if (param.name != 0) {
                TVariable *variable = new TVariable(param.name, param.info, *param.type);
                // 
                // Insert the parameters with name in the symbol table.
                //
                if (! parseContext.symbolTable.insert(*variable)) {
                    parseContext.error(yyvsp[0].interm.line, "redefinition", variable->getName().c_str(), "");
                    parseContext.recover();
                    delete variable;
                }
                //
                // Transfer ownership of name pointer to symbol table.
                //
                param.name = 0;
                
                //
                // Add the parameter to the HIL
                //                
                paramNodes = parseContext.intermediate.growAggregate(
                                               paramNodes, 
                                               parseContext.intermediate.addSymbol(variable->getUniqueId(),
                                                                       variable->getName(),
                                                                       variable->getInfo(),
                                                                       variable->getType(), yyvsp[0].interm.line), 
                                               yyvsp[0].interm.line);
            } else {
                paramNodes = parseContext.intermediate.growAggregate(paramNodes, parseContext.intermediate.addSymbol(0, "", param.info, *param.type, yyvsp[0].interm.line), yyvsp[0].interm.line);
            }
        }
        parseContext.intermediate.setAggregateOperator(paramNodes, EOpParameters, yyvsp[0].interm.line);
        yyvsp[0].interm.intermAggregate = paramNodes;
        parseContext.loopNestingLevel = 0;
    ;
    break;}
case 220:
#line 2498 "hlslang.y"
{
        //?? Check that all paths return a value if return type != void ?
        //   May be best done as post process phase on intermediate code
        if (parseContext.currentFunctionType->getBasicType() != EbtVoid && ! parseContext.functionReturnsValue) {
            parseContext.error(yyvsp[-2].interm.line, "function does not return a value:", "", yyvsp[-2].interm.function->getName().c_str());
            parseContext.recover();
        }
        parseContext.symbolTable.pop();
        yyval.interm.intermNode = parseContext.intermediate.growAggregate(yyvsp[-2].interm.intermAggregate, yyvsp[0].interm.intermNode, 0);
        parseContext.intermediate.setAggregateOperator(yyval.interm.intermNode, EOpFunction, yyvsp[-2].interm.line);
        yyval.interm.intermNode->getAsAggregate()->setName(yyvsp[-2].interm.function->getMangledName().c_str());
        yyval.interm.intermNode->getAsAggregate()->setPlainName(yyvsp[-2].interm.function->getName().c_str());
        yyval.interm.intermNode->getAsAggregate()->setType(yyvsp[-2].interm.function->getReturnType());
	if ( yyvsp[-2].interm.function->getInfo())
	    yyval.interm.intermNode->getAsAggregate()->setSemantic(yyvsp[-2].interm.function->getInfo()->getSemantic());
        
        // store the pragma information for debug and optimize and other vendor specific 
        // information. This information can be queried from the parse tree
        yyval.interm.intermNode->getAsAggregate()->setOptimize(parseContext.contextPragma.optimize);
        yyval.interm.intermNode->getAsAggregate()->setDebug(parseContext.contextPragma.debug);
        yyval.interm.intermNode->getAsAggregate()->addToPragmaTable(parseContext.contextPragma.pragmaTable);
    ;
    break;}
case 221:
#line 2523 "hlslang.y"
{
       yyval.interm.intermTypedNode = yyvsp[-1].interm.intermAggregate;
    ;
    break;}
case 222:
#line 2526 "hlslang.y"
{
       yyval.interm.intermTypedNode = yyvsp[-2].interm.intermAggregate;
    ;
    break;}
case 223:
#line 2533 "hlslang.y"
{
        //create a new aggNode
       yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate( yyvsp[0].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode->getLine());       
    ;
    break;}
case 224:
#line 2537 "hlslang.y"
{
       //take the inherited aggNode and return it
       yyval.interm.intermAggregate = yyvsp[0].interm.intermTypedNode->getAsAggregate();       
    ;
    break;}
case 225:
#line 2541 "hlslang.y"
{
        // append to the aggNode
       yyval.interm.intermAggregate = parseContext.intermediate.growAggregate( yyvsp[-2].interm.intermAggregate, yyvsp[0].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode->getLine());       
    ;
    break;}
case 226:
#line 2545 "hlslang.y"
{
       // append all children or $3 to $1 
       yyval.interm.intermAggregate = parseContext.mergeAggregates( yyvsp[-2].interm.intermAggregate, yyvsp[0].interm.intermTypedNode->getAsAggregate());
    ;
    break;}
case 227:
#line 2552 "hlslang.y"
{
        //empty annotation
	  yyval.interm.ann = 0;
    ;
    break;}
case 228:
#line 2556 "hlslang.y"
{
      yyval.interm.ann = yyvsp[-1].interm.ann;
    ;
    break;}
case 229:
#line 2562 "hlslang.y"
{
        yyval.interm.ann = new TAnnotation;
	yyval.interm.ann->addKey( *yyvsp[0].lex.string);
    ;
    break;}
case 230:
#line 2566 "hlslang.y"
{
        yyvsp[-1].interm.ann->addKey( *yyvsp[0].lex.string);
	yyval.interm.ann = yyvsp[-1].interm.ann;
    ;
    break;}
case 231:
#line 2573 "hlslang.y"
{
        yyval.lex.string = yyvsp[-3].lex.string;
    ;
    break;}
case 232:
#line 2579 "hlslang.y"
{;
    break;}
case 233:
#line 2580 "hlslang.y"
{;
    break;}
case 234:
#line 2581 "hlslang.y"
{;
    break;}
case 235:
#line 2582 "hlslang.y"
{;
    break;}
case 236:
#line 2583 "hlslang.y"
{;
    break;}
case 237:
#line 2584 "hlslang.y"
{;
    break;}
case 238:
#line 2585 "hlslang.y"
{;
    break;}
case 239:
#line 2586 "hlslang.y"
{;
    break;}
case 240:
#line 2587 "hlslang.y"
{;
    break;}
case 241:
#line 2588 "hlslang.y"
{;
    break;}
case 242:
#line 2589 "hlslang.y"
{;
    break;}
case 243:
#line 2590 "hlslang.y"
{;
    break;}
case 244:
#line 2591 "hlslang.y"
{;
    break;}
case 245:
#line 2595 "hlslang.y"
{;
    break;}
case 246:
#line 2596 "hlslang.y"
{;
    break;}
case 247:
#line 2597 "hlslang.y"
{;
    break;}
case 248:
#line 2598 "hlslang.y"
{;
    break;}
case 249:
#line 2602 "hlslang.y"
{
    yyval.lex.f = (float)yyvsp[0].lex.i;
;
    break;}
case 250:
#line 2605 "hlslang.y"
{
    yyval.lex.f = (yyvsp[0].lex.b) ? 1.0f : 0.0f;
;
    break;}
case 251:
#line 2608 "hlslang.y"
{
    yyval.lex = yyvsp[0].lex;
;
    break;}
case 252:
#line 2614 "hlslang.y"
{;
    break;}
case 253:
#line 2618 "hlslang.y"
{;
    break;}
case 254:
#line 2619 "hlslang.y"
{;
    break;}
case 255:
#line 2623 "hlslang.y"
{;
    break;}
case 256:
#line 2627 "hlslang.y"
{
        // This is being thrown away
    ;
    break;}
case 257:
#line 2633 "hlslang.y"
{ yyval.lex.string = yyvsp[0].lex.string;;
    break;}
case 258:
#line 2637 "hlslang.y"
{ yyval.interm.typeInfo = 0;;
    break;}
case 259:
#line 2638 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( *yyvsp[0].lex.string, 0); ;
    break;}
case 260:
#line 2639 "hlslang.y"
{ yyval.interm.typeInfo = 0; ;
    break;}
case 261:
#line 2640 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( "", yyvsp[0].interm.ann); ;
    break;}
case 262:
#line 2641 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( *yyvsp[-1].lex.string, yyvsp[0].interm.ann); ;
    break;}
case 263:
#line 2642 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( *yyvsp[-1].lex.string, 0); ;
    break;}
case 264:
#line 2643 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( "", yyvsp[0].interm.ann); ;
    break;}
case 265:
#line 2644 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( *yyvsp[-2].lex.string, yyvsp[0].interm.ann); ;
    break;}
case 266:
#line 2648 "hlslang.y"
{
    constUnion *cUnion = new constUnion[1];
    cUnion[0].setFConst(0.0f);
    yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion( cUnion, TType(EbtFloat, EvqConst, 1), yyvsp[-3].lex.line);
;
    break;}
case 267:
#line 2653 "hlslang.y"
{
;
    break;}
case 268:
#line 2658 "hlslang.y"
{
;
    break;}
case 269:
#line 2660 "hlslang.y"
{
;
    break;}
case 270:
#line 2665 "hlslang.y"
{;
    break;}
case 271:
#line 2666 "hlslang.y"
{;
    break;}
case 272:
#line 2667 "hlslang.y"
{;
    break;}
case 273:
#line 2668 "hlslang.y"
{;
    break;}
case 274:
#line 2669 "hlslang.y"
{;
    break;}
case 275:
#line 2670 "hlslang.y"
{;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 2673 "hlslang.y"

