//--------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

	typedef unsigned char			uint8;
	typedef unsigned short			uint16;
	typedef unsigned int			uint32;
	typedef unsigned int64      	uint64;

	typedef char					sint8;
	typedef short					sint16;
	typedef int						sint32;
	typedef int64	        		sint64;

	typedef uint32		        	fourcc;
	typedef uint32		        	crc32;

	fourcc makeFourcc( uint8 a, uint8 b, uint8 c, uint8 d )
	{
		return ((((fourcc)d) << 24) | (((fourcc)c) << 16) | (((fourcc)b) << 8) | ((fourcc)a));
	}


	struct ResourceFileHeader
	{
		enum
		{
			TikiMagicHostEndian		= makeFourcc( 'T', 'I', 'K', 'I' ),
			TikiMagicOtherEndian	= makeFourcc( 'I', 'K', 'I', 'T' ),
			CurrentFormatVersion	= 1u
		};

		fourcc	tikiFourcc <format=hex>;
		uint16	version;
		uint16	resourceCount;
	};

	struct ResourceHeader
	{
		fourcc	type <format=hex>;
		crc32	key <format=hex>;
		uint32	definition;

		uint32	offsetInFile;

		uint16	version;
		
		uint16	sectionCount;
		uint16	stringCount;
		uint16	linkCount;

		uint32	stringOffsetInResource;
		uint32	stringSizeInBytes;
	};

	enum AllocatorType
	{
		AllocatorType_InitializaionMemory,
		AllocatorType_TemporaryMemory,
		AllocatorType_MainMemory,
		AllocatorType_GraphicsMemory
	};

	struct SectionHeader
	{
		uint8	allocatorType_allocatorId; // 2 bits - type / 6 bits - id // if type is AllocatorType_TemporaryMemory the id will be ignored
		uint8	alignment;

		uint16	referenceCount;

		uint32	sizeInBytes;
		uint32	offsetInResource;
	};

	enum ReferenceType
	{
		ReferenceType_Pointer,
		ReferenceType_String,
		ReferenceType_ResourceLink
	};

	struct ReferenceItem
	{
		uint8	type;			// see ReferenceType
		// 1 byte padding
		uint16	targetId;

		uint32	offsetInSection;
		uint32	offsetInTargetSection;
	};

	enum StringType
	{
		StringType_Char,
		StringType_WideChar,
		StringType_UTF8
	};

	struct StringItem
	{
		uint32	type_lengthModifier_textLength; // 2 bits - type / 2 bits - lengthModifier / 28 bits - textLength
		uint32	offsetInBlock;
	};

	struct ResourceLinkItem
	{
		crc32	fileKey;
		crc32	resourceKey;
		fourcc	resourceType;
	};

ResourceFileHeader fileHeader;
ResourceHeader resourceHeader[ fileHeader.resourceCount ];

local int i;
for ( i = 0; i < fileHeader.resourceCount; i++)
{
    FSeek( resourceHeader[ i ].offsetInFile );
    
    struct SectionHeaders
    {
        SectionHeader sectionHeader[ resourceHeader[ i ].sectionCount ];
    } sectionHeaders;
}
